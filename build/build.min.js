/*!
 * jQuery JavaScript Library v2.1.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-05-01T17:11Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		return !jQuery.isArray( obj ) && obj - parseFloat( obj ) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android < 4.0, iOS < 6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v1.10.19
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-04-18
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== strundefined && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare,
		doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", function() {
				setDocument();
			}, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", function() {
				setDocument();
			});
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowclip^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android < 4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Math.random();
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android < 4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



/*
	Implementation Summary

	1. Enforce API surface and semantic compatibility with 1.9.x branch
	2. Improve the module's maintainability by reducing the storage
		paths to a single mechanism.
	3. Use the same single mechanism to support "private" and "user" data.
	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	5. Avoid exposing implementation details on user objects (eg. expando properties)
	6. Provide a clear path for implementation upgrade to WeakMap in 2014
*/
var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// #11217 - WebKit loses check when the name is after the checked attribute
	// Support: Windows Web Apps (WWA)
	// `name` and `type` need .setAttribute for WWA
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE9-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome < 28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Create "bubbling" focus and blur events
// Support: Firefox, Chrome, Safari
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE 9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE 9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Support: IE >= 9
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Support: IE >= 9
		// Fix Cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit
					// jQuery.merge because push.apply(_, arraylike) throws
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit
					// jQuery.merge because push.apply(_, arraylike) throws
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Fixes #12346
					// Support: Webkit, IE
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') in IE9, see #12537
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS 5.1, Android 4.x, Android 2.3
	// Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
	support.checkOn = input.value !== "";

	// Must access the parent to make an option select properly
	// Support: IE9, IE10
	support.optSelected = opt.selected;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Check if an input maintains its value after becoming a radio
	// Support: IE9, IE10
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

// Support: IE9+
// Selectedness for an option in an optgroup can be inaccurate
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// We assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

// replacement IE console
if (typeof console == 'undefined') { window.console = {log:function() {}}; }

// everything goes here
window.sofia = {};

// version
sofia.version = '3.8.4';

// allows items to register themselves
sofia.plugins = [];
sofia.windowTypes = [];
sofia.menuComponents = [];
sofia.initMethods = [];

sofia.globals = {};

// language
sofia.resources = {};


if (window.location.protocol === 'file:') {
	sofia.protocol = 'https:';
} else {
	sofia.protocol = '';
}

sofia.config = {

	// Change this to clear all user settings
	settingsPrefix: '20140307',

	// Enables the use of online sources (Google Maps, FCBH, Jesus Film, etc.)
	enableOnlineSources: true,

	// first load
	windows: [
		{type: 'bible', data: {textid: 'ENGNAS', fragmentid: 'JN1_1'}},
		{type: 'bible', data: {textid: 'grc_tisch', fragmentid: 'JN1_1'}},
		{type: 'search', data: {textid: 'ENGNAS', searchtext:'truth love'}}
	],

	// URL to content
	// (1) Leave blank to use local content folder.
	// (2) Enter URL (http://www.biblesite.com/) for CORS enabled sites
	// (3) Enter URL (http://www.biblesite.com/) and update
	baseContentUrl: '',

	// (1) Leave blank for local files or for CORS enabled CDN
	// (2) Enter path of script that will convert all files to JSONP (e.g., api.php)
	baseContentApiPath: '',

	// if your are creating a CDN for your content (see above) and want to send a key
	baseContentApiKey: '',

	// file name of texts lists
	textsIndexPath: 'texts.json',

	// URL to about page
	aboutPagePath: 'about.html',

	// (1) Leave blank for JSON search
	// (2) Enter path of script that will return JSON data
	serverSearchPath: '',

	// texts shown before the "MORE" button ("eng-NASB1995", "eng-kjv", "eng_net")
	topTexts: [],

	// new window
	newBibleWindowVersion: 'eng-NASB1995',

	// new bible verse
	newWindowFragmentid: 'JN1_1',

	// new commentary window
	newCommentaryWindowTextId: 'comm_eng_wesley',

	// language for top
	pinnedLanguage: 'English',

	// language(s) for top
	pinnedLanguages: ['English', 'Spanish'],

	// Override the browser and user's choice for UI language
	defaultLanguage: '',

	// URL to custom CSS
	customCssUrl: '',

	// Faith Comes by Hearing
	fcbhKey: '111a125057abd2f8931f6d6ad9f2921f',

	// any texts you want to ignore from FCBH
	fcbhTextExclusions: [''],

	// true: live parse all versions
	// false: loads texts_fcbh.json
	fcbhLoadVersions: false,

	// jesus film media
	jfmKey: ''
};

sofia.customConfigs = {
	"dbs": {
		customCssUrl: 'dbs.css'
	}
};


var WindowManager = function(node, app) {

	var windows = [];

	function addWindow(className, data) {

		var id = 'win' + (new Date()).getTime().toString();

		if (className == 'TextWindow') {
			className = 'BibleWindow';
		}

		// test for classname
		if (typeof window[className] == 'undefined')
			return;

		// create window and add to array
		var win = new Window(id, node, className, data, ext);
		windows.push(win);

		var tabWidth = win.tab.outerWidth();

		//win.tab.css({right: '0px'});


		//size();
		setTimeout(function() {
			app.resize();
		},10);
	}
	function removeWindow(id) {

		// find window
		var windowsToClose = windows.filter(function(win) {
				return win.id == id;
			}),
			windowToClose = (windowsToClose.length == 1) ? windowsToClose[0] : null;

		if (windowToClose == null) {
			console.log('ERROR', "Can't find window", id);
			return;
		}

		// remove from array
		windows = windows.filter(function(win) {
			return win.id != id;
		});

		PlaceKeeper.storePlace();

		// remove from DOM, run delete functions
		windowToClose.close();
		windowToClose = null;

		// resize and reset
		//size();
		PlaceKeeper.restorePlace();

		/*
		var tabWidth = windows[0].tab.outerWidth() - 10;
		for (var i=0,il=windows.length; i<il; i++) {
			windows[i].tab.css({right: ((il-i) * tabWidth) +'px'});
		}
		*/

		windows[0].tab.addClass('active');
		windows[0].node.addClass('active');

		setTimeout(function() {
			app.resize();
		},10);


		// trigger save
		ext.trigger('settingschange', {type: 'settingschange', target: this, data: null});
	}

	function size(width, height) {
		// set container size
		if (width && height) {
			node.width(width)
				.height(height);
		} else {
			width = node.width();
			height = node.height();
		}

		//console.log('manage resize', windows.length);

		var sizeThreshold = 560;

		if (width < sizeThreshold) {
			$('body').addClass('compact-ui');
		} else {
			$('body').removeClass('compact-ui');
		}


		if (windows.length > 0) {

			if (width < sizeThreshold) {

				//$('body').addClass('compact-ui');


				var tabWidth = windows[0].tab.outerWidth()-10;

				// resize all windows to the same
				for (var i=0, il=windows.length; i<il; i++) {
					windows[i].size(width, height);
					windows[i].tab.css({right: ((il-i-1) * tabWidth) +'px'});
				}

			} else {

				//$('body').removeClass('compact-ui');

				// all windows to a percent of the width

				var windowWidth = Math.floor(width/windows.length),
					firstMarginLeft = parseInt(windows[0].node.css('margin-left'), 10),
					firstMarginRight =parseInt(windows[0].node.css('margin-right'), 10);


				if (!isNaN(firstMarginLeft)) {
					windowWidth = windowWidth - firstMarginLeft;
				}
				if (!isNaN(firstMarginRight)) {
					windowWidth = windowWidth - firstMarginRight;
				}

				for (var i=0, il=windows.length; i<il; i++) {
					windows[i].size(windowWidth, height);
				}
			}
		}
	}

	function getSettings() {
		var settingsForAllWindows = [];

		for (var i=0, il=windows.length; i<il; i++) {
			settingsForAllWindows.push({
				'windowType': windows[i].className,
				'data': windows[i].getData()
			});
		}

		return settingsForAllWindows;
	}

	var ext = {
		add: addWindow,
		remove: removeWindow,
		size: size,
		getSettings: getSettings,
		getWindows: function() { return windows; }
	};

	ext = $.extend(true, ext, EventEmitter);

	return ext;
};

var Window = function(id, parentNode, className, data, manager) {

	var ext = {},
		node = $('<div class="window ' + className + ' active"></div>')
					.appendTo(parentNode),
		closeBtn = $('<div class="close-container"><span class="close-button"></span></div>')
					.appendTo(node)
					.find('.close-button')
					.on('click', function() {
						console.log(id, 'remove', manager);


						manager.remove(id);
					}),
		tab = $('<div class="window-tab ' + className + ' active">' +
					'<div class="window-tab-inner">' +
						'<span class="window-tab-label ' + className + '-tab">' + className + '</span>' +
					'</div>' +
				'</div>')
					.appendTo( $('body') );

	// make sure this one is selected
	node.siblings('.window').removeClass('active');
	tab.siblings('.window-tab').removeClass('active');

	ext.id = id;
	ext.className = className;
	ext.node = node;
	ext.tab = tab;

	var controller = new window[className](id, ext, data);
	ext.controller = controller;

	// send settings up to the manager, up to the app
	controller.on('settingschange', function(e) {
		ext.trigger('settingschange', e); // {type: e.type, target: this, data: e.data});
	});
	controller.on('globalmessage', function(e) {
		e.id = id;
		ext.trigger('globalmessage', e); // {type: e.type, target: this, data: e.data});
	});


	// send focus/blur events down to controller
	node.on('mouseenter touchstart', function(e) {
		controller.trigger('focus', {});
		node
			.addClass('focused')
			.siblings()
				.removeClass('focused')
				.trigger('windowblur');
	});
	node.on('mouseleave windowblur', function(e) {
		node
			.removeClass('focused')		
		
		controller.trigger('blur', {});
	});

	tab.on('click', function(e) {
		// dectivate all other tabs and windows
		$('.window, .window-tab').removeClass('active');

		tab.addClass('active');
		node.addClass('active');
	});


	function size(width, height) {
		node.outerWidth(width)
			.outerHeight(height);

		controller.size(width, height);
	}

	function quit() {
		controller.quit();
	}

	function close() {

		if (typeof controller.close != 'undefined') {
			controller.close();
		}
		controller = null;

		ext.clearListeners();

		tab.remove();
		node.remove();
	}


	ext.size = size;
	ext.quit = quit;
	ext.getData =  function() {
			return controller.getData();
	};
	ext.close =  close;

	ext = $.extend(true, ext, EventEmitter);

	// receive from App, send down to controller
	ext.on('message', function(e) {
		controller.trigger('message', e);

		if (e.data.labelTab) {
			tab.find('span').html( e.data.labelTab );
		}
	});
	

	// when a window reports a settings change
	ext.on('settingschange', function(e) {

		// pass up to root
		manager.trigger('settingschange', e);
	});

	ext.on('globalmessage', sofia.app.handleGlobalMessage);	

	return ext;
};


var App = function() {
	// create nodes
	var	win = $(window),
		body = $(document.body),
		container = $('<div class="windows-container"></div>').appendTo(body),
		header = $('<div class="windows-header"></div>').appendTo(container),
		main = $('<div class="windows-main"></div>').appendTo(container),
		footer = $('<div class="windows-footer"></div>').appendTo(container),
		settingsKey = 'app-windows',
		ext = {},
		windowManager = null,
		mainMenu = null;

	function init() {
		// create objects
		mainMenu = new MainMenu(header);
		windowManager = new WindowManager(main, ext);

		ext.windowManager = windowManager;

		// combine nodes and objects
		win.on('resize', resize);
		win.on('orientationchange', resize);
		resize();


		// if not fullscreen and is touch screen
		//if (Detection.hasTouch) {
		try {
			window.top.scrollTo(0, 1);
		} catch (ex) {

		}
		//}


		var settings = getWindowSettings(),
			windowWidth = win.width();
		//console.log('settings',settings, settings.length);

		/*
		if (windowWidth < 768 && settings.windows.length >= 3) {
			settings.windows = settings.windows.slice(0,2);
		}
		if (windowWidth < 460 && settings.windows.length >= 2) {
			settings.windows = settings.windows.slice(0,1);
		}
		*/

		// create windows
		for (var i=0, il=settings.windows.length; i<il; i++) {
			var setting = settings.windows[i],
				windowClassName = setting.windowType;

			// try to find ClassName by the parameter
			if (!windowClassName) {
				var param = setting.type,
					filteredWindowTypes = sofia.windowTypes.filter(function(wt) {
						return wt.param == param;
					});

				if (filteredWindowTypes.length == 1) {
					windowClassName = filteredWindowTypes[0].className;
				}
			}

			//console.log('create window', setting, windowClassName);
			windowManager.add(windowClassName, setting.data);
		}
		// make sure first is active
		$('.window, .window-tab').removeClass('active');
		$('.window:first, .window-tab:first').addClass('active');

		// get first window
		var bibleWindows = settings.windows.filter(function(s) { return s.windowType == 'BibleWindow'; }),
			firstBibleWindow = bibleWindows.length > 0 ? bibleWindows[0] : null,
			firstFragmentid = firstBibleWindow != null && firstBibleWindow.data != null ? firstBibleWindow.data.fragmentid : null;

		if (firstFragmentid != null) {
			TextNavigation.firstState( firstFragmentid );
		}

		var settingsTimer = new Timer(storeSettings, 1000);

		windowManager.on('settingschange', function(e) {

			// title to show active window's position
			if (e.data && e.data.label && e.data.hasFocus) {
				document.title = e.data.labelLong;
			}

			settingsTimer.start();

		});

		var plugins = []
		ext.plugins = plugins;
		// run plugins
		for (var x in sofia.plugins) {
			plugin = new window[ sofia.plugins[x] ](this);
			plugins.push(plugin);

			if (plugin.on) {

				plugin.on('globalmessage', handleGlobalMessage);
			}
		}
	}

	function resize() {
		//console.log('app resize');
		PlaceKeeper.storePlace();

		if (windowManager && windowManager.getWindows().length == 1) {
			body.addClass('one-window')
		} else {
			body.removeClass('one-window')
		}

		// get window size
		var width = win.width(),
			height = win.height(),

			// calculate size
			areaHeight = height - header.outerHeight() + footer.outerHeight(),
			areaWidth = width - parseInt(main.css('margin-left'), 10) - parseInt(main.css('margin-right'), 10);

		/*
		if (width < 460) {
			//header.hide();
			areaHeight = height;
		} else {
			header.show();
		}
		*/

		// set height
		main.height(areaHeight);
		main.width(areaWidth);

		// pass new size down to area
		ext.windowManager.size(areaWidth, areaHeight);

		PlaceKeeper.restorePlace();
	}
	ext.resize = resize;

	function getWindowSettings() {

		// (1) get default settings
		var settings = {
			windows: sofia.config.windows
		};

		// (2) replace defaults with user settings
		settings = AppSettings.getValue(settingsKey, settings);

		// (3) overwrite with QueryString when present
		var queryData = stringUtility.parseQuerystring();
		if (queryData["w1"]) {

			var tempSettings = [];

			for (var i=1; i<=4; i++) {
				var winTypeName = queryData["w" + i.toString()],
					winTypeInfo = sofia.windowTypes.filter(function(winType) { return winType.param == winTypeName; })[0],
					winTypeParamKeys = typeof winTypeInfo != 'undefined' ? Object.keys(winTypeInfo.paramKeys) : [],
					setting = {
						type: winTypeName,
						data: {}
					};

				if (typeof winTypeName != 'undefined') {
					// go though all querystring values, and anything that ends with '1' goes with this data
					for (var q in queryData) {
						var key = q.substring(0, q.length-1),
							number = q.substring(q.length-1),
							value = queryData[q];

						if (key != 'w' && number == i.toString()) {

							// convert short querystring key to longer one if needed
							var longParamKey = winTypeParamKeys.filter(function(lpk) {
								console.log(key, lpk, winTypeInfo.paramKeys[lpk]);
								return key == winTypeInfo.paramKeys[lpk] || key == lpk;
							})[0];

							setting.data[longParamKey] = value;
						}
					}

					tempSettings.push(setting);
				}
			}

			// overwrite settings
			if (tempSettings.length > 0) {
				settings.windows = tempSettings;
			}

		}
		return settings;
	}

	function storeSettings() {
			// get settings from all windows
		var windowSettings = ext.windowManager.getSettings(),
			// later we'll need these
			headerSettings = {},
			settings = {
				windows: windowSettings
			};

		//console.log('storeSettings', settings);

		// store
		AppSettings.setValue(settingsKey, settings );
	}

	function handleGlobalMessage(e) {
		// give to other windows
		var windows = ext.windowManager.getWindows();

		for (var i=0, il=windows.length; i<il; i++) {
			var w = windows[i];

			if (w.id != e.id) {
		 		// pass message down
		 		w.trigger('message', e);
			}
		}

		// plugins
		if (ext.plugins) {
			for (var i=0, il=ext.plugins.length; i<il; i++) {
				var p = sofia.app.plugins[i];

				if (p.trigger) {
					// pass message down
					p.trigger('message', e);
				}
			}
		}

	}

	ext.init = init;
	ext.handleGlobalMessage = handleGlobalMessage;

	// internationalization: i18n

	// if this is the first visit, we need a way to set the language
	var lngSetting = '',
		i18nCookieValue = AppSettings.getCookieValue('i18next');

	if (i18nCookieValue == '' || i18nCookieValue == null && sofia.config.defaultLanguage != '') {
		lngSetting = sofia.config.defaultLanguage;
	}

	i18n.init({fallbackLng: 'en', lng: lngSetting, resStore: sofia.resources});

	setTimeout(function() {

		var lang = i18n.lng(),
			langSelector = $('#config-language');

		langSelector.val( lang );

		if (lang != langSelector.val() ) {
			langSelector.val(  lang.split('-')[0] );
		}

		if (langSelector[0] && langSelector[0].localizeLanguages) {
			langSelector[0].localizeLanguages();
		}

	}, 50);

	return ext;
};


$(function() {
	// hide initial text area
	$('#startup').hide();

	// test for local file support
	if (window.location.protocol === 'file:') {

		$.ajax({
			dataType: 'text',

			url: 'about.html',
			success: function() {
				init();
			},
			error: function(e) {
				var modal = new MovableWindow( Math.min(500, $(window).width()) ,250, 'Local Files Error'),
					errorMessage = '',
					ua = navigator.userAgent.toLowerCase();
				//modal.size(500, 200).center();

				if (ua.indexOf('chrome') > -1) {
					if (ua.indexOf('mac os') > -1) {
						errorMessage =
							'<p>Mac, Terminal</p>' +
							'<code>/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --allow-file-access-from-files</code>';
					} else
					if (ua.indexOf('windows') > -1) {
						errorMessage =
							'<p>Mac, Terminal</p>' +
							'<code>/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --allow-file-access-from-files</code>';
					}
				} else {
					errorMessage =
						'<p>Unknown error loading files (cannot load about.html)' + e + '</p>';
				}

				modal.body.css({background: '#000', color: '#fff' }).html(
					'<div style="padding: 20px;">' +
						errorMessage +
					'</div>'
				);
				modal.show().center();
			}
		});

	} else {
		init();
	}

	function init() {
		// load config
		var params = stringUtility.parseQuerystring(),
			custom = params["custom"];

		if (typeof custom != 'undefined' && custom != '') {
			var customizations = sofia.customConfigs[custom];

			if (typeof customizations != 'undefined' && customizations != null) {
				sofia.config = $.extend(sofia.config, customizations);
			}
		}

		// load css
		if (typeof sofia.config.customCssUrl != 'undefined' && sofia.config.customCssUrl != '') {
			$('<link href="' + sofia.config.customCssUrl + '" rel="stylesheet" />').appendTo( $('head') );
		}

		var isiOSApp = (navigator.userAgent.toLowerCase().indexOf('ipad') > -1 || navigator.userAgent.toLowerCase().indexOf('iphone') > -1) && window.location.protocol === 'file:';

		if (window.navigator.standalone === true || isiOSApp) {
			$('body').addClass('app-mobile-fullscreen');
		}

		// run inits
		for (var i=0, il=sofia.initMethods.length; i<il; i++) {
			sofia.initMethods[i]();
		}

		// create app
		sofia.app = new App();
		sofia.app.init();

		$('.i18n').i18n();
	}
});

/*!
 * XRegExp v2.0.0
 * (c) 2007-2012 Steven Levithan <http://xregexp.com/>
 * MIT License
 */

/**
 * XRegExp provides augmented, extensible JavaScript regular expressions. You get new syntax,
 * flags, and methods beyond what browsers support natively. XRegExp is also a regex utility belt
 * with tools to make your client-side grepping simpler and more powerful, while freeing you from
 * worrying about pesky cross-browser inconsistencies and the dubious `lastIndex` property. See
 * XRegExp's documentation (http://xregexp.com/) for more details.
 * @module xregexp
 * @requires N/A
 */
var XRegExp;

// Avoid running twice; that would reset tokens and could break references to native globals
XRegExp = XRegExp || (function (undef) {
    "use strict";

/*--------------------------------------
 *  Private variables
 *------------------------------------*/

    var self,
        addToken,
        add,

// Optional features; can be installed and uninstalled
        features = {
            natives: false,
            extensibility: false
        },

// Store native methods to use and restore ("native" is an ES3 reserved keyword)
        nativ = {
            exec: RegExp.prototype.exec,
            test: RegExp.prototype.test,
            match: String.prototype.match,
            replace: String.prototype.replace,
            split: String.prototype.split
        },

// Storage for fixed/extended native methods
        fixed = {},

// Storage for cached regexes
        cache = {},

// Storage for addon tokens
        tokens = [],

// Token scopes
        defaultScope = "default",
        classScope = "class",

// Regexes that match native regex syntax
        nativeTokens = {
            // Any native multicharacter token in default scope (includes octals, excludes character classes)
            "default": /^(?:\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u[\dA-Fa-f]{4}|c[A-Za-z]|[\s\S])|\(\?[:=!]|[?*+]\?|{\d+(?:,\d*)?}\??)/,
            // Any native multicharacter token in character class scope (includes octals)
            "class": /^(?:\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u[\dA-Fa-f]{4}|c[A-Za-z]|[\s\S]))/
        },

// Any backreference in replacement strings
        replacementToken = /\$(?:{([\w$]+)}|(\d\d?|[\s\S]))/g,

// Any character with a later instance in the string
        duplicateFlags = /([\s\S])(?=[\s\S]*\1)/g,

// Any greedy/lazy quantifier
        quantifier = /^(?:[?*+]|{\d+(?:,\d*)?})\??/,

// Check for correct `exec` handling of nonparticipating capturing groups
        compliantExecNpcg = nativ.exec.call(/()??/, "")[1] === undef,

// Check for flag y support (Firefox 3+)
        hasNativeY = RegExp.prototype.sticky !== undef,

// Used to kill infinite recursion during XRegExp construction
        isInsideConstructor = false,

// Storage for known flags, including addon flags
        registeredFlags = "gim" + (hasNativeY ? "y" : "");

/*--------------------------------------
 *  Private helper functions
 *------------------------------------*/

/**
 * Attaches XRegExp.prototype properties and named capture supporting data to a regex object.
 * @private
 * @param {RegExp} regex Regex to augment.
 * @param {Array} captureNames Array with capture names, or null.
 * @param {Boolean} [isNative] Whether the regex was created by `RegExp` rather than `XRegExp`.
 * @returns {RegExp} Augmented regex.
 */
    function augment(regex, captureNames, isNative) {
        var p;
        // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value
        for (p in self.prototype) {
            if (self.prototype.hasOwnProperty(p)) {
                regex[p] = self.prototype[p];
            }
        }
        regex.xregexp = {captureNames: captureNames, isNative: !!isNative};
        return regex;
    }

/**
 * Returns native `RegExp` flags used by a regex object.
 * @private
 * @param {RegExp} regex Regex to check.
 * @returns {String} Native flags in use.
 */
    function getNativeFlags(regex) {
        //return nativ.exec.call(/\/([a-z]*)$/i, String(regex))[1];
        return (regex.global     ? "g" : "") +
               (regex.ignoreCase ? "i" : "") +
               (regex.multiline  ? "m" : "") +
               (regex.extended   ? "x" : "") + // Proposed for ES6, included in AS3
               (regex.sticky     ? "y" : ""); // Proposed for ES6, included in Firefox 3+
    }

/**
 * Copies a regex object while preserving special properties for named capture and augmenting with
 * `XRegExp.prototype` methods. The copy has a fresh `lastIndex` property (set to zero). Allows
 * adding and removing flags while copying the regex.
 * @private
 * @param {RegExp} regex Regex to copy.
 * @param {String} [addFlags] Flags to be added while copying the regex.
 * @param {String} [removeFlags] Flags to be removed while copying the regex.
 * @returns {RegExp} Copy of the provided regex, possibly with modified flags.
 */
    function copy(regex, addFlags, removeFlags) {
        if (!self.isRegExp(regex)) {
            throw new TypeError("type RegExp expected");
        }
        var flags = nativ.replace.call(getNativeFlags(regex) + (addFlags || ""), duplicateFlags, "");
        if (removeFlags) {
            // Would need to escape `removeFlags` if this was public
            flags = nativ.replace.call(flags, new RegExp("[" + removeFlags + "]+", "g"), "");
        }
        if (regex.xregexp && !regex.xregexp.isNative) {
            // Compiling the current (rather than precompilation) source preserves the effects of nonnative source flags
            regex = augment(self(regex.source, flags),
                            regex.xregexp.captureNames ? regex.xregexp.captureNames.slice(0) : null);
        } else {
            // Augment with `XRegExp.prototype` methods, but use native `RegExp` (avoid searching for special tokens)
            regex = augment(new RegExp(regex.source, flags), null, true);
        }
        return regex;
    }

/*
 * Returns the last index at which a given value can be found in an array, or `-1` if it's not
 * present. The array is searched backwards.
 * @private
 * @param {Array} array Array to search.
 * @param {*} value Value to locate in the array.
 * @returns {Number} Last zero-based index at which the item is found, or -1.
 */
    function lastIndexOf(array, value) {
        var i = array.length;
        if (Array.prototype.lastIndexOf) {
            return array.lastIndexOf(value); // Use the native method if available
        }
        while (i--) {
            if (array[i] === value) {
                return i;
            }
        }
        return -1;
    }

/**
 * Determines whether an object is of the specified type.
 * @private
 * @param {*} value Object to check.
 * @param {String} type Type to check for, in lowercase.
 * @returns {Boolean} Whether the object matches the type.
 */
    function isType(value, type) {
        return Object.prototype.toString.call(value).toLowerCase() === "[object " + type + "]";
    }

/**
 * Prepares an options object from the given value.
 * @private
 * @param {String|Object} value Value to convert to an options object.
 * @returns {Object} Options object.
 */
    function prepareOptions(value) {
        value = value || {};
        if (value === "all" || value.all) {
            value = {natives: true, extensibility: true};
        } else if (isType(value, "string")) {
            value = self.forEach(value, /[^\s,]+/, function (m) {
                this[m] = true;
            }, {});
        }
        return value;
    }

/**
 * Runs built-in/custom tokens in reverse insertion order, until a match is found.
 * @private
 * @param {String} pattern Original pattern from which an XRegExp object is being built.
 * @param {Number} pos Position to search for tokens within `pattern`.
 * @param {Number} scope Current regex scope.
 * @param {Object} context Context object assigned to token handler functions.
 * @returns {Object} Object with properties `output` (the substitution string returned by the
 *   successful token handler) and `match` (the token's match array), or null.
 */
    function runTokens(pattern, pos, scope, context) {
        var i = tokens.length,
            result = null,
            match,
            t;
        // Protect against constructing XRegExps within token handler and trigger functions
        isInsideConstructor = true;
        // Must reset `isInsideConstructor`, even if a `trigger` or `handler` throws
        try {
            while (i--) { // Run in reverse order
                t = tokens[i];
                if ((t.scope === "all" || t.scope === scope) && (!t.trigger || t.trigger.call(context))) {
                    t.pattern.lastIndex = pos;
                    match = fixed.exec.call(t.pattern, pattern); // Fixed `exec` here allows use of named backreferences, etc.
                    if (match && match.index === pos) {
                        result = {
                            output: t.handler.call(context, match, scope),
                            match: match
                        };
                        break;
                    }
                }
            }
        } catch (err) {
            throw err;
        } finally {
            isInsideConstructor = false;
        }
        return result;
    }

/**
 * Enables or disables XRegExp syntax and flag extensibility.
 * @private
 * @param {Boolean} on `true` to enable; `false` to disable.
 */
    function setExtensibility(on) {
        self.addToken = addToken[on ? "on" : "off"];
        features.extensibility = on;
    }

/**
 * Enables or disables native method overrides.
 * @private
 * @param {Boolean} on `true` to enable; `false` to disable.
 */
    function setNatives(on) {
        RegExp.prototype.exec = (on ? fixed : nativ).exec;
        RegExp.prototype.test = (on ? fixed : nativ).test;
        String.prototype.match = (on ? fixed : nativ).match;
        String.prototype.replace = (on ? fixed : nativ).replace;
        String.prototype.split = (on ? fixed : nativ).split;
        features.natives = on;
    }

/*--------------------------------------
 *  Constructor
 *------------------------------------*/

/**
 * Creates an extended regular expression object for matching text with a pattern. Differs from a
 * native regular expression in that additional syntax and flags are supported. The returned object
 * is in fact a native `RegExp` and works with all native methods.
 * @class XRegExp
 * @constructor
 * @param {String|RegExp} pattern Regex pattern string, or an existing `RegExp` object to copy.
 * @param {String} [flags] Any combination of flags:
 *   <li>`g` - global
 *   <li>`i` - ignore case
 *   <li>`m` - multiline anchors
 *   <li>`n` - explicit capture
 *   <li>`s` - dot matches all (aka singleline)
 *   <li>`x` - free-spacing and line comments (aka extended)
 *   <li>`y` - sticky (Firefox 3+ only)
 *   Flags cannot be provided when constructing one `RegExp` from another.
 * @returns {RegExp} Extended regular expression object.
 * @example
 *
 * // With named capture and flag x
 * date = XRegExp('(?<year>  [0-9]{4}) -?  # year  \n\
 *                 (?<month> [0-9]{2}) -?  # month \n\
 *                 (?<day>   [0-9]{2})     # day   ', 'x');
 *
 * // Passing a regex object to copy it. The copy maintains special properties for named capture,
 * // is augmented with `XRegExp.prototype` methods, and has a fresh `lastIndex` property (set to
 * // zero). Native regexes are not recompiled using XRegExp syntax.
 * XRegExp(/regex/);
 */
    self = function (pattern, flags) {
        if (self.isRegExp(pattern)) {
            if (flags !== undef) {
                throw new TypeError("can't supply flags when constructing one RegExp from another");
            }
            return copy(pattern);
        }
        // Tokens become part of the regex construction process, so protect against infinite recursion
        // when an XRegExp is constructed within a token handler function
        if (isInsideConstructor) {
            throw new Error("can't call the XRegExp constructor within token definition functions");
        }

        var output = [],
            scope = defaultScope,
            tokenContext = {
                hasNamedCapture: false,
                captureNames: [],
                hasFlag: function (flag) {
                    return flags.indexOf(flag) > -1;
                }
            },
            pos = 0,
            tokenResult,
            match,
            chr;
        pattern = pattern === undef ? "" : String(pattern);
        flags = flags === undef ? "" : String(flags);

        if (nativ.match.call(flags, duplicateFlags)) { // Don't use test/exec because they would update lastIndex
            throw new SyntaxError("invalid duplicate regular expression flag");
        }
        // Strip/apply leading mode modifier with any combination of flags except g or y: (?imnsx)
        pattern = nativ.replace.call(pattern, /^\(\?([\w$]+)\)/, function ($0, $1) {
            if (nativ.test.call(/[gy]/, $1)) {
                throw new SyntaxError("can't use flag g or y in mode modifier");
            }
            flags = nativ.replace.call(flags + $1, duplicateFlags, "");
            return "";
        });
        self.forEach(flags, /[\s\S]/, function (m) {
            if (registeredFlags.indexOf(m[0]) < 0) {
                throw new SyntaxError("invalid regular expression flag " + m[0]);
            }
        });

        while (pos < pattern.length) {
            // Check for custom tokens at the current position
            tokenResult = runTokens(pattern, pos, scope, tokenContext);
            if (tokenResult) {
                output.push(tokenResult.output);
                pos += (tokenResult.match[0].length || 1);
            } else {
                // Check for native tokens (except character classes) at the current position
                match = nativ.exec.call(nativeTokens[scope], pattern.slice(pos));
                if (match) {
                    output.push(match[0]);
                    pos += match[0].length;
                } else {
                    chr = pattern.charAt(pos);
                    if (chr === "[") {
                        scope = classScope;
                    } else if (chr === "]") {
                        scope = defaultScope;
                    }
                    // Advance position by one character
                    output.push(chr);
                    ++pos;
                }
            }
        }

        return augment(new RegExp(output.join(""), nativ.replace.call(flags, /[^gimy]+/g, "")),
                       tokenContext.hasNamedCapture ? tokenContext.captureNames : null);
    };

/*--------------------------------------
 *  Public methods/properties
 *------------------------------------*/

// Installed and uninstalled states for `XRegExp.addToken`
    addToken = {
        on: function (regex, handler, options) {
            options = options || {};
            if (regex) {
                tokens.push({
                    pattern: copy(regex, "g" + (hasNativeY ? "y" : "")),
                    handler: handler,
                    scope: options.scope || defaultScope,
                    trigger: options.trigger || null
                });
            }
            // Providing `customFlags` with null `regex` and `handler` allows adding flags that do
            // nothing, but don't throw an error
            if (options.customFlags) {
                registeredFlags = nativ.replace.call(registeredFlags + options.customFlags, duplicateFlags, "");
            }
        },
        off: function () {
            throw new Error("extensibility must be installed before using addToken");
        }
    };

/**
 * Extends or changes XRegExp syntax and allows custom flags. This is used internally and can be
 * used to create XRegExp addons. `XRegExp.install('extensibility')` must be run before calling
 * this function, or an error is thrown. If more than one token can match the same string, the last
 * added wins.
 * @memberOf XRegExp
 * @param {RegExp} regex Regex object that matches the new token.
 * @param {Function} handler Function that returns a new pattern string (using native regex syntax)
 *   to replace the matched token within all future XRegExp regexes. Has access to persistent
 *   properties of the regex being built, through `this`. Invoked with two arguments:
 *   <li>The match array, with named backreference properties.
 *   <li>The regex scope where the match was found.
 * @param {Object} [options] Options object with optional properties:
 *   <li>`scope` {String} Scopes where the token applies: 'default', 'class', or 'all'.
 *   <li>`trigger` {Function} Function that returns `true` when the token should be applied; e.g.,
 *     if a flag is set. If `false` is returned, the matched string can be matched by other tokens.
 *     Has access to persistent properties of the regex being built, through `this` (including
 *     function `this.hasFlag`).
 *   <li>`customFlags` {String} Nonnative flags used by the token's handler or trigger functions.
 *     Prevents XRegExp from throwing an invalid flag error when the specified flags are used.
 * @example
 *
 * // Basic usage: Adds \a for ALERT character
 * XRegExp.addToken(
 *   /\\a/,
 *   function () {return '\\x07';},
 *   {scope: 'all'}
 * );
 * XRegExp('\\a[\\a-\\n]+').test('\x07\n\x07'); // -> true
 */
    self.addToken = addToken.off;

/**
 * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with
 * the same pattern and flag combination, the cached copy is returned.
 * @memberOf XRegExp
 * @param {String} pattern Regex pattern string.
 * @param {String} [flags] Any combination of XRegExp flags.
 * @returns {RegExp} Cached XRegExp object.
 * @example
 *
 * while (match = XRegExp.cache('.', 'gs').exec(str)) {
 *   // The regex is compiled once only
 * }
 */
    self.cache = function (pattern, flags) {
        var key = pattern + "/" + (flags || "");
        return cache[key] || (cache[key] = self(pattern, flags));
    };

/**
 * Escapes any regular expression metacharacters, for use when matching literal strings. The result
 * can safely be used at any point within a regex that uses any flags.
 * @memberOf XRegExp
 * @param {String} str String to escape.
 * @returns {String} String with regex metacharacters escaped.
 * @example
 *
 * XRegExp.escape('Escaped? <.>');
 * // -> 'Escaped\?\ <\.>'
 */
    self.escape = function (str) {
        return nativ.replace.call(str, /[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    };

/**
 * Executes a regex search in a specified string. Returns a match array or `null`. If the provided
 * regex uses named capture, named backreference properties are included on the match array.
 * Optional `pos` and `sticky` arguments specify the search start position, and whether the match
 * must start at the specified position only. The `lastIndex` property of the provided regex is not
 * used, but is updated for compatibility. Also fixes browser bugs compared to the native
 * `RegExp.prototype.exec` and can be used reliably cross-browser.
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp} regex Regex to search with.
 * @param {Number} [pos=0] Zero-based index at which to start the search.
 * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
 *   only. The string `'sticky'` is accepted as an alternative to `true`.
 * @returns {Array} Match array with named backreference properties, or null.
 * @example
 *
 * // Basic use, with named backreference
 * var match = XRegExp.exec('U+2620', XRegExp('U\\+(?<hex>[0-9A-F]{4})'));
 * match.hex; // -> '2620'
 *
 * // With pos and sticky, in a loop
 * var pos = 2, result = [], match;
 * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\d)>/, pos, 'sticky')) {
 *   result.push(match[1]);
 *   pos = match.index + match[0].length;
 * }
 * // result -> ['2', '3', '4']
 */
    self.exec = function (str, regex, pos, sticky) {
        var r2 = copy(regex, "g" + (sticky && hasNativeY ? "y" : ""), (sticky === false ? "y" : "")),
            match;
        r2.lastIndex = pos = pos || 0;
        match = fixed.exec.call(r2, str); // Fixed `exec` required for `lastIndex` fix, etc.
        if (sticky && match && match.index !== pos) {
            match = null;
        }
        if (regex.global) {
            regex.lastIndex = match ? r2.lastIndex : 0;
        }
        return match;
    };

/**
 * Executes a provided function once per regex match.
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp} regex Regex to search with.
 * @param {Function} callback Function to execute for each match. Invoked with four arguments:
 *   <li>The match array, with named backreference properties.
 *   <li>The zero-based match index.
 *   <li>The string being traversed.
 *   <li>The regex object being used to traverse the string.
 * @param {*} [context] Object to use as `this` when executing `callback`.
 * @returns {*} Provided `context` object.
 * @example
 *
 * // Extracts every other digit from a string
 * XRegExp.forEach('1a2345', /\d/, function (match, i) {
 *   if (i % 2) this.push(+match[0]);
 * }, []);
 * // -> [2, 4]
 */
    self.forEach = function (str, regex, callback, context) {
        var pos = 0,
            i = -1,
            match;
        while ((match = self.exec(str, regex, pos))) {
            callback.call(context, match, ++i, str, regex);
            pos = match.index + (match[0].length || 1);
        }
        return context;
    };

/**
 * Copies a regex object and adds flag `g`. The copy maintains special properties for named
 * capture, is augmented with `XRegExp.prototype` methods, and has a fresh `lastIndex` property
 * (set to zero). Native regexes are not recompiled using XRegExp syntax.
 * @memberOf XRegExp
 * @param {RegExp} regex Regex to globalize.
 * @returns {RegExp} Copy of the provided regex with flag `g` added.
 * @example
 *
 * var globalCopy = XRegExp.globalize(/regex/);
 * globalCopy.global; // -> true
 */
    self.globalize = function (regex) {
        return copy(regex, "g");
    };

/**
 * Installs optional features according to the specified options.
 * @memberOf XRegExp
 * @param {Object|String} options Options object or string.
 * @example
 *
 * // With an options object
 * XRegExp.install({
 *   // Overrides native regex methods with fixed/extended versions that support named
 *   // backreferences and fix numerous cross-browser bugs
 *   natives: true,
 *
 *   // Enables extensibility of XRegExp syntax and flags
 *   extensibility: true
 * });
 *
 * // With an options string
 * XRegExp.install('natives extensibility');
 *
 * // Using a shortcut to install all optional features
 * XRegExp.install('all');
 */
    self.install = function (options) {
        options = prepareOptions(options);
        if (!features.natives && options.natives) {
            setNatives(true);
        }
        if (!features.extensibility && options.extensibility) {
            setExtensibility(true);
        }
    };

/**
 * Checks whether an individual optional feature is installed.
 * @memberOf XRegExp
 * @param {String} feature Name of the feature to check. One of:
 *   <li>`natives`
 *   <li>`extensibility`
 * @returns {Boolean} Whether the feature is installed.
 * @example
 *
 * XRegExp.isInstalled('natives');
 */
    self.isInstalled = function (feature) {
        return !!(features[feature]);
    };

/**
 * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes
 * created in another frame, when `instanceof` and `constructor` checks would fail.
 * @memberOf XRegExp
 * @param {*} value Object to check.
 * @returns {Boolean} Whether the object is a `RegExp` object.
 * @example
 *
 * XRegExp.isRegExp('string'); // -> false
 * XRegExp.isRegExp(/regex/i); // -> true
 * XRegExp.isRegExp(RegExp('^', 'm')); // -> true
 * XRegExp.isRegExp(XRegExp('(?s).')); // -> true
 */
    self.isRegExp = function (value) {
        return isType(value, "regexp");
    };

/**
 * Retrieves the matches from searching a string using a chain of regexes that successively search
 * within previous matches. The provided `chain` array can contain regexes and objects with `regex`
 * and `backref` properties. When a backreference is specified, the named or numbered backreference
 * is passed forward to the next regex or returned.
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {Array} chain Regexes that each search for matches within preceding results.
 * @returns {Array} Matches by the last regex in the chain, or an empty array.
 * @example
 *
 * // Basic usage; matches numbers within <b> tags
 * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [
 *   XRegExp('(?is)<b>.*?</b>'),
 *   /\d+/
 * ]);
 * // -> ['2', '4', '56']
 *
 * // Passing forward and returning specific backreferences
 * html = '<a href="http://xregexp.com/api/">XRegExp</a>\
 *         <a href="http://www.google.com/">Google</a>';
 * XRegExp.matchChain(html, [
 *   {regex: /<a href="([^"]+)">/i, backref: 1},
 *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}
 * ]);
 * // -> ['xregexp.com', 'www.google.com']
 */
    self.matchChain = function (str, chain) {
        return (function recurseChain(values, level) {
            var item = chain[level].regex ? chain[level] : {regex: chain[level]},
                matches = [],
                addMatch = function (match) {
                    matches.push(item.backref ? (match[item.backref] || "") : match[0]);
                },
                i;
            for (i = 0; i < values.length; ++i) {
                self.forEach(values[i], item.regex, addMatch);
            }
            return ((level === chain.length - 1) || !matches.length) ?
                    matches :
                    recurseChain(matches, level + 1);
        }([str], 0));
    };

/**
 * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string
 * or regex, and the replacement can be a string or a function to be called for each match. To
 * perform a global search and replace, use the optional `scope` argument or include flag `g` if
 * using a regex. Replacement strings can use `${n}` for named and numbered backreferences.
 * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser
 * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp|String} search Search pattern to be replaced.
 * @param {String|Function} replacement Replacement string or a function invoked to create it.
 *   Replacement strings can include special replacement syntax:
 *     <li>$$ - Inserts a literal '$'.
 *     <li>$&, $0 - Inserts the matched substring.
 *     <li>$` - Inserts the string that precedes the matched substring (left context).
 *     <li>$' - Inserts the string that follows the matched substring (right context).
 *     <li>$n, $nn - Where n/nn are digits referencing an existent capturing group, inserts
 *       backreference n/nn.
 *     <li>${n} - Where n is a name or any number of digits that reference an existent capturing
 *       group, inserts backreference n.
 *   Replacement functions are invoked with three or more arguments:
 *     <li>The matched substring (corresponds to $& above). Named backreferences are accessible as
 *       properties of this first argument.
 *     <li>0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).
 *     <li>The zero-based index of the match within the total search string.
 *     <li>The total string being searched.
 * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not
 *   explicitly specified and using a regex with flag `g`, `scope` is 'all'.
 * @returns {String} New string with one or all matches replaced.
 * @example
 *
 * // Regex search, using named backreferences in replacement string
 * var name = XRegExp('(?<first>\\w+) (?<last>\\w+)');
 * XRegExp.replace('John Smith', name, '${last}, ${first}');
 * // -> 'Smith, John'
 *
 * // Regex search, using named backreferences in replacement function
 * XRegExp.replace('John Smith', name, function (match) {
 *   return match.last + ', ' + match.first;
 * });
 * // -> 'Smith, John'
 *
 * // Global string search/replacement
 * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');
 * // -> 'XRegExp builds XRegExps'
 */
    self.replace = function (str, search, replacement, scope) {
        var isRegex = self.isRegExp(search),
            search2 = search,
            result;
        if (isRegex) {
            if (scope === undef && search.global) {
                scope = "all"; // Follow flag g when `scope` isn't explicit
            }
            // Note that since a copy is used, `search`'s `lastIndex` isn't updated *during* replacement iterations
            search2 = copy(search, scope === "all" ? "g" : "", scope === "all" ? "" : "g");
        } else if (scope === "all") {
            search2 = new RegExp(self.escape(String(search)), "g");
        }
        result = fixed.replace.call(String(str), search2, replacement); // Fixed `replace` required for named backreferences, etc.
        if (isRegex && search.global) {
            search.lastIndex = 0; // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
        }
        return result;
    };

/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @memberOf XRegExp
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * XRegExp.split('a b c', ' ');
 * // -> ['a', 'b', 'c']
 *
 * // With limit
 * XRegExp.split('a b c', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * XRegExp.split('..word1..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', '..']
 */
    self.split = function (str, separator, limit) {
        return fixed.split.call(str, separator, limit);
    };

/**
 * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and
 * `sticky` arguments specify the search start position, and whether the match must start at the
 * specified position only. The `lastIndex` property of the provided regex is not used, but is
 * updated for compatibility. Also fixes browser bugs compared to the native
 * `RegExp.prototype.test` and can be used reliably cross-browser.
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp} regex Regex to search with.
 * @param {Number} [pos=0] Zero-based index at which to start the search.
 * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
 *   only. The string `'sticky'` is accepted as an alternative to `true`.
 * @returns {Boolean} Whether the regex matched the provided value.
 * @example
 *
 * // Basic use
 * XRegExp.test('abc', /c/); // -> true
 *
 * // With pos and sticky
 * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false
 */
    self.test = function (str, regex, pos, sticky) {
        // Do this the easy way :-)
        return !!self.exec(str, regex, pos, sticky);
    };

/**
 * Uninstalls optional features according to the specified options.
 * @memberOf XRegExp
 * @param {Object|String} options Options object or string.
 * @example
 *
 * // With an options object
 * XRegExp.uninstall({
 *   // Restores native regex methods
 *   natives: true,
 *
 *   // Disables additional syntax and flag extensions
 *   extensibility: true
 * });
 *
 * // With an options string
 * XRegExp.uninstall('natives extensibility');
 *
 * // Using a shortcut to uninstall all optional features
 * XRegExp.uninstall('all');
 */
    self.uninstall = function (options) {
        options = prepareOptions(options);
        if (features.natives && options.natives) {
            setNatives(false);
        }
        if (features.extensibility && options.extensibility) {
            setExtensibility(false);
        }
    };

/**
 * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as
 * regex objects or strings. Metacharacters are escaped in patterns provided as strings.
 * Backreferences in provided regex objects are automatically renumbered to work correctly. Native
 * flags used by provided regexes are ignored in favor of the `flags` argument.
 * @memberOf XRegExp
 * @param {Array} patterns Regexes and strings to combine.
 * @param {String} [flags] Any combination of XRegExp flags.
 * @returns {RegExp} Union of the provided regexes and strings.
 * @example
 *
 * XRegExp.union(['a+b*c', /(dogs)\1/, /(cats)\1/], 'i');
 * // -> /a\+b\*c|(dogs)\1|(cats)\2/i
 *
 * XRegExp.union([XRegExp('(?<pet>dogs)\\k<pet>'), XRegExp('(?<pet>cats)\\k<pet>')]);
 * // -> XRegExp('(?<pet>dogs)\\k<pet>|(?<pet>cats)\\k<pet>')
 */
    self.union = function (patterns, flags) {
        var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*]/g,
            numCaptures = 0,
            numPriorCaptures,
            captureNames,
            rewrite = function (match, paren, backref) {
                var name = captureNames[numCaptures - numPriorCaptures];
                if (paren) { // Capturing group
                    ++numCaptures;
                    if (name) { // If the current capture has a name
                        return "(?<" + name + ">";
                    }
                } else if (backref) { // Backreference
                    return "\\" + (+backref + numPriorCaptures);
                }
                return match;
            },
            output = [],
            pattern,
            i;
        if (!(isType(patterns, "array") && patterns.length)) {
            throw new TypeError("patterns must be a nonempty array");
        }
        for (i = 0; i < patterns.length; ++i) {
            pattern = patterns[i];
            if (self.isRegExp(pattern)) {
                numPriorCaptures = numCaptures;
                captureNames = (pattern.xregexp && pattern.xregexp.captureNames) || [];
                // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns
                // are independently valid; helps keep this simple. Named captures are put back
                output.push(self(pattern.source).source.replace(parts, rewrite));
            } else {
                output.push(self.escape(pattern));
            }
        }
        return self(output.join("|"), flags);
    };

/**
 * The XRegExp version number.
 * @static
 * @memberOf XRegExp
 * @type String
 */
    self.version = "2.0.0";

/*--------------------------------------
 *  Fixed/extended native methods
 *------------------------------------*/

/**
 * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
 * bugs in the native `RegExp.prototype.exec`. Calling `XRegExp.install('natives')` uses this to
 * override the native method. Use via `XRegExp.exec` without overriding natives.
 * @private
 * @param {String} str String to search.
 * @returns {Array} Match array with named backreference properties, or null.
 */
    fixed.exec = function (str) {
        var match, name, r2, origLastIndex, i;
        if (!this.global) {
            origLastIndex = this.lastIndex;
        }
        match = nativ.exec.apply(this, arguments);
        if (match) {
            // Fix browsers whose `exec` methods don't consistently return `undefined` for
            // nonparticipating capturing groups
            if (!compliantExecNpcg && match.length > 1 && lastIndexOf(match, "") > -1) {
                r2 = new RegExp(this.source, nativ.replace.call(getNativeFlags(this), "g", ""));
                // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed
                // matching due to characters outside the match
                nativ.replace.call(String(str).slice(match.index), r2, function () {
                    var i;
                    for (i = 1; i < arguments.length - 2; ++i) {
                        if (arguments[i] === undef) {
                            match[i] = undef;
                        }
                    }
                });
            }
            // Attach named capture properties
            if (this.xregexp && this.xregexp.captureNames) {
                for (i = 1; i < match.length; ++i) {
                    name = this.xregexp.captureNames[i - 1];
                    if (name) {
                        match[name] = match[i];
                    }
                }
            }
            // Fix browsers that increment `lastIndex` after zero-length matches
            if (this.global && !match[0].length && (this.lastIndex > match.index)) {
                this.lastIndex = match.index;
            }
        }
        if (!this.global) {
            this.lastIndex = origLastIndex; // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
        }
        return match;
    };

/**
 * Fixes browser bugs in the native `RegExp.prototype.test`. Calling `XRegExp.install('natives')`
 * uses this to override the native method.
 * @private
 * @param {String} str String to search.
 * @returns {Boolean} Whether the regex matched the provided value.
 */
    fixed.test = function (str) {
        // Do this the easy way :-)
        return !!fixed.exec.call(this, str);
    };

/**
 * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
 * bugs in the native `String.prototype.match`. Calling `XRegExp.install('natives')` uses this to
 * override the native method.
 * @private
 * @param {RegExp} regex Regex to search with.
 * @returns {Array} If `regex` uses flag g, an array of match strings or null. Without flag g, the
 *   result of calling `regex.exec(this)`.
 */
    fixed.match = function (regex) {
        if (!self.isRegExp(regex)) {
            regex = new RegExp(regex); // Use native `RegExp`
        } else if (regex.global) {
            var result = nativ.match.apply(this, arguments);
            regex.lastIndex = 0; // Fixes IE bug
            return result;
        }
        return fixed.exec.call(regex, this);
    };

/**
 * Adds support for `${n}` tokens for named and numbered backreferences in replacement text, and
 * provides named backreferences to replacement functions as `arguments[0].name`. Also fixes
 * browser bugs in replacement text syntax when performing a replacement using a nonregex search
 * value, and the value of a replacement regex's `lastIndex` property during replacement iterations
 * and upon completion. Note that this doesn't support SpiderMonkey's proprietary third (`flags`)
 * argument. Calling `XRegExp.install('natives')` uses this to override the native method. Use via
 * `XRegExp.replace` without overriding natives.
 * @private
 * @param {RegExp|String} search Search pattern to be replaced.
 * @param {String|Function} replacement Replacement string or a function invoked to create it.
 * @returns {String} New string with one or all matches replaced.
 */
    fixed.replace = function (search, replacement) {
        var isRegex = self.isRegExp(search), captureNames, result, str, origLastIndex;
        if (isRegex) {
            if (search.xregexp) {
                captureNames = search.xregexp.captureNames;
            }
            if (!search.global) {
                origLastIndex = search.lastIndex;
            }
        } else {
            search += "";
        }
        if (isType(replacement, "function")) {
            result = nativ.replace.call(String(this), search, function () {
                var args = arguments, i;
                if (captureNames) {
                    // Change the `arguments[0]` string primitive to a `String` object that can store properties
                    args[0] = new String(args[0]);
                    // Store named backreferences on the first argument
                    for (i = 0; i < captureNames.length; ++i) {
                        if (captureNames[i]) {
                            args[0][captureNames[i]] = args[i + 1];
                        }
                    }
                }
                // Update `lastIndex` before calling `replacement`.
                // Fixes IE, Chrome, Firefox, Safari bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)
                if (isRegex && search.global) {
                    search.lastIndex = args[args.length - 2] + args[0].length;
                }
                return replacement.apply(null, args);
            });
        } else {
            str = String(this); // Ensure `args[args.length - 1]` will be a string when given nonstring `this`
            result = nativ.replace.call(str, search, function () {
                var args = arguments; // Keep this function's `arguments` available through closure
                return nativ.replace.call(String(replacement), replacementToken, function ($0, $1, $2) {
                    var n;
                    // Named or numbered backreference with curly brackets
                    if ($1) {
                        /* XRegExp behavior for `${n}`:
                         * 1. Backreference to numbered capture, where `n` is 1+ digits. `0`, `00`, etc. is the entire match.
                         * 2. Backreference to named capture `n`, if it exists and is not a number overridden by numbered capture.
                         * 3. Otherwise, it's an error.
                         */
                        n = +$1; // Type-convert; drop leading zeros
                        if (n <= args.length - 3) {
                            return args[n] || "";
                        }
                        n = captureNames ? lastIndexOf(captureNames, $1) : -1;
                        if (n < 0) {
                            throw new SyntaxError("backreference to undefined group " + $0);
                        }
                        return args[n + 1] || "";
                    }
                    // Else, special variable or numbered backreference (without curly brackets)
                    if ($2 === "$") return "$";
                    if ($2 === "&" || +$2 === 0) return args[0]; // $&, $0 (not followed by 1-9), $00
                    if ($2 === "`") return args[args.length - 1].slice(0, args[args.length - 2]);
                    if ($2 === "'") return args[args.length - 1].slice(args[args.length - 2] + args[0].length);
                    // Else, numbered backreference (without curly brackets)
                    $2 = +$2; // Type-convert; drop leading zero
                    /* XRegExp behavior:
                     * - Backreferences without curly brackets end after 1 or 2 digits. Use `${..}` for more digits.
                     * - `$1` is an error if there are no capturing groups.
                     * - `$10` is an error if there are less than 10 capturing groups. Use `${1}0` instead.
                     * - `$01` is equivalent to `$1` if a capturing group exists, otherwise it's an error.
                     * - `$0` (not followed by 1-9), `$00`, and `$&` are the entire match.
                     * Native behavior, for comparison:
                     * - Backreferences end after 1 or 2 digits. Cannot use backreference to capturing group 100+.
                     * - `$1` is a literal `$1` if there are no capturing groups.
                     * - `$10` is `$1` followed by a literal `0` if there are less than 10 capturing groups.
                     * - `$01` is equivalent to `$1` if a capturing group exists, otherwise it's a literal `$01`.
                     * - `$0` is a literal `$0`. `$&` is the entire match.
                     */
                    if (!isNaN($2)) {
                        if ($2 > args.length - 3) {
                            throw new SyntaxError("backreference to undefined group " + $0);
                        }
                        return args[$2] || "";
                    }
                    throw new SyntaxError("invalid token " + $0);
                });
            });
        }
        if (isRegex) {
            if (search.global) {
                search.lastIndex = 0; // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
            } else {
                search.lastIndex = origLastIndex; // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
            }
        }
        return result;
    };

/**
 * Fixes browser bugs in the native `String.prototype.split`. Calling `XRegExp.install('natives')`
 * uses this to override the native method. Use via `XRegExp.split` without overriding natives.
 * @private
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 */
    fixed.split = function (separator, limit) {
        if (!self.isRegExp(separator)) {
            return nativ.split.apply(this, arguments); // use faster native method
        }
        var str = String(this),
            origLastIndex = separator.lastIndex,
            output = [],
            lastLastIndex = 0,
            lastLength;
        /* Values for `limit`, per the spec:
         * If undefined: pow(2,32) - 1
         * If 0, Infinity, or NaN: 0
         * If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);
         * If negative number: pow(2,32) - floor(abs(limit))
         * If other: Type-convert, then use the above rules
         */
        limit = (limit === undef ? -1 : limit) >>> 0;
        self.forEach(str, separator, function (match) {
            if ((match.index + match[0].length) > lastLastIndex) { // != `if (match[0].length)`
                output.push(str.slice(lastLastIndex, match.index));
                if (match.length > 1 && match.index < str.length) {
                    Array.prototype.push.apply(output, match.slice(1));
                }
                lastLength = match[0].length;
                lastLastIndex = match.index + lastLength;
            }
        });
        if (lastLastIndex === str.length) {
            if (!nativ.test.call(separator, "") || lastLength) {
                output.push("");
            }
        } else {
            output.push(str.slice(lastLastIndex));
        }
        separator.lastIndex = origLastIndex;
        return output.length > limit ? output.slice(0, limit) : output;
    };

/*--------------------------------------
 *  Built-in tokens
 *------------------------------------*/

// Shortcut
    add = addToken.on;

/* Letter identity escapes that natively match literal characters: \p, \P, etc.
 * Should be SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-
 * browser consistency and to reserve their syntax, but lets them be superseded by XRegExp addons.
 */
    add(/\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4})|x(?![\dA-Fa-f]{2}))/,
        function (match, scope) {
            // \B is allowed in default scope only
            if (match[1] === "B" && scope === defaultScope) {
                return match[0];
            }
            throw new SyntaxError("invalid escape " + match[0]);
        },
        {scope: "all"});

/* Empty character class: [] or [^]
 * Fixes a critical cross-browser syntax inconsistency. Unless this is standardized (per the spec),
 * regex syntax can't be accurately parsed because character class endings can't be determined.
 */
    add(/\[(\^?)]/,
        function (match) {
            // For cross-browser compatibility with ES3, convert [] to \b\B and [^] to [\s\S].
            // (?!) should work like \b\B, but is unreliable in Firefox
            return match[1] ? "[\\s\\S]" : "\\b\\B";
        });

/* Comment pattern: (?# )
 * Inline comments are an alternative to the line comments allowed in free-spacing mode (flag x).
 */
    add(/(?:\(\?#[^)]*\))+/,
        function (match) {
            // Keep tokens separated unless the following token is a quantifier
            return nativ.test.call(quantifier, match.input.slice(match.index + match[0].length)) ? "" : "(?:)";
        });

/* Named backreference: \k<name>
 * Backreference names can use the characters A-Z, a-z, 0-9, _, and $ only.
 */
    add(/\\k<([\w$]+)>/,
        function (match) {
            var index = isNaN(match[1]) ? (lastIndexOf(this.captureNames, match[1]) + 1) : +match[1],
                endIndex = match.index + match[0].length;
            if (!index || index > this.captureNames.length) {
                throw new SyntaxError("backreference to undefined group " + match[0]);
            }
            // Keep backreferences separate from subsequent literal numbers
            return "\\" + index + (
                endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ? "" : "(?:)"
            );
        });

/* Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.
 */
    add(/(?:\s+|#.*)+/,
        function (match) {
            // Keep tokens separated unless the following token is a quantifier
            return nativ.test.call(quantifier, match.input.slice(match.index + match[0].length)) ? "" : "(?:)";
        },
        {
            trigger: function () {
                return this.hasFlag("x");
            },
            customFlags: "x"
        });

/* Dot, in dotall mode (aka singleline mode, flag s) only.
 */
    add(/\./,
        function () {
            return "[\\s\\S]";
        },
        {
            trigger: function () {
                return this.hasFlag("s");
            },
            customFlags: "s"
        });

/* Named capturing group; match the opening delimiter only: (?<name>
 * Capture names can use the characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers.
 * Supports Python-style (?P<name> as an alternate syntax to avoid issues in recent Opera (which
 * natively supports the Python-style syntax). Otherwise, XRegExp might treat numbered
 * backreferences to Python-style named capture as octals.
 */
    add(/\(\?P?<([\w$]+)>/,
        function (match) {
            if (!isNaN(match[1])) {
                // Avoid incorrect lookups, since named backreferences are added to match arrays
                throw new SyntaxError("can't use integer as capture name " + match[0]);
            }
            this.captureNames.push(match[1]);
            this.hasNamedCapture = true;
            return "(";
        });

/* Numbered backreference or octal, plus any following digits: \0, \11, etc.
 * Octals except \0 not followed by 0-9 and backreferences to unopened capture groups throw an
 * error. Other matches are returned unaltered. IE <= 8 doesn't support backreferences greater than
 * \99 in regex syntax.
 */
    add(/\\(\d+)/,
        function (match, scope) {
            if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) &&
                    match[1] !== "0") {
                throw new SyntaxError("can't use octal escape or backreference to undefined group " + match[0]);
            }
            return match[0];
        },
        {scope: "all"});

/* Capturing group; match the opening parenthesis only.
 * Required for support of named capturing groups. Also adds explicit capture mode (flag n).
 */
    add(/\((?!\?)/,
        function () {
            if (this.hasFlag("n")) {
                return "(?:";
            }
            this.captureNames.push(null);
            return "(";
        },
        {customFlags: "n"});

/*--------------------------------------
 *  Expose XRegExp
 *------------------------------------*/

// For CommonJS enviroments
    if (typeof exports !== "undefined") {
        exports.XRegExp = self;
    }

    return self;

}());

/*!
 * clipboard.js v1.5.12
 * https://zenorocha.github.io/clipboard.js
 *
 * Licensed MIT © Zeno Rocha
 */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Clipboard = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var matches = require('matches-selector')

module.exports = function (element, selector, checkYoSelf) {
  var parent = checkYoSelf ? element : element.parentNode

  while (parent && parent !== document) {
    if (matches(parent, selector)) return parent;
    parent = parent.parentNode
  }
}

},{"matches-selector":5}],2:[function(require,module,exports){
var closest = require('closest');

/**
 * Delegates event to a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function delegate(element, selector, type, callback, useCapture) {
    var listenerFn = listener.apply(this, arguments);

    element.addEventListener(type, listenerFn, useCapture);

    return {
        destroy: function() {
            element.removeEventListener(type, listenerFn, useCapture);
        }
    }
}

/**
 * Finds closest match and invokes callback.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Function}
 */
function listener(element, selector, type, callback) {
    return function(e) {
        e.delegateTarget = closest(e.target, selector, true);

        if (e.delegateTarget) {
            callback.call(element, e);
        }
    }
}

module.exports = delegate;

},{"closest":1}],3:[function(require,module,exports){
/**
 * Check if argument is a HTML element.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.node = function(value) {
    return value !== undefined
        && value instanceof HTMLElement
        && value.nodeType === 1;
};

/**
 * Check if argument is a list of HTML elements.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.nodeList = function(value) {
    var type = Object.prototype.toString.call(value);

    return value !== undefined
        && (type === '[object NodeList]' || type === '[object HTMLCollection]')
        && ('length' in value)
        && (value.length === 0 || exports.node(value[0]));
};

/**
 * Check if argument is a string.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.string = function(value) {
    return typeof value === 'string'
        || value instanceof String;
};

/**
 * Check if argument is a function.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.fn = function(value) {
    var type = Object.prototype.toString.call(value);

    return type === '[object Function]';
};

},{}],4:[function(require,module,exports){
var is = require('./is');
var delegate = require('delegate');

/**
 * Validates all params and calls the right
 * listener function based on its target type.
 *
 * @param {String|HTMLElement|HTMLCollection|NodeList} target
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listen(target, type, callback) {
    if (!target && !type && !callback) {
        throw new Error('Missing required arguments');
    }

    if (!is.string(type)) {
        throw new TypeError('Second argument must be a String');
    }

    if (!is.fn(callback)) {
        throw new TypeError('Third argument must be a Function');
    }

    if (is.node(target)) {
        return listenNode(target, type, callback);
    }
    else if (is.nodeList(target)) {
        return listenNodeList(target, type, callback);
    }
    else if (is.string(target)) {
        return listenSelector(target, type, callback);
    }
    else {
        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
    }
}

/**
 * Adds an event listener to a HTML element
 * and returns a remove listener function.
 *
 * @param {HTMLElement} node
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNode(node, type, callback) {
    node.addEventListener(type, callback);

    return {
        destroy: function() {
            node.removeEventListener(type, callback);
        }
    }
}

/**
 * Add an event listener to a list of HTML elements
 * and returns a remove listener function.
 *
 * @param {NodeList|HTMLCollection} nodeList
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNodeList(nodeList, type, callback) {
    Array.prototype.forEach.call(nodeList, function(node) {
        node.addEventListener(type, callback);
    });

    return {
        destroy: function() {
            Array.prototype.forEach.call(nodeList, function(node) {
                node.removeEventListener(type, callback);
            });
        }
    }
}

/**
 * Add an event listener to a selector
 * and returns a remove listener function.
 *
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenSelector(selector, type, callback) {
    return delegate(document.body, selector, type, callback);
}

module.exports = listen;

},{"./is":3,"delegate":2}],5:[function(require,module,exports){

/**
 * Element prototype.
 */

var proto = Element.prototype;

/**
 * Vendor function.
 */

var vendor = proto.matchesSelector
  || proto.webkitMatchesSelector
  || proto.mozMatchesSelector
  || proto.msMatchesSelector
  || proto.oMatchesSelector;

/**
 * Expose `match()`.
 */

module.exports = match;

/**
 * Match `el` to `selector`.
 *
 * @param {Element} el
 * @param {String} selector
 * @return {Boolean}
 * @api public
 */

function match(el, selector) {
  if (vendor) return vendor.call(el, selector);
  var nodes = el.parentNode.querySelectorAll(selector);
  for (var i = 0; i < nodes.length; ++i) {
    if (nodes[i] == el) return true;
  }
  return false;
}
},{}],6:[function(require,module,exports){
function select(element) {
    var selectedText;

    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
        element.focus();
        element.setSelectionRange(0, element.value.length);

        selectedText = element.value;
    }
    else {
        if (element.hasAttribute('contenteditable')) {
            element.focus();
        }

        var selection = window.getSelection();
        var range = document.createRange();

        range.selectNodeContents(element);
        selection.removeAllRanges();
        selection.addRange(range);

        selectedText = selection.toString();
    }

    return selectedText;
}

module.exports = select;

},{}],7:[function(require,module,exports){
function E () {
	// Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
	on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    };

    listener._ = callback
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

module.exports = E;

},{}],8:[function(require,module,exports){
(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(['module', 'select'], factory);
    } else if (typeof exports !== "undefined") {
        factory(module, require('select'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod, global.select);
        global.clipboardAction = mod.exports;
    }
})(this, function (module, _select) {
    'use strict';

    var _select2 = _interopRequireDefault(_select);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
    };

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var ClipboardAction = function () {
        /**
         * @param {Object} options
         */

        function ClipboardAction(options) {
            _classCallCheck(this, ClipboardAction);

            this.resolveOptions(options);
            this.initSelection();
        }

        /**
         * Defines base properties passed from constructor.
         * @param {Object} options
         */


        ClipboardAction.prototype.resolveOptions = function resolveOptions() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            this.action = options.action;
            this.emitter = options.emitter;
            this.target = options.target;
            this.text = options.text;
            this.trigger = options.trigger;

            this.selectedText = '';
        };

        ClipboardAction.prototype.initSelection = function initSelection() {
            if (this.text) {
                this.selectFake();
            } else if (this.target) {
                this.selectTarget();
            }
        };

        ClipboardAction.prototype.selectFake = function selectFake() {
            var _this = this;

            var isRTL = document.documentElement.getAttribute('dir') == 'rtl';

            this.removeFake();

            this.fakeHandlerCallback = function () {
                return _this.removeFake();
            };
            this.fakeHandler = document.body.addEventListener('click', this.fakeHandlerCallback) || true;

            this.fakeElem = document.createElement('textarea');
            // Prevent zooming on iOS
            this.fakeElem.style.fontSize = '12pt';
            // Reset box model
            this.fakeElem.style.border = '0';
            this.fakeElem.style.padding = '0';
            this.fakeElem.style.margin = '0';
            // Move element out of screen horizontally
            this.fakeElem.style.position = 'absolute';
            this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';
            // Move element to the same position vertically
            this.fakeElem.style.top = (window.pageYOffset || document.documentElement.scrollTop) + 'px';
            this.fakeElem.setAttribute('readonly', '');
            this.fakeElem.value = this.text;

            document.body.appendChild(this.fakeElem);

            this.selectedText = (0, _select2.default)(this.fakeElem);
            this.copyText();
        };

        ClipboardAction.prototype.removeFake = function removeFake() {
            if (this.fakeHandler) {
                document.body.removeEventListener('click', this.fakeHandlerCallback);
                this.fakeHandler = null;
                this.fakeHandlerCallback = null;
            }

            if (this.fakeElem) {
                document.body.removeChild(this.fakeElem);
                this.fakeElem = null;
            }
        };

        ClipboardAction.prototype.selectTarget = function selectTarget() {
            this.selectedText = (0, _select2.default)(this.target);
            this.copyText();
        };

        ClipboardAction.prototype.copyText = function copyText() {
            var succeeded = undefined;

            try {
                succeeded = document.execCommand(this.action);
            } catch (err) {
                succeeded = false;
            }

            this.handleResult(succeeded);
        };

        ClipboardAction.prototype.handleResult = function handleResult(succeeded) {
            if (succeeded) {
                this.emitter.emit('success', {
                    action: this.action,
                    text: this.selectedText,
                    trigger: this.trigger,
                    clearSelection: this.clearSelection.bind(this)
                });
            } else {
                this.emitter.emit('error', {
                    action: this.action,
                    trigger: this.trigger,
                    clearSelection: this.clearSelection.bind(this)
                });
            }
        };

        ClipboardAction.prototype.clearSelection = function clearSelection() {
            if (this.target) {
                this.target.blur();
            }

            window.getSelection().removeAllRanges();
        };

        ClipboardAction.prototype.destroy = function destroy() {
            this.removeFake();
        };

        _createClass(ClipboardAction, [{
            key: 'action',
            set: function set() {
                var action = arguments.length <= 0 || arguments[0] === undefined ? 'copy' : arguments[0];

                this._action = action;

                if (this._action !== 'copy' && this._action !== 'cut') {
                    throw new Error('Invalid "action" value, use either "copy" or "cut"');
                }
            },
            get: function get() {
                return this._action;
            }
        }, {
            key: 'target',
            set: function set(target) {
                if (target !== undefined) {
                    if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {
                        if (this.action === 'copy' && target.hasAttribute('disabled')) {
                            throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                        }

                        if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                            throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                        }

                        this._target = target;
                    } else {
                        throw new Error('Invalid "target" value, use a valid Element');
                    }
                }
            },
            get: function get() {
                return this._target;
            }
        }]);

        return ClipboardAction;
    }();

    module.exports = ClipboardAction;
});

},{"select":6}],9:[function(require,module,exports){
(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(['module', './clipboard-action', 'tiny-emitter', 'good-listener'], factory);
    } else if (typeof exports !== "undefined") {
        factory(module, require('./clipboard-action'), require('tiny-emitter'), require('good-listener'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod, global.clipboardAction, global.tinyEmitter, global.goodListener);
        global.clipboard = mod.exports;
    }
})(this, function (module, _clipboardAction, _tinyEmitter, _goodListener) {
    'use strict';

    var _clipboardAction2 = _interopRequireDefault(_clipboardAction);

    var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);

    var _goodListener2 = _interopRequireDefault(_goodListener);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var Clipboard = function (_Emitter) {
        _inherits(Clipboard, _Emitter);

        /**
         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
         * @param {Object} options
         */

        function Clipboard(trigger, options) {
            _classCallCheck(this, Clipboard);

            var _this = _possibleConstructorReturn(this, _Emitter.call(this));

            _this.resolveOptions(options);
            _this.listenClick(trigger);
            return _this;
        }

        /**
         * Defines if attributes would be resolved using internal setter functions
         * or custom functions that were passed in the constructor.
         * @param {Object} options
         */


        Clipboard.prototype.resolveOptions = function resolveOptions() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
            this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
            this.text = typeof options.text === 'function' ? options.text : this.defaultText;
        };

        Clipboard.prototype.listenClick = function listenClick(trigger) {
            var _this2 = this;

            this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {
                return _this2.onClick(e);
            });
        };

        Clipboard.prototype.onClick = function onClick(e) {
            var trigger = e.delegateTarget || e.currentTarget;

            if (this.clipboardAction) {
                this.clipboardAction = null;
            }

            this.clipboardAction = new _clipboardAction2.default({
                action: this.action(trigger),
                target: this.target(trigger),
                text: this.text(trigger),
                trigger: trigger,
                emitter: this
            });
        };

        Clipboard.prototype.defaultAction = function defaultAction(trigger) {
            return getAttributeValue('action', trigger);
        };

        Clipboard.prototype.defaultTarget = function defaultTarget(trigger) {
            var selector = getAttributeValue('target', trigger);

            if (selector) {
                return document.querySelector(selector);
            }
        };

        Clipboard.prototype.defaultText = function defaultText(trigger) {
            return getAttributeValue('text', trigger);
        };

        Clipboard.prototype.destroy = function destroy() {
            this.listener.destroy();

            if (this.clipboardAction) {
                this.clipboardAction.destroy();
                this.clipboardAction = null;
            }
        };

        return Clipboard;
    }(_tinyEmitter2.default);

    /**
     * Helper function to retrieve attribute value.
     * @param {String} suffix
     * @param {Element} element
     */
    function getAttributeValue(suffix, element) {
        var attribute = 'data-clipboard-' + suffix;

        if (!element.hasAttribute(attribute)) {
            return;
        }

        return element.getAttribute(attribute);
    }

    module.exports = Clipboard;
});

},{"./clipboard-action":8,"good-listener":4,"tiny-emitter":7}]},{},[9])(9)
});
// i18next, v1.7.2
// Copyright (c)2014 Jan Mühlemann (jamuhl).
// Distributed under MIT license
// http://i18next.com
(function() {

    // add indexOf to non ECMA-262 standard compliant browsers
    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {
            "use strict";
            if (this == null) {
                throw new TypeError();
            }
            var t = Object(this);
            var len = t.length >>> 0;
            if (len === 0) {
                return -1;
            }
            var n = 0;
            if (arguments.length > 0) {
                n = Number(arguments[1]);
                if (n != n) { // shortcut for verifying if it's NaN
                    n = 0;
                } else if (n != 0 && n != Infinity && n != -Infinity) {
                    n = (n > 0 || -1) * Math.floor(Math.abs(n));
                }
            }
            if (n >= len) {
                return -1;
            }
            var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
            for (; k < len; k++) {
                if (k in t && t[k] === searchElement) {
                    return k;
                }
            }
            return -1;
        }
    }

    // add lastIndexOf to non ECMA-262 standard compliant browsers
    if (!Array.prototype.lastIndexOf) {
        Array.prototype.lastIndexOf = function(searchElement /*, fromIndex*/) {
            "use strict";
            if (this == null) {
                throw new TypeError();
            }
            var t = Object(this);
            var len = t.length >>> 0;
            if (len === 0) {
                return -1;
            }
            var n = len;
            if (arguments.length > 1) {
                n = Number(arguments[1]);
                if (n != n) {
                    n = 0;
                } else if (n != 0 && n != (1 / 0) && n != -(1 / 0)) {
                    n = (n > 0 || -1) * Math.floor(Math.abs(n));
                }
            }
            var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);
            for (; k >= 0; k--) {
                if (k in t && t[k] === searchElement) {
                    return k;
                }
            }
            return -1;
        };
    }

    var root = this
      , $ = root.jQuery || root.Zepto
      , i18n = {}
      , resStore = {}
      , currentLng
      , replacementCounter = 0
      , languages = []
      , initialized = false;


    // Export the i18next object for **CommonJS**.
    // If we're not in CommonJS, add `i18n` to the
    // global object or to jquery.
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = i18n;
    } else {
        if ($) {
            $.i18n = $.i18n || i18n;
        }

        root.i18n = root.i18n || i18n;
    }
    // defaults
    var o = {
        lng: undefined,
        load: 'all',
        preload: [],
        lowerCaseLng: false,
        returnObjectTrees: false,
        fallbackLng: 'dev',
        fallbackNS: [],
        detectLngQS: 'setLng',
        ns: 'translation',
        fallbackOnNull: true,
        fallbackOnEmpty: false,
        fallbackToDefaultNS: false,
        nsseparator: ':',
        keyseparator: '.',
        selectorAttr: 'data-i18n',
        debug: false,

        resGetPath: 'locales/__lng__/__ns__.json',
        resPostPath: 'locales/add/__lng__/__ns__',

        getAsync: true,
        postAsync: true,

        resStore: undefined,
        useLocalStorage: false,
        localStorageExpirationTime: 7*24*60*60*1000,

        dynamicLoad: false,
        sendMissing: false,
        sendMissingTo: 'fallback', // current | all
        sendType: 'POST',

        interpolationPrefix: '__',
        interpolationSuffix: '__',
        reusePrefix: '$t(',
        reuseSuffix: ')',
        pluralSuffix: '_plural',
        pluralNotFound: ['plural_not_found', Math.random()].join(''),
        contextNotFound: ['context_not_found', Math.random()].join(''),
        escapeInterpolation: false,

        setJqueryExt: true,
        defaultValueFromContent: true,
        useDataAttrOptions: false,
        cookieExpirationTime: undefined,
        useCookie: true,
        cookieName: 'i18next',
        cookieDomain: undefined,

        objectTreeKeyHandler: undefined,
        postProcess: undefined,
        parseMissingKey: undefined,

        shortcutFunction: 'sprintf' // or: defaultValue
    };
    function _extend(target, source) {
        if (!source || typeof source === 'function') {
            return target;
        }

        for (var attr in source) { target[attr] = source[attr]; }
        return target;
    }

    function _each(object, callback, args) {
        var name, i = 0,
            length = object.length,
            isObj = length === undefined || typeof object === "function";

        if (args) {
            if (isObj) {
                for (name in object) {
                    if (callback.apply(object[name], args) === false) {
                        break;
                    }
                }
            } else {
                for ( ; i < length; ) {
                    if (callback.apply(object[i++], args) === false) {
                        break;
                    }
                }
            }

        // A special, fast, case for the most common use of each
        } else {
            if (isObj) {
                for (name in object) {
                    if (callback.call(object[name], name, object[name]) === false) {
                        break;
                    }
                }
            } else {
                for ( ; i < length; ) {
                    if (callback.call(object[i], i, object[i++]) === false) {
                        break;
                    }
                }
            }
        }

        return object;
    }

    var _entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': '&quot;',
        "'": '&#39;',
        "/": '&#x2F;'
    };

    function _escape(data) {
        if (typeof data === 'string') {
            return data.replace(/[&<>"'\/]/g, function (s) {
                return _entityMap[s];
            });
        }else{
            return data;
        }
    }

    function _ajax(options) {

        // v0.5.0 of https://github.com/goloroden/http.js
        var getXhr = function (callback) {
            // Use the native XHR object if the browser supports it.
            if (window.XMLHttpRequest) {
                return callback(null, new XMLHttpRequest());
            } else if (window.ActiveXObject) {
                // In Internet Explorer check for ActiveX versions of the XHR object.
                try {
                    return callback(null, new ActiveXObject("Msxml2.XMLHTTP"));
                } catch (e) {
                    return callback(null, new ActiveXObject("Microsoft.XMLHTTP"));
                }
            }

            // If no XHR support was found, throw an error.
            return callback(new Error());
        };

        var encodeUsingUrlEncoding = function (data) {
            if(typeof data === 'string') {
                return data;
            }

            var result = [];
            for(var dataItem in data) {
                if(data.hasOwnProperty(dataItem)) {
                    result.push(encodeURIComponent(dataItem) + '=' + encodeURIComponent(data[dataItem]));
                }
            }

            return result.join('&');
        };

        var utf8 = function (text) {
            text = text.replace(/\r\n/g, '\n');
            var result = '';

            for(var i = 0; i < text.length; i++) {
                var c = text.charCodeAt(i);

                if(c < 128) {
                        result += String.fromCharCode(c);
                } else if((c > 127) && (c < 2048)) {
                        result += String.fromCharCode((c >> 6) | 192);
                        result += String.fromCharCode((c & 63) | 128);
                } else {
                        result += String.fromCharCode((c >> 12) | 224);
                        result += String.fromCharCode(((c >> 6) & 63) | 128);
                        result += String.fromCharCode((c & 63) | 128);
                }
            }

            return result;
        };

        var base64 = function (text) {
            var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

            text = utf8(text);
            var result = '',
                    chr1, chr2, chr3,
                    enc1, enc2, enc3, enc4,
                    i = 0;

            do {
                chr1 = text.charCodeAt(i++);
                chr2 = text.charCodeAt(i++);
                chr3 = text.charCodeAt(i++);

                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;

                if(isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if(isNaN(chr3)) {
                    enc4 = 64;
                }

                result +=
                    keyStr.charAt(enc1) +
                    keyStr.charAt(enc2) +
                    keyStr.charAt(enc3) +
                    keyStr.charAt(enc4);
                chr1 = chr2 = chr3 = '';
                enc1 = enc2 = enc3 = enc4 = '';
            } while(i < text.length);

            return result;
        };

        var mergeHeaders = function () {
            // Use the first header object as base.
            var result = arguments[0];

            // Iterate through the remaining header objects and add them.
            for(var i = 1; i < arguments.length; i++) {
                var currentHeaders = arguments[i];
                for(var header in currentHeaders) {
                    if(currentHeaders.hasOwnProperty(header)) {
                        result[header] = currentHeaders[header];
                    }
                }
            }

            // Return the merged headers.
            return result;
        };

        var ajax = function (method, url, options, callback) {
            // Adjust parameters.
            if(typeof options === 'function') {
                callback = options;
                options = {};
            }

            // Set default parameter values.
            options.cache = options.cache || false;
            options.data = options.data || {};
            options.headers = options.headers || {};
            options.jsonp = options.jsonp || false;
            options.async = options.async === undefined ? true : options.async;

            // Merge the various header objects.
            var headers = mergeHeaders({
                'accept': '*/*',
                'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'
            }, ajax.headers, options.headers);

            // Encode the data according to the content-type.
            var payload;
            if (headers['content-type'] === 'application/json') {
                payload = JSON.stringify(options.data);
            } else {
                payload = encodeUsingUrlEncoding(options.data);
            }

            // Specially prepare GET requests: Setup the query string, handle caching and make a JSONP call
            // if neccessary.
            if(method === 'GET') {
                // Setup the query string.
                var queryString = [];
                if(payload) {
                    queryString.push(payload);
                    payload = null;
                }

                // Handle caching.
                if(!options.cache) {
                    queryString.push('_=' + (new Date()).getTime());
                }

                // If neccessary prepare the query string for a JSONP call.
                if(options.jsonp) {
                    queryString.push('callback=' + options.jsonp);
                    queryString.push('jsonp=' + options.jsonp);
                }

                // Merge the query string and attach it to the url.
                queryString = queryString.join('&');
                if (queryString.length > 1) {
                    if (url.indexOf('?') > -1) {
                        url += '&' + queryString;
                    } else {
                        url += '?' + queryString;
                    }
                }

                // Make a JSONP call if neccessary.
                if(options.jsonp) {
                    var head = document.getElementsByTagName('head')[0];
                    var script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.src = url;
                    head.appendChild(script);
                    return;
                }
            }

            // Since we got here, it is no JSONP request, so make a normal XHR request.
            getXhr(function (err, xhr) {
                if(err) return callback(err);

                // Open the request.
                xhr.open(method, url, options.async);

                // Set the request headers.
                for(var header in headers) {
                    if(headers.hasOwnProperty(header)) {
                        xhr.setRequestHeader(header, headers[header]);
                    }
                }

                // Handle the request events.
                xhr.onreadystatechange = function () {
                    if(xhr.readyState === 4) {
                        var data = xhr.responseText || '';

                        // If no callback is given, return.
                        if(!callback) {
                            return;
                        }

                        // Return an object that provides access to the data as text and JSON.
                        callback(xhr.status, {
                            text: function () {
                                return data;
                            },

                            json: function () {
                                return JSON.parse(data);
                            }
                        });
                    }
                };

                // Actually send the XHR request.
                xhr.send(payload);
            });
        };

        // Define the external interface.
        var http = {
            authBasic: function (username, password) {
                ajax.headers['Authorization'] = 'Basic ' + base64(username + ':' + password);
            },

            connect: function (url, options, callback) {
                return ajax('CONNECT', url, options, callback);
            },

            del: function (url, options, callback) {
                return ajax('DELETE', url, options, callback);
            },

            get: function (url, options, callback) {
                return ajax('GET', url, options, callback);
            },

            head: function (url, options, callback) {
                return ajax('HEAD', url, options, callback);
            },

            headers: function (headers) {
                ajax.headers = headers || {};
            },

            isAllowed: function (url, verb, callback) {
                this.options(url, function (status, data) {
                    callback(data.text().indexOf(verb) !== -1);
                });
            },

            options: function (url, options, callback) {
                return ajax('OPTIONS', url, options, callback);
            },

            patch: function (url, options, callback) {
                return ajax('PATCH', url, options, callback);
            },

            post: function (url, options, callback) {
                return ajax('POST', url, options, callback);
            },

            put: function (url, options, callback) {
                return ajax('PUT', url, options, callback);
            },

            trace: function (url, options, callback) {
                return ajax('TRACE', url, options, callback);
            }
        };


        var methode = options.type ? options.type.toLowerCase() : 'get';

        http[methode](options.url, options, function (status, data) {
            if (status === 200) {
                options.success(data.json(), status, null);
            } else {
                options.error(data.text(), status, null);
            }
        });
    }

    var _cookie = {
        create: function(name,value,minutes,domain) {
            var expires;
            if (minutes) {
                var date = new Date();
                date.setTime(date.getTime()+(minutes*60*1000));
                expires = "; expires="+date.toGMTString();
            }
            else expires = "";
            domain = (domain)? "domain="+domain+";" : "";
            document.cookie = name+"="+value+expires+";"+domain+"path=/";
        },

        read: function(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for(var i=0;i < ca.length;i++) {
                var c = ca[i];
                while (c.charAt(0)==' ') c = c.substring(1,c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length,c.length);
            }
            return null;
        },

        remove: function(name) {
            this.create(name,"",-1);
        }
    };

    var cookie_noop = {
        create: function(name,value,minutes,domain) {},
        read: function(name) { return null; },
        remove: function(name) {}
    };



    // move dependent functions to a container so that
    // they can be overriden easier in no jquery environment (node.js)
    var f = {
        extend: $ ? $.extend : _extend,
        each: $ ? $.each : _each,
        ajax: $ ? $.ajax : (typeof document !== 'undefined' ? _ajax : function() {}),
        cookie: typeof document !== 'undefined' ? _cookie : cookie_noop,
        detectLanguage: detectLanguage,
        escape: _escape,
        log: function(str) {
            if (o.debug && typeof console !== "undefined") console.log(str);
        },
        toLanguages: function(lng) {
            var languages = [];
            if (typeof lng === 'string' && lng.indexOf('-') > -1) {
                var parts = lng.split('-');

                lng = o.lowerCaseLng ?
                    parts[0].toLowerCase() +  '-' + parts[1].toLowerCase() :
                    parts[0].toLowerCase() +  '-' + parts[1].toUpperCase();

                if (o.load !== 'unspecific') languages.push(lng);
                if (o.load !== 'current') languages.push(parts[0]);
            } else {
                languages.push(lng);
            }

            if (languages.indexOf(o.fallbackLng) === -1 && o.fallbackLng) languages.push(o.fallbackLng);

            return languages;
        },
        regexEscape: function(str) {
            return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
        }
    };
    function init(options, cb) {

        if (typeof options === 'function') {
            cb = options;
            options = {};
        }
        options = options || {};

        // override defaults with passed in options
        f.extend(o, options);
        delete o.fixLng; /* passed in each time */

        // create namespace object if namespace is passed in as string
        if (typeof o.ns == 'string') {
            o.ns = { namespaces: [o.ns], defaultNs: o.ns};
        }

        // fallback namespaces
        if (typeof o.fallbackNS == 'string') {
            o.fallbackNS = [o.fallbackNS];
        }

        // escape prefix/suffix
        o.interpolationPrefixEscaped = f.regexEscape(o.interpolationPrefix);
        o.interpolationSuffixEscaped = f.regexEscape(o.interpolationSuffix);

        if (!o.lng) o.lng = f.detectLanguage();
        if (o.lng) {
            // set cookie with lng set (as detectLanguage will set cookie on need)
            if (o.useCookie) f.cookie.create(o.cookieName, o.lng, o.cookieExpirationTime, o.cookieDomain);
        } else {
            o.lng =  o.fallbackLng;
            if (o.useCookie) f.cookie.remove(o.cookieName);
        }

        languages = f.toLanguages(o.lng);
        currentLng = languages[0];
        f.log('currentLng set to: ' + currentLng);

        var lngTranslate = translate;
        if (options.fixLng) {
            lngTranslate = function(key, options) {
                options = options || {};
                options.lng = options.lng || lngTranslate.lng;
                return translate(key, options);
            };
            lngTranslate.lng = currentLng;
        }

        pluralExtensions.setCurrentLng(currentLng);

        // add JQuery extensions
        if ($ && o.setJqueryExt) addJqueryFunct();

        // jQuery deferred
        var deferred;
        if ($ && $.Deferred) {
            deferred = $.Deferred();
        }

        // return immidiatly if res are passed in
        if (o.resStore) {
            resStore = o.resStore;
            initialized = true;
            if (cb) cb(lngTranslate);
            if (deferred) deferred.resolve(lngTranslate);
            if (deferred) return deferred.promise();
            return;
        }

        // languages to load
        var lngsToLoad = f.toLanguages(o.lng);
        if (typeof o.preload === 'string') o.preload = [o.preload];
        for (var i = 0, l = o.preload.length; i < l; i++) {
            var pres = f.toLanguages(o.preload[i]);
            for (var y = 0, len = pres.length; y < len; y++) {
                if (lngsToLoad.indexOf(pres[y]) < 0) {
                    lngsToLoad.push(pres[y]);
                }
            }
        }

        // else load them
        i18n.sync.load(lngsToLoad, o, function(err, store) {
            resStore = store;
            initialized = true;

            if (cb) cb(lngTranslate);
            if (deferred) deferred.resolve(lngTranslate);
        });

        if (deferred) return deferred.promise();
    }
    function preload(lngs, cb) {
        if (typeof lngs === 'string') lngs = [lngs];
        for (var i = 0, l = lngs.length; i < l; i++) {
            if (o.preload.indexOf(lngs[i]) < 0) {
                o.preload.push(lngs[i]);
            }
        }
        return init(cb);
    }

    function addResourceBundle(lng, ns, resources) {
        if (typeof ns !== 'string') {
            resources = ns;
            ns = o.ns.defaultNs;
        } else if (o.ns.namespaces.indexOf(ns) < 0) {
            o.ns.namespaces.push(ns);
        }

        resStore[lng] = resStore[lng] || {};
        resStore[lng][ns] = resStore[lng][ns] || {};

        f.extend(resStore[lng][ns], resources);
    }

    function removeResourceBundle(lng, ns) {
        if (typeof ns !== 'string') {
            ns = o.ns.defaultNs;
        }

        resStore[lng] = resStore[lng] || {};
        resStore[lng][ns] = {};
    }

    function setDefaultNamespace(ns) {
        o.ns.defaultNs = ns;
    }

    function loadNamespace(namespace, cb) {
        loadNamespaces([namespace], cb);
    }

    function loadNamespaces(namespaces, cb) {
        var opts = {
            dynamicLoad: o.dynamicLoad,
            resGetPath: o.resGetPath,
            getAsync: o.getAsync,
            customLoad: o.customLoad,
            ns: { namespaces: namespaces, defaultNs: ''} /* new namespaces to load */
        };

        // languages to load
        var lngsToLoad = f.toLanguages(o.lng);
        if (typeof o.preload === 'string') o.preload = [o.preload];
        for (var i = 0, l = o.preload.length; i < l; i++) {
            var pres = f.toLanguages(o.preload[i]);
            for (var y = 0, len = pres.length; y < len; y++) {
                if (lngsToLoad.indexOf(pres[y]) < 0) {
                    lngsToLoad.push(pres[y]);
                }
            }
        }

        // check if we have to load
        var lngNeedLoad = [];
        for (var a = 0, lenA = lngsToLoad.length; a < lenA; a++) {
            var needLoad = false;
            var resSet = resStore[lngsToLoad[a]];
            if (resSet) {
                for (var b = 0, lenB = namespaces.length; b < lenB; b++) {
                    if (!resSet[namespaces[b]]) needLoad = true;
                }
            } else {
                needLoad = true;
            }

            if (needLoad) lngNeedLoad.push(lngsToLoad[a]);
        }

        if (lngNeedLoad.length) {
            i18n.sync._fetch(lngNeedLoad, opts, function(err, store) {
                var todo = namespaces.length * lngNeedLoad.length;

                // load each file individual
                f.each(namespaces, function(nsIndex, nsValue) {

                    // append namespace to namespace array
                    if (o.ns.namespaces.indexOf(nsValue) < 0) {
                        o.ns.namespaces.push(nsValue);
                    }

                    f.each(lngNeedLoad, function(lngIndex, lngValue) {
                        resStore[lngValue] = resStore[lngValue] || {};
                        resStore[lngValue][nsValue] = store[lngValue][nsValue];

                        todo--; // wait for all done befor callback
                        if (todo === 0 && cb) {
                            if (o.useLocalStorage) i18n.sync._storeLocal(resStore);
                            cb();
                        }
                    });
                });
            });
        } else {
            if (cb) cb();
        }
    }

    function setLng(lng, options, cb) {
        if (typeof options === 'function') {
            cb = options;
            options = {};
        } else if (!options) {
            options = {};
        }

        options.lng = lng;
        return init(options, cb);
    }

    function lng() {
        return currentLng;
    }
    function addJqueryFunct() {
        // $.t shortcut
        $.t = $.t || translate;

        function parse(ele, key, options) {
            if (key.length === 0) return;

            var attr = 'text';

            if (key.indexOf('[') === 0) {
                var parts = key.split(']');
                key = parts[1];
                attr = parts[0].substr(1, parts[0].length-1);
            }

            if (key.indexOf(';') === key.length-1) {
                key = key.substr(0, key.length-2);
            }

            var optionsToUse;
            if (attr === 'html') {
                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.html() }, options) : options;
                ele.html($.t(key, optionsToUse));
            } else if (attr === 'text') {
                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.text() }, options) : options;
                ele.text($.t(key, optionsToUse));
            } else if (attr === 'prepend') {
                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.html() }, options) : options;
                ele.prepend($.t(key, optionsToUse));
            } else if (attr === 'append') {
                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.html() }, options) : options;
                ele.append($.t(key, optionsToUse));
            } else {
                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.attr(attr) }, options) : options;
                ele.attr(attr, $.t(key, optionsToUse));
            }
        }

        function localize(ele, options) {
            var key = ele.attr(o.selectorAttr);
            if (!key && typeof key !== 'undefined' && key !== false) key = ele.text() || ele.val();
            if (!key) return;

            var target = ele
              , targetSelector = ele.data("i18n-target");
            if (targetSelector) {
                target = ele.find(targetSelector) || ele;
            }

            if (!options && o.useDataAttrOptions === true) {
                options = ele.data("i18n-options");
            }
            options = options || {};

            if (key.indexOf(';') >= 0) {
                var keys = key.split(';');

                $.each(keys, function(m, k) {
                    if (k !== '') parse(target, k, options);
                });

            } else {
                parse(target, key, options);
            }

            if (o.useDataAttrOptions === true) ele.data("i18n-options", options);
        }

        // fn
        $.fn.i18n = function (options) {
            return this.each(function() {
                // localize element itself
                localize($(this), options);

                // localize childs
                var elements =  $(this).find('[' + o.selectorAttr + ']');
                elements.each(function() {
                    localize($(this), options);
                });
            });
        };
    }
    function applyReplacement(str, replacementHash, nestedKey, options) {
        if (!str) return str;

        options = options || replacementHash; // first call uses replacement hash combined with options
        if (str.indexOf(options.interpolationPrefix || o.interpolationPrefix) < 0) return str;

        var prefix = options.interpolationPrefix ? f.regexEscape(options.interpolationPrefix) : o.interpolationPrefixEscaped
          , suffix = options.interpolationSuffix ? f.regexEscape(options.interpolationSuffix) : o.interpolationSuffixEscaped
          , unEscapingSuffix = 'HTML'+suffix;

        f.each(replacementHash, function(key, value) {
            var nextKey = nestedKey ? nestedKey + o.keyseparator + key : key;
            if (typeof value === 'object' && value !== null) {
                str = applyReplacement(str, value, nextKey, options);
            } else {
                if (options.escapeInterpolation || o.escapeInterpolation) {
                    str = str.replace(new RegExp([prefix, nextKey, unEscapingSuffix].join(''), 'g'), value);
                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), f.escape(value));
                } else {
                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), value);
                }
                // str = options.escapeInterpolation;
            }
        });
        return str;
    }

    // append it to functions
    f.applyReplacement = applyReplacement;

    function applyReuse(translated, options) {
        var comma = ',';
        var options_open = '{';
        var options_close = '}';

        var opts = f.extend({}, options);
        delete opts.postProcess;

        while (translated.indexOf(o.reusePrefix) != -1) {
            replacementCounter++;
            if (replacementCounter > o.maxRecursion) { break; } // safety net for too much recursion
            var index_of_opening = translated.lastIndexOf(o.reusePrefix);
            var index_of_end_of_closing = translated.indexOf(o.reuseSuffix, index_of_opening) + o.reuseSuffix.length;
            var token = translated.substring(index_of_opening, index_of_end_of_closing);
            var token_without_symbols = token.replace(o.reusePrefix, '').replace(o.reuseSuffix, '');


            if (token_without_symbols.indexOf(comma) != -1) {
                var index_of_token_end_of_closing = token_without_symbols.indexOf(comma);
                if (token_without_symbols.indexOf(options_open, index_of_token_end_of_closing) != -1 && token_without_symbols.indexOf(options_close, index_of_token_end_of_closing) != -1) {
                    var index_of_opts_opening = token_without_symbols.indexOf(options_open, index_of_token_end_of_closing);
                    var index_of_opts_end_of_closing = token_without_symbols.indexOf(options_close, index_of_opts_opening) + options_close.length;
                    try {
                        opts = f.extend(opts, JSON.parse(token_without_symbols.substring(index_of_opts_opening, index_of_opts_end_of_closing)));
                        token_without_symbols = token_without_symbols.substring(0, index_of_token_end_of_closing);
                    } catch (e) {
                    }
                }
            }

            var translated_token = _translate(token_without_symbols, opts);
            translated = translated.replace(token, translated_token);
        }
        return translated;
    }

    function hasContext(options) {
        return (options.context && (typeof options.context == 'string' || typeof options.context == 'number'));
    }

    function needsPlural(options) {
        return (options.count !== undefined && typeof options.count != 'string' && options.count !== 1);
    }

    function exists(key, options) {
        options = options || {};

        var notFound = _getDefaultValue(key, options)
            , found = _find(key, options);

        return found !== undefined || found === notFound;
    }

    function translate(key, options) {
        options = options || {};

        if (!initialized) {
            f.log('i18next not finished initialization. you might have called t function before loading resources finished.')
            return options.defaultValue || '';
        };
        replacementCounter = 0;
        return _translate.apply(null, arguments);
    }

    function _getDefaultValue(key, options) {
        return (options.defaultValue !== undefined) ? options.defaultValue : key;
    }

    function _injectSprintfProcessor() {

        var values = [];

        // mh: build array from second argument onwards
        for (var i = 1; i < arguments.length; i++) {
            values.push(arguments[i]);
        }

        return {
            postProcess: 'sprintf',
            sprintf:     values
        };
    }

    function _translate(potentialKeys, options) {
        if (typeof options == 'string') {
            if (o.shortcutFunction === 'sprintf') {
                // mh: gettext like sprintf syntax found, automatically create sprintf processor
                options = _injectSprintfProcessor.apply(null, arguments);
            } else if (o.shortcutFunction === 'defaultValue') {
                options = {
                    defaultValue: options
                }
            }
        } else {
            options = options || {};
        }

        if (potentialKeys === undefined || potentialKeys === null) return '';

        if (typeof potentialKeys == 'string') {
            potentialKeys = [potentialKeys];
        }

        var key = potentialKeys[0];

        if (potentialKeys.length > 1) {
            for (var i = 0; i < potentialKeys.length; i++) {
                key = potentialKeys[i];
                if (exists(key)) {
                    break;
                }
            }
        }

        var notFound = _getDefaultValue(key, options)
            , found = _find(key, options)
            , lngs = options.lng ? f.toLanguages(options.lng) : languages
            , ns = options.ns || o.ns.defaultNs
            , parts;

        // split ns and key
        if (key.indexOf(o.nsseparator) > -1) {
            parts = key.split(o.nsseparator);
            ns = parts[0];
            key = parts[1];
        }

        if (found === undefined && o.sendMissing) {
            if (options.lng) {
                sync.postMissing(lngs[0], ns, key, notFound, lngs);
            } else {
                sync.postMissing(o.lng, ns, key, notFound, lngs);
            }
        }

        var postProcessor = options.postProcess || o.postProcess;
        if (found !== undefined && postProcessor) {
            if (postProcessors[postProcessor]) {
                found = postProcessors[postProcessor](found, key, options);
            }
        }

        // process notFound if function exists
        var splitNotFound = notFound;
        if (notFound.indexOf(o.nsseparator) > -1) {
            parts = notFound.split(o.nsseparator);
            splitNotFound = parts[1];
        }
        if (splitNotFound === key && o.parseMissingKey) {
            notFound = o.parseMissingKey(notFound);
        }

        if (found === undefined) {
            notFound = applyReplacement(notFound, options);
            notFound = applyReuse(notFound, options);

            if (postProcessor && postProcessors[postProcessor]) {
                var val = _getDefaultValue(key, options);
                found = postProcessors[postProcessor](val, key, options);
            }
        }

        return (found !== undefined) ? found : notFound;
    }

    function _find(key, options) {
        options = options || {};

        var optionWithoutCount, translated
            , notFound = _getDefaultValue(key, options)
            , lngs = languages;

        if (!resStore) { return notFound; } // no resStore to translate from

        if (options.lng) {
            lngs = f.toLanguages(options.lng);

            if (!resStore[lngs[0]]) {
                var oldAsync = o.getAsync;
                o.getAsync = false;

                i18n.sync.load(lngs, o, function(err, store) {
                    f.extend(resStore, store);
                    o.getAsync = oldAsync;
                });
            }
        }

        var ns = options.ns || o.ns.defaultNs;
        if (key.indexOf(o.nsseparator) > -1) {
            var parts = key.split(o.nsseparator);
            ns = parts[0];
            key = parts[1];
        }

        if (hasContext(options)) {
            optionWithoutCount = f.extend({}, options);
            delete optionWithoutCount.context;
            optionWithoutCount.defaultValue = o.contextNotFound;

            var contextKey = ns + o.nsseparator + key + '_' + options.context;

            translated = translate(contextKey, optionWithoutCount);
            if (translated != o.contextNotFound) {
                return applyReplacement(translated, { context: options.context }); // apply replacement for context only
            } // else continue translation with original/nonContext key
        }

        if (needsPlural(options)) {
            optionWithoutCount = f.extend({}, options);
            delete optionWithoutCount.count;
            optionWithoutCount.defaultValue = o.pluralNotFound;

            var pluralKey = ns + o.nsseparator + key + o.pluralSuffix;
            var pluralExtension = pluralExtensions.get(lngs[0], options.count);
            if (pluralExtension >= 0) {
                pluralKey = pluralKey + '_' + pluralExtension;
            } else if (pluralExtension === 1) {
                pluralKey = ns + o.nsseparator + key; // singular
            }

            translated = translate(pluralKey, optionWithoutCount);
            if (translated != o.pluralNotFound) {
                return applyReplacement(translated, {
                    count: options.count,
                    interpolationPrefix: options.interpolationPrefix,
                    interpolationSuffix: options.interpolationSuffix
                }); // apply replacement for count only
            } // else continue translation with original/singular key
        }

        var found;
        var keys = key.split(o.keyseparator);
        for (var i = 0, len = lngs.length; i < len; i++ ) {
            if (found !== undefined) break;

            var l = lngs[i];

            var x = 0;
            var value = resStore[l] && resStore[l][ns];
            while (keys[x]) {
                value = value && value[keys[x]];
                x++;
            }
            if (value !== undefined) {
                var valueType = Object.prototype.toString.apply(value);
                if (typeof value === 'string') {
                    value = applyReplacement(value, options);
                    value = applyReuse(value, options);
                } else if (valueType === '[object Array]' && !o.returnObjectTrees && !options.returnObjectTrees) {
                    value = value.join('\n');
                    value = applyReplacement(value, options);
                    value = applyReuse(value, options);
                } else if (value === null && o.fallbackOnNull === true) {
                    value = undefined;
                } else if (value !== null) {
                    if (!o.returnObjectTrees && !options.returnObjectTrees) {
                        if (o.objectTreeKeyHandler && typeof o.objectTreeKeyHandler == 'function') {
                            value = o.objectTreeKeyHandler(key, value, l, ns, options);
                        } else {
                            value = 'key \'' + ns + ':' + key + ' (' + l + ')\' ' +
                                'returned an object instead of string.';
                            f.log(value);
                        }
                    } else if (valueType !== '[object Number]' && valueType !== '[object Function]' && valueType !== '[object RegExp]') {
                        var copy = (valueType === '[object Array]') ? [] : {}; // apply child translation on a copy
                        f.each(value, function(m) {
                            copy[m] = _translate(ns + o.nsseparator + key + o.keyseparator + m, options);
                        });
                        value = copy;
                    }
                }

                if (typeof value === 'string' && value.trim() === '' && o.fallbackOnEmpty === true)
                    value = undefined;

                found = value;
            }
        }

        if (found === undefined && !options.isFallbackLookup && (o.fallbackToDefaultNS === true || (o.fallbackNS && o.fallbackNS.length > 0))) {
            // set flag for fallback lookup - avoid recursion
            options.isFallbackLookup = true;

            if (o.fallbackNS.length) {

                for (var y = 0, lenY = o.fallbackNS.length; y < lenY; y++) {
                    found = _find(o.fallbackNS[y] + o.nsseparator + key, options);

                    if (found) {
                        /* compare value without namespace */
                        var foundValue = found.indexOf(o.nsseparator) > -1 ? found.split(o.nsseparator)[1] : found
                          , notFoundValue = notFound.indexOf(o.nsseparator) > -1 ? notFound.split(o.nsseparator)[1] : notFound;

                        if (foundValue !== notFoundValue) break;
                    }
                }
            } else {
                found = _find(key, options); // fallback to default NS
            }
        }

        return found;
    }
    function detectLanguage() {
        var detectedLng;

        // get from qs
        var qsParm = [];
        if (typeof window !== 'undefined') {
            (function() {
                var query = window.location.search.substring(1);
                var parms = query.split('&');
                for (var i=0; i<parms.length; i++) {
                    var pos = parms[i].indexOf('=');
                    if (pos > 0) {
                        var key = parms[i].substring(0,pos);
                        var val = parms[i].substring(pos+1);
                        qsParm[key] = val;
                    }
                }
            })();
            if (qsParm[o.detectLngQS]) {
                detectedLng = qsParm[o.detectLngQS];
            }
        }

        // get from cookie
        if (!detectedLng && typeof document !== 'undefined' && o.useCookie ) {
            var c = f.cookie.read(o.cookieName);
            if (c) detectedLng = c;
        }

        // get from navigator
        if (!detectedLng && typeof navigator !== 'undefined') {
            detectedLng =  (navigator.language) ? navigator.language : navigator.userLanguage;
        }

        return detectedLng;
    }
    var sync = {

        load: function(lngs, options, cb) {
            if (options.useLocalStorage) {
                sync._loadLocal(lngs, options, function(err, store) {
                    var missingLngs = [];
                    for (var i = 0, len = lngs.length; i < len; i++) {
                        if (!store[lngs[i]]) missingLngs.push(lngs[i]);
                    }

                    if (missingLngs.length > 0) {
                        sync._fetch(missingLngs, options, function(err, fetched) {
                            f.extend(store, fetched);
                            sync._storeLocal(fetched);

                            cb(null, store);
                        });
                    } else {
                        cb(null, store);
                    }
                });
            } else {
                sync._fetch(lngs, options, function(err, store){
                    cb(null, store);
                });
            }
        },

        _loadLocal: function(lngs, options, cb) {
            var store = {}
              , nowMS = new Date().getTime();

            if(window.localStorage) {

                var todo = lngs.length;

                f.each(lngs, function(key, lng) {
                    var local = window.localStorage.getItem('res_' + lng);

                    if (local) {
                        local = JSON.parse(local);

                        if (local.i18nStamp && local.i18nStamp + options.localStorageExpirationTime > nowMS) {
                            store[lng] = local;
                        }
                    }

                    todo--; // wait for all done befor callback
                    if (todo === 0) cb(null, store);
                });
            }
        },

        _storeLocal: function(store) {
            if(window.localStorage) {
                for (var m in store) {
                    store[m].i18nStamp = new Date().getTime();
                    window.localStorage.setItem('res_' + m, JSON.stringify(store[m]));
                }
            }
            return;
        },

        _fetch: function(lngs, options, cb) {
            var ns = options.ns
              , store = {};

            if (!options.dynamicLoad) {
                var todo = ns.namespaces.length * lngs.length
                  , errors;

                // load each file individual
                f.each(ns.namespaces, function(nsIndex, nsValue) {
                    f.each(lngs, function(lngIndex, lngValue) {

                        // Call this once our translation has returned.
                        var loadComplete = function(err, data) {
                            if (err) {
                                errors = errors || [];
                                errors.push(err);
                            }
                            store[lngValue] = store[lngValue] || {};
                            store[lngValue][nsValue] = data;

                            todo--; // wait for all done befor callback
                            if (todo === 0) cb(errors, store);
                        };

                        if(typeof options.customLoad == 'function'){
                            // Use the specified custom callback.
                            options.customLoad(lngValue, nsValue, options, loadComplete);
                        } else {
                            //~ // Use our inbuilt sync.
                            sync._fetchOne(lngValue, nsValue, options, loadComplete);
                        }
                    });
                });
            } else {
                // Call this once our translation has returned.
                var loadComplete = function(err, data) {
                    cb(null, data);
                };

                if(typeof options.customLoad == 'function'){
                    // Use the specified custom callback.
                    options.customLoad(lngs, ns.namespaces, options, loadComplete);
                } else {
                    var url = applyReplacement(options.resGetPath, { lng: lngs.join('+'), ns: ns.namespaces.join('+') });
                    // load all needed stuff once
                    f.ajax({
                        url: url,
                        success: function(data, status, xhr) {
                            f.log('loaded: ' + url);
                            loadComplete(null, data);
                        },
                        error : function(xhr, status, error) {
                            f.log('failed loading: ' + url);
                            loadComplete('failed loading resource.json error: ' + error);
                        },
                        dataType: "json",
                        async : options.getAsync
                    });
                }
            }
        },

        _fetchOne: function(lng, ns, options, done) {
            var url = applyReplacement(options.resGetPath, { lng: lng, ns: ns });
            f.ajax({
                url: url,
                success: function(data, status, xhr) {
                    f.log('loaded: ' + url);
                    done(null, data);
                },
                error : function(xhr, status, error) {
                    if (error.status == 200) {
                        // file loaded but invalid json, stop waste time !
                        f.log('There is a typo in: ' + url);
                    } else if (error.status == 404) {
                        f.log('Does not exist: ' + url);
                    } else {
                        f.log(error.status + ' when loading ' + url);
                    }

                    done(error, {});
                },
                dataType: "json",
                async : options.getAsync
            });
        },

        postMissing: function(lng, ns, key, defaultValue, lngs) {
            var payload = {};
            payload[key] = defaultValue;

            var urls = [];

            if (o.sendMissingTo === 'fallback' && o.fallbackLng !== false) {
                urls.push({lng: o.fallbackLng, url: applyReplacement(o.resPostPath, { lng: o.fallbackLng, ns: ns })});
            } else if (o.sendMissingTo === 'current' || (o.sendMissingTo === 'fallback' && o.fallbackLng === false) ) {
                urls.push({lng: lng, url: applyReplacement(o.resPostPath, { lng: lng, ns: ns })});
            } else if (o.sendMissingTo === 'all') {
                for (var i = 0, l = lngs.length; i < l; i++) {
                    urls.push({lng: lngs[i], url: applyReplacement(o.resPostPath, { lng: lngs[i], ns: ns })});
                }
            }

            for (var y = 0, len = urls.length; y < len; y++) {
                var item = urls[y];
                f.ajax({
                    url: item.url,
                    type: o.sendType,
                    data: payload,
                    success: function(data, status, xhr) {
                        f.log('posted missing key \'' + key + '\' to: ' + item.url);

                        // add key to resStore
                        var keys = key.split('.');
                        var x = 0;
                        var value = resStore[item.lng][ns];
                        while (keys[x]) {
                            if (x === keys.length - 1) {
                                value = value[keys[x]] = defaultValue;
                            } else {
                                value = value[keys[x]] = value[keys[x]] || {};
                            }
                            x++;
                        }
                    },
                    error : function(xhr, status, error) {
                        f.log('failed posting missing key \'' + key + '\' to: ' + item.url);
                    },
                    dataType: "json",
                    async : o.postAsync
                });
            }
        }
    };
    // definition http://translate.sourceforge.net/wiki/l10n/pluralforms
    var pluralExtensions = {

        rules: {
            "ach": {
                "name": "Acholi",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "af": {
                "name": "Afrikaans",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "ak": {
                "name": "Akan",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "am": {
                "name": "Amharic",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "an": {
                "name": "Aragonese",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "ar": {
                "name": "Arabic",
                "numbers": [
                    0,
                    1,
                    2,
                    3,
                    11,
                    100
                ],
                "plurals": function(n) { return Number(n===0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 ? 4 : 5); }
            },
            "arn": {
                "name": "Mapudungun",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "ast": {
                "name": "Asturian",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "ay": {
                "name": "Aymar\u00e1",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "az": {
                "name": "Azerbaijani",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "be": {
                "name": "Belarusian",
                "numbers": [
                    1,
                    2,
                    5
                ],
                "plurals": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }
            },
            "bg": {
                "name": "Bulgarian",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "bn": {
                "name": "Bengali",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "bo": {
                "name": "Tibetan",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "br": {
                "name": "Breton",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "bs": {
                "name": "Bosnian",
                "numbers": [
                    1,
                    2,
                    5
                ],
                "plurals": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }
            },
            "ca": {
                "name": "Catalan",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "cgg": {
                "name": "Chiga",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "cs": {
                "name": "Czech",
                "numbers": [
                    1,
                    2,
                    5
                ],
                "plurals": function(n) { return Number((n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2); }
            },
            "csb": {
                "name": "Kashubian",
                "numbers": [
                    1,
                    2,
                    5
                ],
                "plurals": function(n) { return Number(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }
            },
            "cy": {
                "name": "Welsh",
                "numbers": [
                    1,
                    2,
                    3,
                    8
                ],
                "plurals": function(n) { return Number((n==1) ? 0 : (n==2) ? 1 : (n != 8 && n != 11) ? 2 : 3); }
            },
            "da": {
                "name": "Danish",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "de": {
                "name": "German",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "dz": {
                "name": "Dzongkha",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "el": {
                "name": "Greek",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "en": {
                "name": "English",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "eo": {
                "name": "Esperanto",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "es": {
                "name": "Spanish",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "es_ar": {
                "name": "Argentinean Spanish",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "et": {
                "name": "Estonian",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "eu": {
                "name": "Basque",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "fa": {
                "name": "Persian",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "fi": {
                "name": "Finnish",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "fil": {
                "name": "Filipino",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "fo": {
                "name": "Faroese",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "fr": {
                "name": "French",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "fur": {
                "name": "Friulian",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "fy": {
                "name": "Frisian",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "ga": {
                "name": "Irish",
                "numbers": [
                    1,
                    2,
                    3,
                    7,
                    11
                ],
                "plurals": function(n) { return Number(n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : 4) ;}
            },
            "gd": {
                "name": "Scottish Gaelic",
                "numbers": [
                    1,
                    2,
                    3,
                    20
                ],
                "plurals": function(n) { return Number((n==1 || n==11) ? 0 : (n==2 || n==12) ? 1 : (n > 2 && n < 20) ? 2 : 3); }
            },
            "gl": {
                "name": "Galician",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "gu": {
                "name": "Gujarati",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "gun": {
                "name": "Gun",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "ha": {
                "name": "Hausa",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "he": {
                "name": "Hebrew",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "hi": {
                "name": "Hindi",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "hr": {
                "name": "Croatian",
                "numbers": [
                    1,
                    2,
                    5
                ],
                "plurals": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }
            },
            "hu": {
                "name": "Hungarian",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "hy": {
                "name": "Armenian",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "ia": {
                "name": "Interlingua",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "id": {
                "name": "Indonesian",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "is": {
                "name": "Icelandic",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n%10!=1 || n%100==11); }
            },
            "it": {
                "name": "Italian",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "ja": {
                "name": "Japanese",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "jbo": {
                "name": "Lojban",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "jv": {
                "name": "Javanese",
                "numbers": [
                    0,
                    1
                ],
                "plurals": function(n) { return Number(n !== 0); }
            },
            "ka": {
                "name": "Georgian",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "kk": {
                "name": "Kazakh",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "km": {
                "name": "Khmer",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "kn": {
                "name": "Kannada",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "ko": {
                "name": "Korean",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "ku": {
                "name": "Kurdish",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "kw": {
                "name": "Cornish",
                "numbers": [
                    1,
                    2,
                    3,
                    4
                ],
                "plurals": function(n) { return Number((n==1) ? 0 : (n==2) ? 1 : (n == 3) ? 2 : 3); }
            },
            "ky": {
                "name": "Kyrgyz",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "lb": {
                "name": "Letzeburgesch",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "ln": {
                "name": "Lingala",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "lo": {
                "name": "Lao",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "lt": {
                "name": "Lithuanian",
                "numbers": [
                    1,
                    2,
                    10
                ],
                "plurals": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2); }
            },
            "lv": {
                "name": "Latvian",
                "numbers": [
                    0,
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n !== 0 ? 1 : 2); }
            },
            "mai": {
                "name": "Maithili",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "mfe": {
                "name": "Mauritian Creole",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "mg": {
                "name": "Malagasy",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "mi": {
                "name": "Maori",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "mk": {
                "name": "Macedonian",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n==1 || n%10==1 ? 0 : 1); }
            },
            "ml": {
                "name": "Malayalam",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "mn": {
                "name": "Mongolian",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "mnk": {
                "name": "Mandinka",
                "numbers": [
                    0,
                    1,
                    2
                ],
                "plurals": function(n) { return Number(0 ? 0 : n==1 ? 1 : 2); }
            },
            "mr": {
                "name": "Marathi",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "ms": {
                "name": "Malay",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "mt": {
                "name": "Maltese",
                "numbers": [
                    1,
                    2,
                    11,
                    20
                ],
                "plurals": function(n) { return Number(n==1 ? 0 : n===0 || ( n%100>1 && n%100<11) ? 1 : (n%100>10 && n%100<20 ) ? 2 : 3); }
            },
            "nah": {
                "name": "Nahuatl",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "nap": {
                "name": "Neapolitan",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "nb": {
                "name": "Norwegian Bokmal",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "ne": {
                "name": "Nepali",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "nl": {
                "name": "Dutch",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "nn": {
                "name": "Norwegian Nynorsk",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "no": {
                "name": "Norwegian",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "nso": {
                "name": "Northern Sotho",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "oc": {
                "name": "Occitan",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "or": {
                "name": "Oriya",
                "numbers": [
                    2,
                    1
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "pa": {
                "name": "Punjabi",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "pap": {
                "name": "Papiamento",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "pl": {
                "name": "Polish",
                "numbers": [
                    1,
                    2,
                    5
                ],
                "plurals": function(n) { return Number(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }
            },
            "pms": {
                "name": "Piemontese",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "ps": {
                "name": "Pashto",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "pt": {
                "name": "Portuguese",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "pt_br": {
                "name": "Brazilian Portuguese",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "rm": {
                "name": "Romansh",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "ro": {
                "name": "Romanian",
                "numbers": [
                    1,
                    2,
                    20
                ],
                "plurals": function(n) { return Number(n==1 ? 0 : (n===0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2); }
            },
            "ru": {
                "name": "Russian",
                "numbers": [
                    1,
                    2,
                    5
                ],
                "plurals": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }
            },
            "sah": {
                "name": "Yakut",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "sco": {
                "name": "Scots",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "se": {
                "name": "Northern Sami",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "si": {
                "name": "Sinhala",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "sk": {
                "name": "Slovak",
                "numbers": [
                    1,
                    2,
                    5
                ],
                "plurals": function(n) { return Number((n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2); }
            },
            "sl": {
                "name": "Slovenian",
                "numbers": [
                    5,
                    1,
                    2,
                    3
                ],
                "plurals": function(n) { return Number(n%100==1 ? 1 : n%100==2 ? 2 : n%100==3 || n%100==4 ? 3 : 0); }
            },
            "so": {
                "name": "Somali",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "son": {
                "name": "Songhay",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "sq": {
                "name": "Albanian",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "sr": {
                "name": "Serbian",
                "numbers": [
                    1,
                    2,
                    5
                ],
                "plurals": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }
            },
            "su": {
                "name": "Sundanese",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "sv": {
                "name": "Swedish",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "sw": {
                "name": "Swahili",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "ta": {
                "name": "Tamil",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "te": {
                "name": "Telugu",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "tg": {
                "name": "Tajik",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "th": {
                "name": "Thai",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "ti": {
                "name": "Tigrinya",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "tk": {
                "name": "Turkmen",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "tr": {
                "name": "Turkish",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "tt": {
                "name": "Tatar",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "ug": {
                "name": "Uyghur",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "uk": {
                "name": "Ukrainian",
                "numbers": [
                    1,
                    2,
                    5
                ],
                "plurals": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }
            },
            "ur": {
                "name": "Urdu",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "uz": {
                "name": "Uzbek",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "vi": {
                "name": "Vietnamese",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "wa": {
                "name": "Walloon",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n > 1); }
            },
            "wo": {
                "name": "Wolof",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            },
            "yo": {
                "name": "Yoruba",
                "numbers": [
                    1,
                    2
                ],
                "plurals": function(n) { return Number(n != 1); }
            },
            "zh": {
                "name": "Chinese",
                "numbers": [
                    1
                ],
                "plurals": function(n) { return 0; }
            }
        },

        // for demonstration only sl and ar is added but you can add your own pluralExtensions
        addRule: function(lng, obj) {
            pluralExtensions.rules[lng] = obj;
        },

        setCurrentLng: function(lng) {
            if (!pluralExtensions.currentRule || pluralExtensions.currentRule.lng !== lng) {
                var parts = lng.split('-');

                pluralExtensions.currentRule = {
                    lng: lng,
                    rule: pluralExtensions.rules[parts[0]]
                };
            }
        },

        get: function(lng, count) {
            var parts = lng.split('-');

            function getResult(l, c) {
                var ext;
                if (pluralExtensions.currentRule && pluralExtensions.currentRule.lng === lng) {
                    ext = pluralExtensions.currentRule.rule;
                } else {
                    ext = pluralExtensions.rules[l];
                }
                if (ext) {
                    var i = ext.plurals(c);
                    var number = ext.numbers[i];
                    if (ext.numbers.length === 2 && ext.numbers[0] === 1) {
                        if (number === 2) {
                            number = -1; // regular plural
                        } else if (number === 1) {
                            number = 1; // singular
                        }
                    }//console.log(count + '-' + number);
                    return number;
                } else {
                    return c === 1 ? '1' : '-1';
                }
            }

            return getResult(parts[0], count);
        }

    };
    var postProcessors = {};
    var addPostProcessor = function(name, fc) {
        postProcessors[name] = fc;
    };
    // sprintf support
    var sprintf = (function() {
        function get_type(variable) {
            return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
        }
        function str_repeat(input, multiplier) {
            for (var output = []; multiplier > 0; output[--multiplier] = input) {/* do nothing */}
            return output.join('');
        }

        var str_format = function() {
            if (!str_format.cache.hasOwnProperty(arguments[0])) {
                str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
            }
            return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
        };

        str_format.format = function(parse_tree, argv) {
            var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
            for (i = 0; i < tree_length; i++) {
                node_type = get_type(parse_tree[i]);
                if (node_type === 'string') {
                    output.push(parse_tree[i]);
                }
                else if (node_type === 'array') {
                    match = parse_tree[i]; // convenience purposes only
                    if (match[2]) { // keyword argument
                        arg = argv[cursor];
                        for (k = 0; k < match[2].length; k++) {
                            if (!arg.hasOwnProperty(match[2][k])) {
                                throw(sprintf('[sprintf] property "%s" does not exist', match[2][k]));
                            }
                            arg = arg[match[2][k]];
                        }
                    }
                    else if (match[1]) { // positional argument (explicit)
                        arg = argv[match[1]];
                    }
                    else { // positional argument (implicit)
                        arg = argv[cursor++];
                    }

                    if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {
                        throw(sprintf('[sprintf] expecting number but found %s', get_type(arg)));
                    }
                    switch (match[8]) {
                        case 'b': arg = arg.toString(2); break;
                        case 'c': arg = String.fromCharCode(arg); break;
                        case 'd': arg = parseInt(arg, 10); break;
                        case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;
                        case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;
                        case 'o': arg = arg.toString(8); break;
                        case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;
                        case 'u': arg = Math.abs(arg); break;
                        case 'x': arg = arg.toString(16); break;
                        case 'X': arg = arg.toString(16).toUpperCase(); break;
                    }
                    arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);
                    pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
                    pad_length = match[6] - String(arg).length;
                    pad = match[6] ? str_repeat(pad_character, pad_length) : '';
                    output.push(match[5] ? arg + pad : pad + arg);
                }
            }
            return output.join('');
        };

        str_format.cache = {};

        str_format.parse = function(fmt) {
            var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
            while (_fmt) {
                if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
                    parse_tree.push(match[0]);
                }
                else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
                    parse_tree.push('%');
                }
                else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
                    if (match[2]) {
                        arg_names |= 1;
                        var field_list = [], replacement_field = match[2], field_match = [];
                        if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                            field_list.push(field_match[1]);
                            while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                                if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                                    field_list.push(field_match[1]);
                                }
                                else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                                    field_list.push(field_match[1]);
                                }
                                else {
                                    throw('[sprintf] huh?');
                                }
                            }
                        }
                        else {
                            throw('[sprintf] huh?');
                        }
                        match[2] = field_list;
                    }
                    else {
                        arg_names |= 2;
                    }
                    if (arg_names === 3) {
                        throw('[sprintf] mixing positional and named placeholders is not (yet) supported');
                    }
                    parse_tree.push(match);
                }
                else {
                    throw('[sprintf] huh?');
                }
                _fmt = _fmt.substring(match[0].length);
            }
            return parse_tree;
        };

        return str_format;
    })();

    var vsprintf = function(fmt, argv) {
        argv.unshift(fmt);
        return sprintf.apply(null, argv);
    };

    addPostProcessor("sprintf", function(val, key, opts) {
        if (!opts.sprintf) return val;

        if (Object.prototype.toString.apply(opts.sprintf) === '[object Array]') {
            return vsprintf(val, opts.sprintf);
        } else if (typeof opts.sprintf === 'object') {
            return sprintf(val, opts.sprintf);
        }

        return val;
    });
    // public api interface
    i18n.init = init;
    i18n.setLng = setLng;
    i18n.preload = preload;
    i18n.addResourceBundle = addResourceBundle;
    i18n.removeResourceBundle = removeResourceBundle;
    i18n.loadNamespace = loadNamespace;
    i18n.loadNamespaces = loadNamespaces;
    i18n.setDefaultNamespace = setDefaultNamespace;
    i18n.t = translate;
    i18n.translate = translate;
    i18n.exists = exists;
    i18n.detectLanguage = f.detectLanguage;
    i18n.pluralExtensions = pluralExtensions;
    i18n.sync = sync;
    i18n.functions = f;
    i18n.lng = lng;
    i18n.addPostProcessor = addPostProcessor;
    i18n.options = o;

})();

(function() {/*
 * Javascript Diff Algorithm
 *  By John Resig (http://ejohn.org/)
 *  Modified by Chu Alan "sprite"
 *
 * Released under the MIT license.
 *
 * More Info:
 *  http://ejohn.org/projects/javascript-diff-algorithm/
 */

function escape(s) {
    var n = s;
    n = n.replace(/&/g, "&amp;");
    n = n.replace(/</g, "&lt;");
    n = n.replace(/>/g, "&gt;");
    n = n.replace(/"/g, "&quot;");

    return n;
}

function diffString( o, n ) {
  o = o.replace(/\s+$/, '');
  n = n.replace(/\s+$/, '');

  var out = diff(o == "" ? [] : o.split(/\s+/), n == "" ? [] : n.split(/\s+/) );
  var str = "";

  var oSpace = o.match(/\s+/g);
  if (oSpace == null) {
    oSpace = ["\n"];
  } else {
    oSpace.push("\n");
  }
  var nSpace = n.match(/\s+/g);
  if (nSpace == null) {
    nSpace = ["\n"];
  } else {
    nSpace.push("\n");
  }

  if (out.n.length == 0) {
      for (var i = 0; i < out.o.length; i++) {
        str += '<del>' + escape(out.o[i]) + oSpace[i] + "</del>";
      }
  } else {
    if (out.n[0].text == null) {
      for (n = 0; n < out.o.length && out.o[n].text == null; n++) {
        str += '<del>' + escape(out.o[n]) + oSpace[n] + "</del>";
      }
    }

    for ( var i = 0; i < out.n.length; i++ ) {
      if (out.n[i].text == null) {
        str += '<ins>' + escape(out.n[i]) + nSpace[i] + "</ins>";
      } else {
        var pre = "";

        for (n = out.n[i].row + 1; n < out.o.length && out.o[n].text == null; n++ ) {
          pre += '<del>' + escape(out.o[n]) + oSpace[n] + "</del>";
        }
        str += " " + out.n[i].text + nSpace[i] + pre;
      }
    }
  }
  
  return str;
}

function randomColor() {
    return "rgb(" + (Math.random() * 100) + "%, " + 
                    (Math.random() * 100) + "%, " + 
                    (Math.random() * 100) + "%)";
}
function diffString2( o, n ) {
  o = o.replace(/\s+$/, '');
  n = n.replace(/\s+$/, '');

  var out = diff(o == "" ? [] : o.split(/\s+/), n == "" ? [] : n.split(/\s+/) );

  var oSpace = o.match(/\s+/g);
  if (oSpace == null) {
    oSpace = ["\n"];
  } else {
    oSpace.push("\n");
  }
  var nSpace = n.match(/\s+/g);
  if (nSpace == null) {
    nSpace = ["\n"];
  } else {
    nSpace.push("\n");
  }

  var os = "";
  var colors = new Array();
  for (var i = 0; i < out.o.length; i++) {
      colors[i] = randomColor();

      if (out.o[i].text != null) {
          os += '<span style="background-color: ' +colors[i]+ '">' + 
                escape(out.o[i].text) + oSpace[i] + "</span>";
      } else {
          os += "<del>" + escape(out.o[i]) + oSpace[i] + "</del>";
      }
  }

  var ns = "";
  for (var i = 0; i < out.n.length; i++) {
      if (out.n[i].text != null) {
          ns += '<span style="background-color: ' +colors[out.n[i].row]+ '">' + 
                escape(out.n[i].text) + nSpace[i] + "</span>";
      } else {
          ns += "<ins>" + escape(out.n[i]) + nSpace[i] + "</ins>";
      }
  }

  return { o : os , n : ns };
}

function diff( o, n ) {
  var ns = new Object();
  var os = new Object();
  
  for ( var i = 0; i < n.length; i++ ) {
    if ( ns[ n[i] ] == null )
      ns[ n[i] ] = { rows: new Array(), o: null };
    ns[ n[i] ].rows.push( i );
  }
  
  for ( var i = 0; i < o.length; i++ ) {
    if ( os[ o[i] ] == null )
      os[ o[i] ] = { rows: new Array(), n: null };
    os[ o[i] ].rows.push( i );
  }
  
  for ( var i in ns ) {
    if ( ns[i].rows.length == 1 && typeof(os[i]) != "undefined" && os[i].rows.length == 1 ) {
      n[ ns[i].rows[0] ] = { text: n[ ns[i].rows[0] ], row: os[i].rows[0] };
      o[ os[i].rows[0] ] = { text: o[ os[i].rows[0] ], row: ns[i].rows[0] };
    }
  }
  
  for ( var i = 0; i < n.length - 1; i++ ) {
    if ( n[i].text != null && n[i+1].text == null && n[i].row + 1 < o.length && o[ n[i].row + 1 ].text == null && 
         n[i+1] == o[ n[i].row + 1 ] ) {
      n[i+1] = { text: n[i+1], row: n[i].row + 1 };
      o[n[i].row+1] = { text: o[n[i].row+1], row: i + 1 };
    }
  }
  
  for ( var i = n.length - 1; i > 0; i-- ) {
    if ( n[i].text != null && n[i-1].text == null && n[i].row > 0 && o[ n[i].row - 1 ].text == null && 
         n[i-1] == o[ n[i].row - 1 ] ) {
      n[i-1] = { text: n[i-1], row: n[i].row - 1 };
      o[n[i].row-1] = { text: o[n[i].row-1], row: i - 1 };
    }
  }
  
  return { o: o, n: n };
}

window.diffString = diffString;

})();
sofia.resources['en'] = {
	"translation": {
		"name": "English",
		"menu": {
			"labels": {
				"about": "About",
				"addwindow": "Add Window",
				"settings": "Settings",
				"feedback": "Feedback",
				"options": "Options"
			},
			"feedback": {
				"name": "Name",
				"email": "Email",
				"comments": "Your Comments",
				"feature": "Feature Suggestion",
				"bug": "Bug Report",
				"other": "Other",
				"send": "Send",
				"thankyou": "Thank you for your feedback"
			},
			"search": {
				"placeholder": "Search",
				"suggestversion": "Open <strong>{0}</strong> in new window",
				"suggestreference": "Go to <strong>{0}</strong> in {1}",
				"suggestsearch": "Search \"<strong>{0}</strong>\" in {1}"
			},
			"config": {
				"font": "Style",
				"settings": "Settings",
				"tools": "Tools"
			},
			"reset": "restore",
			"themes": {
				"default": "Normal",
				"sepia": "Sepia",
				"dark": "Low Light"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "Visual Filters",
				"title": "Visual Filters",
				"newfilter": "New Filter",
				"strongsnumber": "Strong's #",
				"morphology": "Morphology",
				"style": "Style"
			},
			"eng2p": {
				"button": "English 2nd Person Plural",
				"title": "English Second Person Plural",
				"description": "Modern English does not distinguish between <em>you singular</em> and <em>you plural</em>, so this plugin uses regional English equivalents to represent the Hebrew and Greek forms."

			},
			"lemmapopup": {
				"findalloccurrences": "Find all occurrences (approximately __count__)"
			}
		},
		"windows": {
			"deafbible": {
				"label": "Deaf Bible"
			},
			"videobible": {
				"label": "Video Bible"
			},
			"bible": {
				"label": "Bible",
				"recentlyused": "Recently Used",
				"filter": "Filter...",
				"ot": "Old Testament",
				"nt": "New Testament",
				"dc": "Deuterocanonical Books",
				"more": "More",
				"less": "Less",
				"default": "Featured",
				"languages": "Language",
				"countries": "Country",
				"lemma":"Greek/Hebrew Popups",
				"audio":"Audio available"
			},
			"commentary": {
				"label": "Commentary"
			},
			"map": {
				"label": "Map",
				"placeholder": "Search..."
			},
			"search": {
				"label": "Search",
				"placeholder": "Search",
				"button": "Search",
				"results": "Results",
				"verses": "verses",
				"options": "Search Options"
			},
			"parallel": {
				"label": "Parallels",
				"loading": "Loading...",
				"showall": "Show All",
				"hideall": "Hide All"
			},
			"media": {
				"label": "Media"
			},
			"notes": {
				"label": "Notes"
			},
			"audio": {
				"label":"Audio",
				"options": "Audio Options",
				"synctext": "Sync Text (beta)",
				"autoplay": "Autoplay Next",
				"drama": "Dramatized",
				"nondrama": "Spoken"
			},
			"comparison": {
				"label": "Comparison"
			},
			"stats": {
				"label": "Statistics",
				"frequentwords":"Frequent Words"
			}
		},
		"names": {
			"en": "English",
			"fr": "anglais",
			"es": "Inglés",
			"de": "Englisch",
			"ru": "английский",
			"hi": "अंग्रेजी",
			"ar": "الإنجليزية",
			"af": "Engels",
			"bn": "ইংরেজি",
			"id": "Bahasa Inggris",
			"sw": "Kiingereza",
			"tr": "ingilizce",
			"ja": "英語",
			"zh-TW": "英語",
			"zh-CN": "英语"
		}
	}
}

sofia.resources['fr'] = {
	"translation": {
		"name": "Français",
		"menu": {
			"search": {
				"placeholder": "Recherche"
			},
			"config": {
				"font": "Style",
				"settings": "Paramètres",
				"tools": "Outils"
			},
			"reset": "remettre",
			"themes": {
				"default": "Normal",
				"sepia": "Sépia",
				"dark": "Low Light"
			},
			"labels": {
				"about": "Sur",
				"addwindow": "Ajouter fenêtre",
				"settings": "Paramètres",
				"feedback": "Réaction",
				"options": "Options"
			},
			"feedback": {
				"name": "Nom",
				"email": "Email",
				"comments": "Vos commentaires",
				"feature": "Caractéristique Suggestion",
				"bug": "Rapport de Bug",
				"other": "Autre",
				"send": "Envoyer",
				"thankyou": "Merci pour vos commentaires"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "Filtres visuels",
				"title": "Filtres visuels",
				"newfilter": "Nouveau filtre",
				"strongsnumber": "De Strong #",
				"morphology": "Morphologie",
				"style": "Style"
			},
			"eng2p": {
				"button": "Anglais 2ème personne pluriel",
				"title": "Anglais Deuxième personne pluriel"
			},
			"lemmapopup": {
				"findalloccurrences": "Trouver toutes les occurrences (environ __count__)"
			}
		},
		"windows": {
			"bible": {
				"label": "Bible",
				"filter": "Filtrer ...",
				"ot": "Ancien Testament",
				"nt": "Le Nouveau Testament",
				"dc": "Deutérocanoniques",
				"more": "Plus",
				"less": "Moins",
				"recentlyused": "Récemment utilisés",
				"languages": "Langues",
				"countries": "Pays"
			},
			"commentary": {
				"label": "Commentaire"
			},
			"map": {
				"label": "Cartes",
				"placeholder": "Recherche ..."
			},
			"search": {
				"label": "Recherche",
				"placeholder": "Recherche",
				"button": "Recherche",
				"results": "Résultats",
				"verses": "versets",
				"options": "options de recherche"
			},
			"media": {
				"label": "Médias"
			},
			"notes": {
				"label": "Remarques"
			},
			"audio": {
				"options": "Options audio",
				"synctext": "Synchronisation du texte (beta)",
				"autoplay": "Autoplay Suivant",
				"drama": "Drame",
				"nondrama": "Non Drame"
			},
			"parallel": {
				"label": "Parallels",
				"loading": "Chargement ...",
				"showall": "Tout afficher",
				"hideall": "Masquer tout"
			},
			"comparison": {
				"label": "Comparaison"
			}
		},
		"names": {
			"en": "French"
		}
	}
}

sofia.resources['de'] = {
	"translation": {
		"name": "Deutsch",
		"menu": {
			"search": {
				"placeholder": "Suche"
			},
			"config": {
				"font": "Schriftart",
				"settings": "Einstellungen",
				"tools": "Werkzeuge"
			},
			"reset": "zurücksetzen",
			"labels": {
				"about": "Über",
				"addwindow": "Neues Fenster",
				"settings": "Einstellungen",
				"feedback": "Rückmeldung",
				"options": "Optionen"
			},
			"feedback": {
				"name": "Name",
				"email": "E-Mail",
				"comments": "Ihre Kommentare",
				"feature": "Feature-Vorschlag",
				"bug": "Fehlerhinweis",
				"other": "Sonstiges",
				"send": "Absenden",
				"thankyou": "Vielen Dank für Ihre Rückmeldung"
			},
			"themes": {
				"default": "Normal",
				"sepia": "Sepia",
				"dark": "Wenig Licht"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "Visuelle Filter",
				"title": "Visuelle Filter",
				"newfilter": "Neuer Filter",
				"strongsnumber": "Strong #",
				"morphology": "Morphologie",
				"style": "Stil"
			},
			"eng2p": {
				"button": "2. Person Plural Englisch",
				"title": "Englisch Zweite Person Plural"
			},
			"lemmapopup": {
				"findalloccurrences": "Alle Vorkommen (etwa __count__)"
			}
		},
		"windows": {
			"deafbible": {
				"label": "Bibel für Taube"
			},
			"videobible": {
				"label": "Video-Bibel"
			},
			"bible": {
				"label": "Bibel",
				"filter": "Filter ...",
				"ot": "Altes Testament",
				"nt": "Neues Testament",
				"dc": "Deuterokanonische Bücher",
				"more": "Mehr",
				"less": "Weniger",
				"recentlyused": "Zuletzt verwendet",
				"languages": "Sprachen",
				"countries": "Länder",
				"lemma":"Griechisch/Hebräisch-Popups",
				"audio":"Audio verfügbar"
			},
			"commentary": {
				"label": "Kommentar"
			},
			"map": {
				"label": "Karten",
				"placeholder": "Suche ..."
			},
			"search": {
				"label": "Suche",
				"placeholder": "Suche",
				"button": "Suche",
				"results": "Ergebnisse",
				"verses": "Verse",
				"options": "Suchoptionen"
			},
			"media": {
				"label": "Medien"
			},
			"notes": {
				"label": "Notizen"
			},
			"audio": {
				"options": "Audio-Optionen",
				"synctext": "Text synchron halten (beta)",
				"autoplay": "Automatisch nächstes spielen",
				"drama": "Dramatisiert",
				"nondrama": "Vorgelesen"
			},
			"parallel": {
				"label": "Parallelstellen",
				"loading": "Wird geladen ...",
				"showall": "Alle anzeigen",
				"hideall": "Alle ausblenden"
			},
			"comparison": {
				"label": "Vergleich"
			},
			"stats": {
				"label": "Statistiken",
				"frequentwords":"Häufige Wörter"
			}
		},
		"names": {
			"en": "German"
		}
	}
}

sofia.resources['es'] = {
	"translation": {
		"name": "español",
		"menu": {
			"search": {
				"placeholder": "Búsqueda"
			},
			"config": {
				"font": "Fuente",
				"settings": "Configuración",
				"tools": "Instrumentos"
			},
			"reset": "reajustar",
			"labels": {
				"about": "Acerca de",
				"addwindow": "Añadir Ventana",
				"settings": "Ajustes",
				"feedback": "Realimentación",
				"options": "Opciones"
			},
			"feedback": {
				"name": "Nombre",
				"email": "Correo electrónico",
				"comments": "Sus comentarios",
				"feature": "Característica Sugerencia",
				"bug": "Informar de un error",
				"other": "Otro",
				"send": "Enviar",
				"thankyou": "Gracias por su colaboración"
			},
			"themes": {
				"default": "Normal",
				"sepia": "Sepia",
				"dark": "Luz baja"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "Visual Filtros",
				"title": "Visual Filtros",
				"newfilter": "Nuevo filtro",
				"strongsnumber": "Strong #",
				"morphology": "Morfología",
				"style": "Estilo"
			},
			"eng2p": {
				"button": "Inglés segunda persona del plural",
				"title": "Inglés Segunda Persona del Plural"
			},
			"lemmapopup": {
				"findalloccurrences": "Buscar todas las ocurrencias (aproximadamente __count__)"
			}
		},
		"windows": {
			"bible": {
				"label": "Biblia",
				"filter": "Filtro ...",
				"ot": "Antiguo Testamento",
				"nt": "Nuevo Testamento",
				"dc": "Libros Deuterocanónicos",
				"more": "Más",
				"less": "Menos",
				"recentlyused": "Usados ​​recientemente",
				"languages": "Idiomas",
				"countries": "Países"
			},
			"commentary": {
				"label": "Comentario"
			},
			"map": {
				"label": "Mapas",
				"placeholder": "Buscar ..."
			},
			"search": {
				"label": "Búsqueda",
				"placeholder": "Búsqueda",
				"button": "Búsqueda",
				"results": "Resultados",
				"verses": "versos",
				"options": "Opciones de Búsqueda"
			},
			"media": {
				"label": "Medios de comunicación"
			},
			"notes": {
				"label": "Notas"
			},
			"audio": {
				"options": "Opciones de audio",
				"synctext": "Sincronizar texto (beta)",
				"autoplay": "Reproducción automática Siguiente",
				"drama": "Drama",
				"nondrama": "No drama"
			},
			"parallel": {
				"label": "Paralelas",
				"loading": "Cargando ...",
				"showall": "Mostrar todo",
				"hideall": "Ocultar todo"
			},
			"comparison": {
				"label": "Comparación"
			}
		},
		"names": {
			"en": "Spanish"
		}
	}
}

sofia.resources['ru'] = {
	"translation": {
		"name": "русский",
		"menu": {
			"search": {
				"placeholder": "Поиск"
			},
			"config": {
				"font": "Шрифт",
				"settings": "Настройки",
				"tools": "Инструментарий"
			},
			"reset": "сброс",
			"themes": {
				"default": "Нормальный",
				"sepia": "Сепия",
				"dark": "Низкая освещенность"
			},
			"labels": {
				"about": "О",
				"addwindow": "Добавить окно",
				"settings": "Настройки",
				"feedback": "Обратная связь",
				"options": "Опции"
			},
			"feedback": {
				"name": "Имя",
				"email": "Email",
				"comments": "Ваши комментарии",
				"feature": "Особенность Предложение",
				"bug": "Сообщение об ошибке",
				"other": "Другой",
				"send": "Послать",
				"thankyou": "Спасибо за Ваш отзыв"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "Визуальные Фильтры",
				"title": "Визуальные Фильтры",
				"newfilter": "Новый фильтр",
				"strongsnumber": "# Стронга",
				"morphology": "Морфология",
				"style": "Стиль"
			},
			"eng2p": {
				"button": "Английский 2-го лица множественного числа",
				"title": "Английский Второе Лицо Множественное"
			},
			"lemmapopup": {
				"findalloccurrences": "Найти все вхождения (примерно __count__)"
			}
		},
		"windows": {
			"bible": {
				"label": "Библия",
				"filter": "Фильтр ...",
				"ot": "Ветхий Завет",
				"nt": "Новый Завет",
				"dc": "Второканонические книги",
				"more": "Более",
				"less": "Меньше",
				"recentlyused": "Недавно использованные",
				"languages": "Языки",
				"countries": "Страны"
			},
			"commentary": {
				"label": "Комментарий"
			},
			"map": {
				"label": "Карты",
				"placeholder": "Поиск ..."
			},
			"search": {
				"label": "Поиск",
				"placeholder": "Поиск",
				"button": "Поиск",
				"results": "Результаты",
				"verses": "вирши",
				"options": "Параметры поиска"
			},
			"media": {
				"label": "Средства массовой информации"
			},
			"notes": {
				"label": "Примечания"
			},
			"audio": {
				"options": "Audio Options",
				"synctext": "Синхронизация текст (бета-версия)",
				"autoplay": "Автозапуск Следующая",
				"drama": "Драма",
				"nondrama": "Номера для Драма"
			},
			"parallel": {
				"label": "Parallels",
				"loading": "Loading ...",
				"showall": "Показать все",
				"hideall": "Скрыть все"
			},
			"comparison": {
				"label": "Сравнение"
			}
		},
		"names": {
			"en": "Russian"
		}
	}
}

sofia.resources['hi'] = {
	"translation": {
		"name": "हिन्दी",
		"menu": {
			"search": {
				"placeholder": "खोज"
			},
			"config": {
				"font": "फ़ॉन्ट",
				"settings": "सेटिंग",
				"tools": "उपकरण"
			},
			"tools": {
				"visualfilters": "विजुअल फ़िल्टर",
				"eng2p": "अंग्रेजी 2 व्यक्ति बहुवचन"
			},
			"reset": "रीसेट",
			"themes": {
				"default": "साधारण",
				"sepia": "एक प्रकार की मछली",
				"dark": "कम रोशनी"
			},
			"labels": {
				"about": "तकरीबन",
				"addwindow": "खिड़की जोड़ें",
				"settings": "सेटिंग्स",
				"feedback": "प्रतिक्रिया",
				"options": "विकल्प"
			},
			"feedback": {
				"name": "नाम",
				"email": "ईमेल",
				"comments": "आपकी टिप्पणी",
				"feature": "सुविधा सुझाव",
				"bug": "बग रिपोर्ट",
				"other": "अन्य",
				"send": "भेजो",
				"thankyou": "आपकी प्रतिक्रिया के लिए धन्यवाद"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "विजुअल फ़िल्टर",
				"title": "विजुअल फ़िल्टर",
				"newfilter": "नया फ़िल्टर",
				"strongsnumber": "मजबूत #",
				"morphology": "आकृति विज्ञान",
				"style": "शैली"
			},
			"eng2p": {
				"button": "अंग्रेजी 2 व्यक्ति बहुवचन",
				"title": "अंग्रेजी 2 व्यक्ति बहुवचन"
			},
			"lemmapopup": {
				"findalloccurrences": "सभी घटनाओं का पता (लगभग __count__)"
			}
		},
		"windows": {
			"bible": {
				"label": "बाइबल",
				"filter": "तक...",
				"ot": "ओल्ड टेस्टामेंट",
				"nt": "न्यू टेस्टामेंट",
				"dc": "Deuterocanonical Books",
				"more": "अधिक",
				"less": "कम",
				"recentlyused": "हाल ही में प्रयुक्त",
				"languages": "भाषाएँ",
				"countries": "देश"
			},
			"commentary": {
				"label": "टीका"
			},
			"map": {
				"label": "मानचित्र",
				"placeholder": "खोज..."
			},
			"search": {
				"label": "खोज",
				"placeholder": "खोज",
				"button": "खोज",
				"results": "परिणाम",
				"verses": "छंद",
				"options": "खोज विकल्प"
			},
			"media": {
				"label": "मीडिया"
			},
			"notes": {
				"label": "नोट्स"
			},
			"audio": {
				"options": "ऑडियो विकल्प",
				"synctext": "सिंक पाठ ( बीटा )",
				"autoplay": "ऑटोप्ले अगला",
				"drama": "ड्रामा",
				"nondrama": "गैर ड्रामा"
			},
			"parallel": {
				"label": "समानताएं",
				"loading": "लोडिंग ...",
				"showall": "सब दिखाएं",
				"hideall": "सभी छुपाएं"
			},
			"comparison": {
				"label": "तुलना"
			}
		},
		"names": {
			"en": "Hindi"
		}
	}
}

sofia.resources['ar'] = {
	"translation": {
		"name": "العربية",
		"menu": {
			"search": {
				"placeholder": "بحث"
			},
			"config": {
				"font": "الخط",
				"settings": "إعدادات",
				"tools": "أدوات"
			},
			"reset": "إعادة ضبط",
			"themes": {
				"default": "افتراضي",
				"sepia": "بني داكن",
				"dark": "خلفيفة غامقة"
			},
			"labels": {
				"about": "حول",
				"addwindow": "إضافة النافذة",
				"settings": "الإعدادات",
				"feedback": "ردود الفعل",
				"options": "خيارات"
			},
			"feedback": {
				"name": "اسم",
				"email": "البريد الإلكتروني",
				"comments": "تحديثاتك",
				"feature": "ميزة اقتراح",
				"bug": "تقرير علة",
				"other": "آخر",
				"send": "إرسال",
				"thankyou": "شكرا لملاحظاتك"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "مرشحات بصرية",
				"title": "مرشحات بصرية",
				"newfilter": "مرشح جديد",
				"strongsnumber": "رقم فهرس سترونج",
				"morphology": "لغويات",
				"style": "أسلوب"
			},
			"eng2p": {
				"button": "استخدام كلمة أنت للجمع في الإنجليزية",
				"title": "استخدام كلمة أنت للجمع في الإنجليزية"
			},
			"lemmapopup": {
				"findalloccurrences": "بحث كل الحالات"
			}
		},
		"windows": {
			"bible": {
				"label": "الكتاب المقدس",
				"filter": "ترشيح القائمة",
				"ot": "العهد القديم",
				"nt": "العهد الجديد",
				"dc": "الأسفار القانونية",
				"more": "أكثر",
				"less": "أقل",
				"recentlyused": "المستخدمة مؤخرا",
				"languages": "اللغات",
				"countries": "الدول"
			},
			"commentary": {
				"label": "تفاسير"
			},
			"map": {
				"label": "خرائط",
				"placeholder": "بحث"
			},
			"search": {
				"label": "بحث",
				"placeholder": "بحث",
				"button": "بحث",
				"results": "النتائج",
				"verses": "الآيات",
				"options": "خيارات أكثر للبحث"
			},
			"media": {
				"label": "سمعيات وبصريات"
			},
			"notes": {
				"label": "ملاحظات"
			},
			"audio": {
				"options": "خيارات الصوت",
				"synctext": "تحريك النص مع الصوت",
				"autoplay": "تشغيل الأصحاح التالي تلقائياً",
				"drama": "قراءة درامية",
				"nondrama": "قراءة غير درامية"
			},
			"parallel": {
				"label": "المتوازيات",
				"loading": "تحميل ...",
				"showall": "عرض جميع",
				"hideall": "إخفاء الكل"
			},
			"comparison": {
				"label": "مقارنة"
			}
		},
		"names": {
			"en": "Arabic"
		}
	}
}

sofia.resources['af'] = {
	"translation": {
		"name": "Afrikaans",
		"menu": {
			"search": {
				"placeholder": "Soek"
			},
			"config": {
				"font": "Skrif",
				"settings": "Instellings",
				"tools": "Gereedskap"
			},
			"reset": "herstel",
			"themes": {
				"default": "Normale",
				"sepia": "Sepia",
				"dark": "Lae lig"
			},
			"labels": {
				"about": "Oor",
				"addwindow": "Voeg Venster",
				"settings": "Instellings",
				"feedback": "Terugvoer",
				"options": "Opsies"
			},
			"feedback": {
				"name": "Naam",
				"email": "E-pos",
				"comments": "Jou kommentaar",
				"feature": "Funksie Voorstelle",
				"bug": "Bug Rapporteer",
				"other": "Ander",
				"send": "Stuur",
				"thankyou": "Dankie vir jou terugvoer"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "Visuele Filters",
				"title": "Visuele Filters",
				"newfilter": "Nuwe weergawe",
				"strongsnumber": "Strong&#39;s #",
				"morphology": "Morfologie",
				"style": "Style"
			},
			"eng2p": {
				"button": "Engels 2de persoon meervoud",
				"title": "Engels Tweede persoon meervoud"
			},
			"lemmapopup": {
				"findalloccurrences": "Vind alle gebeurtenisse (ongeveer __count__)"
			}
		},
		"windows": {
			"bible": {
				"label": "Bybel",
				"filter": "Filter ...",
				"ot": "Ou Testament",
				"nt": "Nuwe Testament",
				"dc": "Deuterokanonieke Boeke",
				"more": "Meer",
				"less": "Minder",
				"recentlyused": "Onlangs gebruik",
				"languages": "Tale",
				"countries": "Lande"
			},
			"commentary": {
				"label": "Kommentaar"
			},
			"map": {
				"label": "Kaarte",
				"placeholder": "Soek ..."
			},
			"search": {
				"label": "Soek",
				"placeholder": "Soek",
				"button": "Soek",
				"results": "Resultate",
				"verses": "verse",
				"options": "Soek opsies"
			},
			"media": {
				"label": "Media"
			},
			"notes": {
				"label": "Notes"
			},
			"audio": {
				"options": "Audio Options",
				"synctext": "Sinkroniseer teks (beta)",
				"autoplay": "Vakansie speel Volgende",
				"drama": "Drama",
				"nondrama": "Nie-Drama"
			},
			"parallel": {
				"label": "Parallelle",
				"loading": "Laai ...",
				"showall": "Wys Alle",
				"hideall": "Verberg Alle"
			},
			"comparison": {
				"label": "Vergelyking"
			}
		},
		"names": {
			"en": "Afrikaans"
		}
	}
}

sofia.resources['bn'] = {
	"translation": {
		"name": "বাংলা",
		"menu": {
			"search": {
				"placeholder": "অনুসন্ধান"
			},
			"config": {
				"font": "ফন্ট",
				"settings": "সেটিংস",
				"tools": "সরঞ্জাম"
			},
			"reset": "রিসেট করুন",
			"themes": {
				"default": "স্বাভাবিক",
				"sepia": "ছবি আঁকার একধরনের কালচে - বাদামী রং",
				"dark": "কম আলো"
			},
			"labels": {
				"about": "প্রায়",
				"addwindow": "যোগ উইন্ডো",
				"settings": "সেটিংস",
				"feedback": "প্রতিক্রিয়া",
				"options": "বিকল্প"
			},
			"feedback": {
				"name": "নাম",
				"email": "ইমেল",
				"comments": "আপনার মন্তব্য",
				"feature": "বৈশিষ্ট্য পরামর্শ",
				"bug": "বাগ রিপোর্ট",
				"other": "অন্যান্য",
				"send": "পাঠান",
				"thankyou": "আপনার প্রতিক্রিয়ার জন্য ধন্যবাদ"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "ভিসুয়াল ফিল্টার",
				"title": "ভিসুয়াল ফিল্টার",
				"newfilter": "নতুন ফিল্টার",
				"strongsnumber": "এর স্ট্রং #",
				"morphology": "অঙ্গসংস্থানবিদ্যা",
				"style": "শৈলী"
			},
			"eng2p": {
				"button": "ইংরেজি 2nd ব্যক্তি বহুবচন",
				"title": "ইংরেজি দ্বিতীয় ব্যক্তি বহুবচন"
			},
			"lemmapopup": {
				"findalloccurrences": "সব ঘটনার খুঁজুন (আনুমানিক __count__)"
			}
		},
		"windows": {
			"bible": {
				"label": "বাইবেল",
				"filter": "ফিল্টার ...",
				"ot": "ওল্ড টেস্টামেন্ট",
				"nt": "নববিধান",
				"dc": "Deuterocanonical বই",
				"more": "অধিক",
				"less": "কম",
				"recentlyused": "সম্প্রতি ব্যবহৃত",
				"languages": "ভাষা",
				"countries": "দেশ সমূহ"
			},
			"commentary": {
				"label": "ভাষ্য"
			},
			"map": {
				"label": "মানচিত্র",
				"placeholder": "অনুসন্ধান ..."
			},
			"search": {
				"label": "অনুসন্ধান",
				"placeholder": "অনুসন্ধান",
				"button": "অনুসন্ধান",
				"results": "ফলাফল",
				"verses": "আয়াত",
				"options": "অনুসন্ধান বিকল্প"
			},
			"media": {
				"label": "মিডিয়া"
			},
			"notes": {
				"label": "নোট"
			},
			"audio": {
				"options": "অডিও বিকল্প",
				"synctext": "সিঙ্ক টেক্সট (বিটা)",
				"autoplay": "অটোপ্লে পরবর্তী",
				"drama": "নাটক",
				"nondrama": "অ নাটক"
			},
			"parallel": {
				"label": "সমান্তরাল",
				"loading": "লোড হচ্ছে ...",
				"showall": "সমস্ত দেখান",
				"hideall": "সমস্ত লুকান"
			},
			"comparison": {
				"label": "তুলনা"
			}
		},
		"names": {
			"en": "Bengali"
		}
	}
}

sofia.resources['id'] = {
	"translation": {
		"name": "Bahasa Indonesia",
		"menu": {
			"search": {
				"placeholder": "Pencarian"
			},
			"config": {
				"font": "Fon",
				"settings": "Pengaturan",
				"tools": "Alat"
			},
			"reset": "ulang",
			"themes": {
				"default": "Normal",
				"sepia": "Warna coklat tua",
				"dark": "Cahaya Rendah"
			},
			"labels": {
				"about": "Tentang",
				"addwindow": "Tambahkan Jendela",
				"settings": "Pengaturan",
				"feedback": "Umpan Balik",
				"options": "Pilihan"
			},
			"feedback": {
				"name": "Nama",
				"email": "Email",
				"comments": "Komentar Anda",
				"feature": "Fitur Saran",
				"bug": "Bug Report",
				"other": "Yang Lainnya",
				"send": "Mengirim",
				"thankyou": "Terima kasih atas tanggapan Anda"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "Visual Filter",
				"title": "Visual Filter",
				"newfilter": "Filter baru",
				"strongsnumber": "Strong #",
				"morphology": "Morfologi",
				"style": "Gaya"
			},
			"eng2p": {
				"button": "English 2 Orang Plural",
				"title": "English Kedua Orang Plural"
			},
			"lemmapopup": {
				"findalloccurrences": "Cari semua kejadian (sekitar __count__)"
			}
		},
		"windows": {
			"bible": {
				"label": "Alkitab",
				"filter": "Filter ...",
				"ot": "Perjanjian Lama",
				"nt": "Perjanjian Baru",
				"dc": "Deuterokanonika Books",
				"more": "Lebih",
				"less": "Kurang",
				"recentlyused": "Baru Digunakan",
				"languages": "Bahasa",
				"countries": "Negara"
			},
			"commentary": {
				"label": "Komentar"
			},
			"map": {
				"label": "Peta",
				"placeholder": "Cari ..."
			},
			"search": {
				"label": "Pencarian",
				"placeholder": "Pencarian",
				"button": "Pencarian",
				"results": "Hasil",
				"verses": "ayat",
				"options": "Opsi pencarian"
			},
			"media": {
				"label": "Media"
			},
			"notes": {
				"label": "Catatan"
			},
			"audio": {
				"options": "Audio Pilihan",
				"synctext": "Sync Text (beta)",
				"autoplay": "Autoplay Berikutnya",
				"drama": "Drama",
				"nondrama": "Non-Drama"
			},
			"parallel": {
				"label": "Parallels",
				"loading": "Loading ...",
				"showall": "Tampilkan Semua",
				"hideall": "Sembunyikan Semua"
			},
			"comparison": {
				"label": "Perbandingan"
			}
		},
		"names": {
			"en": "Indonesian"
		}
	}
}

sofia.resources['sw'] = {
	"translation": {
		"name": "Kiswahili",
		"menu": {
			"search": {
				"placeholder": "Search"
			},
			"config": {
				"font": "Font",
				"settings": "Mazingira",
				"tools": "Vyombo vya"
			},
			"reset": "upya",
			"themes": {
				"default": "Kawaida",
				"sepia": "Sepia",
				"dark": "Low Mwanga"
			},
			"labels": {
				"about": "Kuhusu",
				"addwindow": "Kuongeza Window",
				"settings": "Mipangilio",
				"feedback": "Maoni",
				"options": "Options"
			},
			"feedback": {
				"name": "Jina",
				"email": "Email",
				"comments": "Maoni yako",
				"feature": "Feature Maoni",
				"bug": "Bug Ripoti",
				"other": "Nyingine",
				"send": "Kutuma",
				"thankyou": "Asante sana kwa maoni yako"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "Visual Filters",
				"title": "Visual Filters",
				"newfilter": "New Filter",
				"strongsnumber": "Nguvu ya #",
				"morphology": "Maumbile",
				"style": "Mtindo"
			},
			"eng2p": {
				"button": "English 2 Mtu vyama vingi",
				"title": "Kiingereza Pili Mtu vyama vingi"
			},
			"lemmapopup": {
				"findalloccurrences": "Kupata matukio yote (takriban __count__)"
			}
		},
		"windows": {
			"bible": {
				"label": "Biblia",
				"filter": "Filter ...",
				"ot": "Agano la Kale",
				"nt": "New Testament",
				"dc": "Deuterocanonical vitabu",
				"more": "Zaidi",
				"less": "Chini ya",
				"recentlyused": "Kutumika hivi karibuni",
				"languages": "Lugha",
				"countries": "Nchi"
			},
			"commentary": {
				"label": "Ufafanuzi"
			},
			"map": {
				"label": "Ramani",
				"placeholder": "Search ..."
			},
			"search": {
				"label": "Search",
				"placeholder": "Search",
				"button": "Search",
				"results": "Matokeo",
				"verses": "mistari",
				"options": "Search Options"
			},
			"media": {
				"label": "Vyombo vya habari"
			},
			"notes": {
				"label": "Maelezo"
			},
			"audio": {
				"options": "Chaguzi Audio",
				"synctext": "Sync Nakala (beta)",
				"autoplay": "Autoplay Ifwatayo",
				"drama": "Mchezo wa kuigiza",
				"nondrama": "Mashirika yasiyo ya Drama"
			},
			"parallel": {
				"label": "Sambamba",
				"loading": "Loading ...",
				"showall": "Kuonyesha wote",
				"hideall": "Ficha All"
			},
			"comparison": {
				"label": "Kulinganisha"
			}
		},
		"names": {
			"en": "Swahili"
		}
	}
}

sofia.resources['tr'] = {
	"translation": {
		"name": "Türkçe",
		"menu": {
			"search": {
				"placeholder": "Arama"
			},
			"config": {
				"font": "Stil",
				"settings": "Ayarlar",
				"tools": "Araçlar"
			},
			"reset": "sıfırla",
			"themes": {
				"default": "Açık",
				"sepia": "Sepya",
				"dark": "Koyu"
			},
			"labels": {
				"about": "Hakkında",
				"addwindow": "Pencere ekle",
				"settings": "Ayarlar",
				"feedback": "Geribesleme",
				"options": "Seçenekler"
			},
			"feedback": {
				"name": "Isim",
				"email": "E-posta",
				"comments": "Yorumlarınız",
				"feature": "Özellik Öneri",
				"bug": "Hata Raporu",
				"other": "Diğer",
				"send": "Göndermek",
				"thankyou": "Görüşleriniz için teşekkür ederiz"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "Görsel Filtreler",
				"title": "Görsel Filtreler",
				"newfilter": "Yeni Filtre",
				"strongsnumber": "Strong #",
				"morphology": "Biçimbilgisi",
				"style": "Stil"
			},
			"eng2p": {
				"button": "İngilizce 2. Kişi Çoğul",
				"title": "İngilizce İkinci Kişi Çoğul"
			},
			"lemmapopup": {
				"findalloccurrences": "Tüm örneği bul (yaklaşık __count__)"
			}
		},
		"windows": {
			"bible": {
				"label": "Katsal Kitap",
				"filter": "Filtre ...",
				"ot": "Eski Antlaşma",
				"nt": "Yeni Antlaşma",
				"dc": "Apokrif",
				"more": "Daha fazla",
				"less": "Daha az",
				"recentlyused": "Son Kullanılan",
				"languages": "Diller",
				"countries": "Ülkeler"
			},
			"commentary": {
				"label": "Açıklamalar"
			},
			"map": {
				"label": "Haritalar",
				"placeholder": "Arama..."
			},
			"search": {
				"label": "Arama",
				"placeholder": "Arama",
				"button": "Arama",
				"results": "Sonuçlar",
				"verses": "ayetler",
				"options": "Arama Seçenekleri"
			},
			"parallel": {
				"label": "Paralellik",
				"loading": "Yükleniyor...",
				"showall": "Hepsi Göster",
				"hideall": "Hepsi Gizle"
			},
			"media": {
				"label": "Medya"
			},
			"notes": {
				"label": "Notlar"
			},
			"audio": {
				"options": "Ses Seçenekleri",
				"synctext": "Sütün Eşleşme (beta)",
				"autoplay": "Otomatik Yürüt",
				"drama": "Dramatize Edilmiş",
				"nondrama": "Tekil Konuşma"
			},
			"comparison": {
				"label": "Karşılaştırma"
			}
		},
		"names": {
			"en": "Turkish",
			"de": "Türkisch",
			"zh-TW": "英語",
			"zh-CN": "英语",
			"es": "Turco",
			"fr": "turc"
		}
	}
}

sofia.resources['ja'] = {
	"translation": {
		"name": "日本語",
		"menu": {
			"search": {
				"placeholder": "検索"
			},
			"config": {
				"font": "フォント",
				"settings": "[設定]",
				"tools": "ツール"
			},
			"reset": "リセット",
			"themes": {
				"default": "通常の",
				"sepia": "セピア",
				"dark": "微光"
			},
			"labels": {
				"about": "約",
				"addwindow": "ウィンドウを追加",
				"settings": "[設定]",
				"feedback": "フィードバック",
				"options": "オプション"
			},
			"feedback": {
				"name": "名前",
				"email": "メール",
				"comments": "あなたのコメント",
				"feature": "フィーチャー提案",
				"bug": "バグレポート",
				"other": "その他",
				"send": "送信する",
				"thankyou": "ご協力ありがとうございました"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "視覚的なフィルタ",
				"title": "視覚的なフィルタ",
				"newfilter": "新しいフィルタ",
				"strongsnumber": "の強い＃",
				"morphology": "形態学",
				"style": "スタイル"
			},
			"eng2p": {
				"button": "英語第二人は複数",
				"title": "英語二人目は複数"
			},
			"lemmapopup": {
				"findalloccurrences": "すべて検索（約__count__）"
			}
		},
		"windows": {
			"bible": {
				"label": "聖書",
				"filter": "フィルタ...",
				"ot": "旧約聖書",
				"nt": "新約聖書",
				"dc": "第二正典",
				"more": "もっと",
				"less": "レス",
				"recentlyused": "最近使用された",
				"languages": "言語",
				"countries": "国"
			},
			"commentary": {
				"label": "解説"
			},
			"map": {
				"label": "地図",
				"placeholder": "検索..."
			},
			"search": {
				"label": "検索",
				"placeholder": "検索",
				"button": "検索",
				"results": "結果",
				"verses": "詩",
				"options": "検索オプション"
			},
			"media": {
				"label": "メディア"
			},
			"notes": {
				"label": "注釈"
			},
			"audio": {
				"options": "オーディオオプション",
				"synctext": "同期テキスト（ベータ版）",
				"autoplay": "自動再生次",
				"drama": "ドラマ",
				"nondrama": "非ドラマ"
			},
			"parallel": {
				"label": "Parallelsの",
				"loading": "読み込んでいます...",
				"showall": "すべて表示",
				"hideall": "すべて非表示にする"
			},
			"comparison": {
				"label": "比較"
			}
		},
		"names": {
			"en": "Japanese"
		}
	}
}

sofia.resources['zh-CN'] = {
	"translation": {
		"name": "中文",
		"menu": {
			"search": {
				"placeholder": "搜索"
			},
			"config": {
				"font": "字体",
				"settings": "设置",
				"tools": "工具"
			},
			"reset": "复位"
		},
		"plugins": {
			"visualfilters": {
				"button": "视觉过滤器",
				"title": "视觉过滤器"
			},
			"eng2p": {
				"button": "英语第二人称复数",
				"title": "英语第二人称复数"
			}
		},
		"windows": {
			"bible": {
				"label": "圣经",
				"filter": "过滤器...",
				"ot": "旧约",
				"nt": "新约圣经",
				"dc": "经书"
			},
			"commentary": {
				"label": "解说"
			},
			"map": {
				"label": "地图",
				"placeholder": "搜索..."
			},
			"search": {
				"label": "搜索",
				"placeholder": "搜索",
				"button": "搜索",
				"results": "结果",
				"verses": "诗"
			},
			"media": {
				"label": "媒体"
			},
			"notes": {
				"label": "注意"
			},
			"audio": {
				"options": "音频选项",
				"synctext": "同步文本（测试版）",
				"autoplay": "自动播放下一个",
				"drama": "戏剧",
				"nondrama": "非戏剧"
			}
		},
		"names": {
			"en": "Chinese - Simplified"
		}
	}
}

sofia.resources['zh-TW'] = {
	"translation": {
		"name": "中文(繁體)",
		"menu": {
			"search": {
				"placeholder": "搜索"
			},
			"config": {
				"font": "字形",
				"settings": "設置",
				"tools": "工具"
			},
			"reset": "重置",
			"themes": {
				"default": "正常",
				"sepia": "烏賊",
				"dark": "弱光"
			},
			"labels": {
				"about": "大約",
				"addwindow": "添加窗口",
				"settings": "設置",
				"feedback": "信息反饋",
				"options": "選項"
			},
			"feedback": {
				"name": "名字",
				"email": "電子郵件",
				"comments": "您的意見",
				"feature": "功能建議",
				"bug": "錯誤報告",
				"other": "其他",
				"send": "發送",
				"thankyou": "感謝您的反饋"
			}
		},
		"plugins": {
			"visualfilters": {
				"button": "視覺過濾器",
				"title": "視覺過濾器",
				"newfilter": "新的過濾器",
				"strongsnumber": "強烈的＃",
				"morphology": "形態學",
				"style": "風格"
			},
			"eng2p": {
				"button": "英語第二人稱複數",
				"title": "英語第二人稱複數"
			},
			"lemmapopup": {
				"findalloccurrences": "查找所有出現（約__count__）"
			}
		},
		"windows": {
			"bible": {
				"label": "聖經",
				"filter": "過濾...",
				"ot": "舊約全書",
				"nt": "新約全書",
				"dc": "經書",
				"more": "更多",
				"less": "少",
				"recentlyused": "最近使用",
				"languages": "語言",
				"countries": "國家"
			},
			"commentary": {
				"label": "評論"
			},
			"map": {
				"label": "地圖",
				"placeholder": "搜索..."
			},
			"search": {
				"label": "搜索",
				"placeholder": "搜索",
				"button": "搜索",
				"results": "結果",
				"verses": "經文",
				"options": "搜索選項"
			},
			"media": {
				"label": "媒體"
			},
			"notes": {
				"label": "筆記"
			},
			"audio": {
				"options": "音頻選項",
				"synctext": "同步文本（測試版）",
				"autoplay": "自動播放下一頁",
				"drama": "戲劇",
				"nondrama": "非戲劇"
			},
			"parallel": {
				"label": "相似之處",
				"loading": "加載中...",
				"showall": "顯示全部",
				"hideall": "全部隱藏"
			},
			"comparison": {
				"label": "對照"
			}
		},
		"names": {
			"en": "Chinese - Traditional"
		}
	}
}

window.data = window.data || {};

data.language = {

	rtl: ['ar','arz','arc','dv','fa','ha','he','heb','khw','ks','ku','ps','ur','yi'],

	isRTL: function(lang) {
		return data.language.rtl.indexOf(lang) > -1;
	},

	codes:  {
		ara: 'Afar',
		abk: 'Abkhazian',
		ace: 'Achinese',
		ach: 'Acoli',
		ada: 'Adangme',
		ady: 'Adyghe; Adygei',
		afa: 'Afro-Asiatic languages',
		afh: 'Afrihili',
		afr: 'Afrikaans',
		ain: 'Ainu',
		aka: 'Akan',
		akk: 'Akkadian',
		alb: 'Albanian',
		ale: 'Aleut',
		alg: 'Algonquian languages',
		alt: 'Southern Altai',
		amh: 'Amharic',
		anp: 'Angika',
		apa: 'Apache languages',
		ara: 'Arabic',
		arg: 'Aragonese',
		arm: 'Armenian',
		arn: 'Mapudungun',
		arp: 'Arapaho',
		arw: 'Arawak',
		asm: 'Assamese',
		ast: 'Asturian',
		ath: 'Athapascan languages',
		aus: 'Australian languages',
		ava: 'Avaric',
		ave: 'Avestan',
		awa: 'Awadhi',
		aym: 'Aymara',
		aze: 'Azerbaijani',
		bad: 'Banda languages',
		bai: 'Bamileke languages',
		bak: 'Bashkir',
		bal: 'Baluchi',
		bam: 'Bambara',
		ban: 'Balinese',
		baq: 'Basque',
		bas: 'Basa',
		bat: 'Baltic languages',
		bej: 'Beja; Bedawiyet',
		bel: 'Belarusian',
		bem: 'Bemba',
		ben: 'Bengali',
		ber: 'Berber languages',
		bho: 'Bhojpuri',
		bih: 'Bihari languages',
		bik: 'Bikol',
		bin: 'Bini; Edo',
		bis: 'Bislama',
		bla: 'Siksika',
		bnt: 'Bantu languages',
		tib: 'Tibetan',
		bos: 'Bosnian',
		bra: 'Braj',
		bre: 'Breton',
		btk: 'Batak languages',
		bua: 'Buriat',
		bug: 'Buginese',
		bul: 'Bulgarian',
		bur: 'Burmese',
		byn: 'Blin',
		cad: 'Caddo',
		cai: 'Central American Indian languages',
		car: 'Galibi Carib',
		cat: 'Catalan; Valencian',
		cau: 'Caucasian languages',
		ceb: 'Cebuano',
		cel: 'Celtic languages',
		cze: 'Czech',
		cha: 'Chamorro',
		chb: 'Chibcha',
		che: 'Chechen',
		chg: 'Chagatai',
		chi: 'Chinese',
		chk: 'Chuukese',
		chm: 'Mari',
		chn: 'Chinook jargon',
		cho: 'Choctaw',
		chp: 'Chipewyan; Dene Suline',
		chr: 'Cherokee',
		chu: 'Old Slavonic',
		chv: 'Chuvash',
		chy: 'Cheyenne',
		cmc: 'Chamic languages',
		cop: 'Coptic',
		cor: 'Cornish',
		cos: 'Corsican',
		cre: 'Cree',
		crh: 'Crimean Tatar',
		crp: 'Creoles and pidgins',
		csb: 'Kashubian',
		cus: 'Cushitic languages',
		wel: 'Welsh',
		cze: 'Czech',
		dak: 'Dakota',
		dan: 'Danish',
		dar: 'Dargwa',
		day: 'Land Dayak languages',
		del: 'Delaware',
		den: 'Slave',
		ger: 'German',
		dgr: 'Dogrib',
		din: 'Dinka',
		div: 'Divehi',
		doi: 'Dogri',
		dra: 'Dravidian languages',
		dsb: 'Lower Sorbian',
		dua: 'Duala',
		dum: 'Dutch',
		dut: 'Dutch; Flemish',
		dyu: 'Dyula',
		dzo: 'Dzongkha',
		efi: 'Efik',
		eka: 'Ekajuk',
		gre: 'Greek',
		elx: 'Elamite',
		eng: 'English',
		engn: 'English Commentaries',
		epo: 'Esperanto',
		est: 'Estonian',
		baq: 'Basque',
		ewe: 'Ewe',
		ewo: 'Ewondo',
		fan: 'Fang',
		fao: 'Faroese',
		per: 'Persian',
		fat: 'Fanti',
		fij: 'Fijian',
		fil: 'Filipino; Pilipino',
		fin: 'Finnish',
		fiu: 'Finno-Ugrian languages',
		fon: 'Fon',
		fre: 'French',
		frr: 'Northern Frisian',
		frs: 'Eastern Frisian',
		fry: 'Western Frisian',
		ful: 'Fulah',
		fur: 'Friulian',
		gaa: 'Ga',
		gay: 'Gayo',
		gba: 'Gbaya',
		gem: 'Germanic languages',
		geo: 'Georgian',
		gez: 'Geez',
		gil: 'Gilbertese',
		gla: 'Gaelic',
		gle: 'Irish',
		glg: 'Galician',
		glv: 'Manx',
		gon: 'Gondi',
		gor: 'Gorontalo',
		got: 'Gothic',
		grb: 'Grebo',
		gre: 'Greek',
		grn: 'Guarani',
		gsw: 'Swiss German',
		guj: 'Gujarati',
		gwi: 'Gwich\'in',
		hai: 'Haida',
		hat: 'Haitian',
		hau: 'Hausa',
		haw: 'Hawaiian',
		heb: 'Hebrew',
		her: 'Herero',
		hil: 'Hiligaynon',
		him: 'Himachali languages; Western Pahari languages',
		hin: 'Hindi',
		hit: 'Hittite',
		hmn: 'Hmong; Mong',
		hmo: 'Hiri Motu',
		hrv: 'Croatian',
		hsb: 'Upper Sorbian',
		hun: 'Hungarian',
		hup: 'Hupa',
		arm: 'Armenian',
		iba: 'Iban',
		ibo: 'Igbo',
		ice: 'Icelandic',
		ido: 'Ido',
		iii: 'Sichuan Yi',
		ijo: 'Ijo languages',
		iku: 'Inuktitut',
		ile: 'Interlingue; Occidental',
		ilo: 'Iloko',
		inc: 'Indic languages',
		ind: 'Indonesian',
		ine: 'Indo-European languages',
		inh: 'Ingush',
		ipk: 'Inupiaq',
		ira: 'Iranian languages',
		iro: 'Iroquoian languages',
		ice: 'Icelandic',
		ita: 'Italian',
		jav: 'Javanese',
		jbo: 'Lojban',
		jpn: 'Japanese',
		jpr: 'Judeo-Persian',
		jrb: 'Judeo-Arabic',
		kaa: 'Kara-Kalpak',
		kab: 'Kabyle',
		kac: 'Kachin; Jingpho',
		kal: 'Kalaallisut; Greenlandic',
		kam: 'Kamba',
		kan: 'Kannada',
		kar: 'Karen languages',
		kas: 'Kashmiri',
		geo: 'Georgian',
		kau: 'Kanuri',
		kaw: 'Kawi',
		kaz: 'Kazakh',
		kbd: 'Kabardian',
		kha: 'Khasi',
		khi: 'Khoisan languages',
		khm: 'Central Khmer',
		kho: 'Khotanese; Sakan',
		kik: 'Kikuyu; Gikuyu',
		kin: 'Kinyarwanda',
		kir: 'Kirghiz; Kyrgyz',
		kmb: 'Kimbundu',
		kok: 'Konkani',
		kom: 'Komi',
		kon: 'Kongo',
		kor: 'Korean',
		kos: 'Kosraean',
		kpe: 'Kpelle',
		krc: 'Karachay-Balkar',
		krl: 'Karelian',
		kro: 'Kru languages',
		kru: 'Kurukh',
		kua: 'Kuanyama',
		kum: 'Kumyk',
		kur: 'Kurdish',
		kut: 'Kutenai',
		lad: 'Ladino',
		lah: 'Lahnda',
		lam: 'Lamba',
		lao: 'Lao',
		lat: 'Latin',
		lav: 'Latvian',
		lez: 'Lezghian',
		lim: 'Limburgan',
		lin: 'Lingala',
		lit: 'Lithuanian',
		lol: 'Mongo',
		loz: 'Lozi',
		ltz: 'Luxembourgish; Letzeburgesch',
		lua: 'Luba-Lulua',
		lub: 'Luba-Katanga',
		lug: 'Ganda',
		lui: 'Luiseno',
		lun: 'Lunda',
		luo: 'Luo (Kenya and Tanzania)',
		lus: 'Lushai',
		mac: 'Macedonian',
		mad: 'Madurese',
		mag: 'Magahi',
		mah: 'Marshallese',
		mai: 'Maithili',
		mak: 'Makasar',
		mal: 'Malayalam',
		man: 'Mandingo',
		mao: 'Maori',
		map: 'Austronesian languages',
		mar: 'Marathi',
		mas: 'Masai',
		may: 'Malay',
		mdf: 'Moksha',
		mdr: 'Mandar',
		men: 'Mende',
		mic: 'Mi\'kmaq; Micmac',
		min: 'Minangkabau',
		mac: 'Macedonian',
		mkh: 'Mon-Khmer languages',
		mlg: 'Malagasy',
		mlt: 'Maltese',
		mnc: 'Manchu',
		mni: 'Manipuri',
		mno: 'Manobo languages',
		moh: 'Mohawk',
		mon: 'Mongolian',
		mos: 'Mossi',
		mao: 'Maori',
		may: 'Malay',
		mul: 'Multiple languages',
		mun: 'Munda languages',
		mus: 'Creek',
		mwl: 'Mirandese',
		mwr: 'Marwari',
		bur: 'Burmese',
		myn: 'Mayan languages',
		myv: 'Erzya',
		nah: 'Nahuatl languages',
		nai: 'North American Indian languages',
		nap: 'Neapolitan',
		nau: 'Nauru',
		nav: 'Navajo; Navaho',
		nbl: 'Ndebele South',
		nde: 'Ndebele North',
		ndo: 'Ndonga',
		nep: 'Nepali',
		nia: 'Nias',
		nic: 'Niger-Kordofanian languages',
		niu: 'Niuean',
		dut: 'Dutch',
		nno: 'Norwegian Nynorsk',
		nob: 'Bokmål, Norwegian',
		nog: 'Nogai',
		nor: 'Norwegian',
		nqo: 'N\'Ko',
		nso: 'Pedi; Sepedi; Northern Sotho',
		nub: 'Nubian languages',
		nwc: 'Classical Newari; Old Newari; Classical Nepal Bhasa',
		nya: 'Chichewa; Chewa; Nyanja',
		nym: 'Nyamwezi',
		nyn: 'Nyankole',
		nyo: 'Nyoro',
		nzi: 'Nzima',
		oci: 'Occitan (post 1500)',
		oji: 'Ojibwa',
		ori: 'Oriya',
		orm: 'Oromo',
		osa: 'Osage',
		oss: 'Ossetian; Ossetic',
		ota: 'Turkish, Ottoman (1500-1928)',
		oto: 'Otomian languages',
		paa: 'Papuan languages',
		pag: 'Pangasinan',
		pal: 'Pahlavi',
		pam: 'Pampanga; Kapampangan',
		pan: 'Panjabi; Punjabi',
		pap: 'Papiamento',
		pau: 'Palauan',
		per: 'Persian',
		phi: 'Philippine languages',
		phn: 'Phoenician',
		pli: 'Pali',
		pol: 'Polish',
		pon: 'Pohnpeian',
		por: 'Portuguese',
		pra: 'Prakrit languages',
		pus: 'Pashto',
		que: 'Quechua',
		raj: 'Rajasthani',
		rap: 'Rapanui',
		rar: 'Rarotongan; Cook Islands Maori',
		roa: 'Romance languages',
		roh: 'Romansh',
		rom: 'Romany',
		rum: 'Romanian',
		run: 'Rundi',
		rus: 'Russian',
		sad: 'Sandawe',
		sag: 'Sango',
		sah: 'Yakut',
		sal: 'Salishan languages',
		sam: 'Samaritan Aramaic',
		san: 'Sanskrit',
		sas: 'Sasak',
		sat: 'Santali',
		scn: 'Sicilian',
		sco: 'Scots',
		sel: 'Selkup',
		sgn: 'Sign Languages',
		shn: 'Shan',
		sid: 'Sidamo',
		sin: 'Sinhala; Sinhalese',
		sio: 'Siouan languages',
		sit: 'Sino-Tibetan languages',
		sla: 'Slavic languages',
		slo: 'Slovak',
		sma: 'Southern Sami',
		sme: 'Northern Sami',
		smi: 'Sami languages',
		smj: 'Lule Sami',
		smn: 'Inari Sami',
		smo: 'Samoan',
		sms: 'Skolt Sami',
		sna: 'Shona',
		snd: 'Sindhi',
		snk: 'Soninke',
		sog: 'Sogdian',
		som: 'Somali',
		son: 'Songhai languages',
		sot: 'Sotho, Southern',
		spa: 'Spanish',
		alb: 'Albanian',
		srd: 'Sardinian',
		srn: 'Sranan Tongo',
		srp: 'Serbian',
		srr: 'Serer',
		ssa: 'Nilo-Saharan languages',
		ssw: 'Swati',
		suk: 'Sukuma',
		sun: 'Sundanese',
		sus: 'Susu',
		sux: 'Sumerian',
		swa: 'Swahili',
		swe: 'Swedish',
		syc: 'Classical Syriac',
		syr: 'Syriac',
		tah: 'Tahitian',
		tai: 'Tai languages',
		tam: 'Tamil',
		tat: 'Tatar',
		tel: 'Telugu',
		tem: 'Timne',
		ter: 'Tereno',
		tet: 'Tetum',
		tgk: 'Tajik',
		tgl: 'Tagalog',
		tha: 'Thai',
		tib: 'Tibetan',
		tig: 'Tigre',
		tir: 'Tigrinya',
		tiv: 'Tiv',
		tkl: 'Tokelau',
		tlh: 'Klingon',
		tli: 'Tlingit',
		tmh: 'Tamashek',
		tog: 'Tonga',
		ton: 'Tonga',
		tpi: 'Tok Pisin',
		tsi: 'Tsimshian',
		tsn: 'Tswana',
		tso: 'Tsonga',
		tuk: 'Turkmen',
		tum: 'Tumbuka',
		tup: 'Tupi languages',
		tur: 'Turkish',
		tut: 'Altaic languages',
		tvl: 'Tuvalu',
		twi: 'Twi',
		tyv: 'Tuvinian',
		udm: 'Udmurt',
		uga: 'Ugaritic',
		uig: 'Uighur; Uyghur',
		ukr: 'Ukrainian',
		umb: 'Umbundu',
		und: 'Undetermined',
		urd: 'Urdu',
		uzb: 'Uzbek',
		vai: 'Vai',
		ven: 'Venda',
		vie: 'Vietnamese',
		vol: 'Volapük',
		vot: 'Votic',
		wak: 'Wakashan languages',
		wal: 'Wolaitta; Wolaytta',
		war: 'Waray',
		was: 'Washo',
		wel: 'Welsh',
		wen: 'Sorbian languages',
		wln: 'Walloon',
		wol: 'Wolof',
		xal: 'Kalmyk; Oirat',
		xho: 'Xhosa',
		yao: 'Yao',
		yap: 'Yapese',
		yid: 'Yiddish',
		yor: 'Yoruba',
		ypk: 'Yupik languages',
		zap: 'Zapotec',
		zbl: 'Blissymbols; Blissymbolics; Bliss',
		zen: 'Zenaga',
		zgh: 'Standard Moroccan Tamazight',
		zha: 'Zhuang',
		chi: 'Chinese Simplified',
		zho: 'Chinese Traditional',
		znd: 'Zande languages',
		zul: 'Zulu',
		zun: 'Zuni'
	}
};

sofia.countries =  [
{"name":"Afghanistan","alpha-2":"AF","alpha-3":"AFG"},
{"name":"Åland Islands","alpha-2":"AX","alpha-3":"ALA"},
{"name":"Albania","alpha-2":"AL","alpha-3":"ALB"},
{"name":"Algeria","alpha-2":"DZ","alpha-3":"DZA"},
{"name":"American Samoa","alpha-2":"AS","alpha-3":"ASM"},
{"name":"Andorra","alpha-2":"AD","alpha-3":"AND"},
{"name":"Angola","alpha-2":"AO","alpha-3":"AGO"},
{"name":"Anguilla","alpha-2":"AI","alpha-3":"AIA"},
{"name":"Antarctica","alpha-2":"AQ","alpha-3":"ATA"},
{"name":"Antigua and Barbuda","alpha-2":"AG","alpha-3":"ATG"},
{"name":"Argentina","alpha-2":"AR","alpha-3":"ARG"},
{"name":"Armenia","alpha-2":"AM","alpha-3":"ARM"},
{"name":"Aruba","alpha-2":"AW","alpha-3":"ABW"},
{"name":"Australia","alpha-2":"AU","alpha-3":"AUS"},
{"name":"Austria","alpha-2":"AT","alpha-3":"AUT"},
{"name":"Azerbaijan","alpha-2":"AZ","alpha-3":"AZE"},
{"name":"Bahamas","alpha-2":"BS","alpha-3":"BHS"},
{"name":"Bahrain","alpha-2":"BH","alpha-3":"BHR"},
{"name":"Bangladesh","alpha-2":"BD","alpha-3":"BGD"},
{"name":"Barbados","alpha-2":"BB","alpha-3":"BRB"},
{"name":"Belarus","alpha-2":"BY","alpha-3":"BLR"},
{"name":"Belgium","alpha-2":"BE","alpha-3":"BEL"},
{"name":"Belize","alpha-2":"BZ","alpha-3":"BLZ"},
{"name":"Benin","alpha-2":"BJ","alpha-3":"BEN"},
{"name":"Bermuda","alpha-2":"BM","alpha-3":"BMU"},
{"name":"Bhutan","alpha-2":"BT","alpha-3":"BTN"},
{"name":"Bolivia, Plurinational State of","alpha-2":"BO","alpha-3":"BOL"},
{"name":"Bonaire, Sint Eustatius and Saba","alpha-2":"BQ","alpha-3":"BES"},
{"name":"Bosnia and Herzegovina","alpha-2":"BA","alpha-3":"BIH"},
{"name":"Botswana","alpha-2":"BW","alpha-3":"BWA"},
{"name":"Bouvet Island","alpha-2":"BV","alpha-3":"BVT"},
{"name":"Brazil","alpha-2":"BR","alpha-3":"BRA"},
{"name":"British Indian Ocean Territory","alpha-2":"IO","alpha-3":"IOT"},
{"name":"Brunei Darussalam","alpha-2":"BN","alpha-3":"BRN"},
{"name":"Bulgaria","alpha-2":"BG","alpha-3":"BGR"},
{"name":"Burkina Faso","alpha-2":"BF","alpha-3":"BFA"},
{"name":"Burundi","alpha-2":"BI","alpha-3":"BDI"},
{"name":"Cambodia","alpha-2":"KH","alpha-3":"KHM"},
{"name":"Cameroon","alpha-2":"CM","alpha-3":"CMR"},
{"name":"Canada","alpha-2":"CA","alpha-3":"CAN"},
{"name":"Cape Verde","alpha-2":"CV","alpha-3":"CPV"},
{"name":"Cayman Islands","alpha-2":"KY","alpha-3":"CYM"},
{"name":"Central African Republic","alpha-2":"CF","alpha-3":"CAF"},
{"name":"Chad","alpha-2":"TD","alpha-3":"TCD"},
{"name":"Chile","alpha-2":"CL","alpha-3":"CHL"},
{"name":"China","alpha-2":"CN","alpha-3":"CHN"},
{"name":"Christmas Island","alpha-2":"CX","alpha-3":"CXR"},
{"name":"Cocos (Keeling) Islands","alpha-2":"CC","alpha-3":"CCK"},
{"name":"Colombia","alpha-2":"CO","alpha-3":"COL"},
{"name":"Comoros","alpha-2":"KM","alpha-3":"COM"},
{"name":"Congo","alpha-2":"CG","alpha-3":"COG"},
{"name":"Congo, the Democratic Republic of the","alpha-2":"CD","alpha-3":"COD"},
{"name":"Cook Islands","alpha-2":"CK","alpha-3":"COK"},
{"name":"Costa Rica","alpha-2":"CR","alpha-3":"CRI"},
{"name":"Côte d'Ivoire","alpha-2":"CI","alpha-3":"CIV"},
{"name":"Croatia","alpha-2":"HR","alpha-3":"HRV"},
{"name":"Cuba","alpha-2":"CU","alpha-3":"CUB"},
{"name":"Curaçao","alpha-2":"CW","alpha-3":"CUW"},
{"name":"Cyprus","alpha-2":"CY","alpha-3":"CYP"},
{"name":"Czech Republic","alpha-2":"CZ","alpha-3":"CZE"},
{"name":"Denmark","alpha-2":"DK","alpha-3":"DNK"},
{"name":"Djibouti","alpha-2":"DJ","alpha-3":"DJI"},
{"name":"Dominica","alpha-2":"DM","alpha-3":"DMA"},
{"name":"Dominican Republic","alpha-2":"DO","alpha-3":"DOM"},
{"name":"Ecuador","alpha-2":"EC","alpha-3":"ECU"},
{"name":"Egypt","alpha-2":"EG","alpha-3":"EGY"},
{"name":"El Salvador","alpha-2":"SV","alpha-3":"SLV"},
{"name":"Equatorial Guinea","alpha-2":"GQ","alpha-3":"GNQ"},
{"name":"Eritrea","alpha-2":"ER","alpha-3":"ERI"},
{"name":"Estonia","alpha-2":"EE","alpha-3":"EST"},
{"name":"Ethiopia","alpha-2":"ET","alpha-3":"ETH"},
{"name":"Falkland Islands (Malvinas)","alpha-2":"FK","alpha-3":"FLK"},
{"name":"Faroe Islands","alpha-2":"FO","alpha-3":"FRO"},
{"name":"Fiji","alpha-2":"FJ","alpha-3":"FJI"},
{"name":"Finland","alpha-2":"FI","alpha-3":"FIN"},
{"name":"France","alpha-2":"FR","alpha-3":"FRA"},
{"name":"French Guiana","alpha-2":"GF","alpha-3":"GUF"},
{"name":"French Polynesia","alpha-2":"PF","alpha-3":"PYF"},
{"name":"French Southern Territories","alpha-2":"TF","alpha-3":"ATF"},
{"name":"Gabon","alpha-2":"GA","alpha-3":"GAB"},
{"name":"Gambia","alpha-2":"GM","alpha-3":"GMB"},
{"name":"Georgia","alpha-2":"GE","alpha-3":"GEO"},
{"name":"Germany","alpha-2":"DE","alpha-3":"DEU"},
{"name":"Ghana","alpha-2":"GH","alpha-3":"GHA"},
{"name":"Gibraltar","alpha-2":"GI","alpha-3":"GIB"},
{"name":"Greece","alpha-2":"GR","alpha-3":"GRC"},
{"name":"Greenland","alpha-2":"GL","alpha-3":"GRL"},
{"name":"Grenada","alpha-2":"GD","alpha-3":"GRD"},
{"name":"Guadeloupe","alpha-2":"GP","alpha-3":"GLP"},
{"name":"Guam","alpha-2":"GU","alpha-3":"GUM"},
{"name":"Guatemala","alpha-2":"GT","alpha-3":"GTM"},
{"name":"Guernsey","alpha-2":"GG","alpha-3":"GGY"},
{"name":"Guinea","alpha-2":"GN","alpha-3":"GIN"},
{"name":"Guinea-Bissau","alpha-2":"GW","alpha-3":"GNB"},
{"name":"Guyana","alpha-2":"GY","alpha-3":"GUY"},
{"name":"Haiti","alpha-2":"HT","alpha-3":"HTI"},
{"name":"Heard Island and McDonald Islands","alpha-2":"HM","alpha-3":"HMD"},
{"name":"Holy See (Vatican City State)","alpha-2":"VA","alpha-3":"VAT"},
{"name":"Honduras","alpha-2":"HN","alpha-3":"HND"},
{"name":"Hong Kong","alpha-2":"HK","alpha-3":"HKG"},
{"name":"Hungary","alpha-2":"HU","alpha-3":"HUN"},
{"name":"Iceland","alpha-2":"IS","alpha-3":"ISL"},
{"name":"India","alpha-2":"IN","alpha-3":"IND"},
{"name":"Indonesia","alpha-2":"ID","alpha-3":"IDN"},
{"name":"Iran, Islamic Republic of","alpha-2":"IR","alpha-3":"IRN"},
{"name":"Iraq","alpha-2":"IQ","alpha-3":"IRQ"},
{"name":"Ireland","alpha-2":"IE","alpha-3":"IRL"},
{"name":"Isle of Man","alpha-2":"IM","alpha-3":"IMN"},
{"name":"Israel","alpha-2":"IL","alpha-3":"ISR"},
{"name":"Italy","alpha-2":"IT","alpha-3":"ITA"},
{"name":"Jamaica","alpha-2":"JM","alpha-3":"JAM"},
{"name":"Japan","alpha-2":"JP","alpha-3":"JPN"},
{"name":"Jersey","alpha-2":"JE","alpha-3":"JEY"},
{"name":"Jordan","alpha-2":"JO","alpha-3":"JOR"},
{"name":"Kazakhstan","alpha-2":"KZ","alpha-3":"KAZ"},
{"name":"Kenya","alpha-2":"KE","alpha-3":"KEN"},
{"name":"Kiribati","alpha-2":"KI","alpha-3":"KIR"},
{"name":"Korea, Democratic People's Republic of","alpha-2":"KP","alpha-3":"PRK"},
{"name":"Korea, Republic of","alpha-2":"KR","alpha-3":"KOR"},
{"name":"Kuwait","alpha-2":"KW","alpha-3":"KWT"},
{"name":"Kyrgyzstan","alpha-2":"KG","alpha-3":"KGZ"},
{"name":"Lao People's Democratic Republic","alpha-2":"LA","alpha-3":"LAO"},
{"name":"Latvia","alpha-2":"LV","alpha-3":"LVA"},
{"name":"Lebanon","alpha-2":"LB","alpha-3":"LBN"},
{"name":"Lesotho","alpha-2":"LS","alpha-3":"LSO"},
{"name":"Liberia","alpha-2":"LR","alpha-3":"LBR"},
{"name":"Libya","alpha-2":"LY","alpha-3":"LBY"},
{"name":"Liechtenstein","alpha-2":"LI","alpha-3":"LIE"},
{"name":"Lithuania","alpha-2":"LT","alpha-3":"LTU"},
{"name":"Luxembourg","alpha-2":"LU","alpha-3":"LUX"},
{"name":"Macao","alpha-2":"MO","alpha-3":"MAC"},
{"name":"Macedonia, the former Yugoslav Republic of","alpha-2":"MK","alpha-3":"MKD"},
{"name":"Madagascar","alpha-2":"MG","alpha-3":"MDG"},
{"name":"Malawi","alpha-2":"MW","alpha-3":"MWI"},
{"name":"Malaysia","alpha-2":"MY","alpha-3":"MYS"},
{"name":"Maldives","alpha-2":"MV","alpha-3":"MDV"},
{"name":"Mali","alpha-2":"ML","alpha-3":"MLI"},
{"name":"Malta","alpha-2":"MT","alpha-3":"MLT"},
{"name":"Marshall Islands","alpha-2":"MH","alpha-3":"MHL"},
{"name":"Martinique","alpha-2":"MQ","alpha-3":"MTQ"},
{"name":"Mauritania","alpha-2":"MR","alpha-3":"MRT"},
{"name":"Mauritius","alpha-2":"MU","alpha-3":"MUS"},
{"name":"Mayotte","alpha-2":"YT","alpha-3":"MYT"},
{"name":"Mexico","alpha-2":"MX","alpha-3":"MEX"},
{"name":"Micronesia, Federated States of","alpha-2":"FM","alpha-3":"FSM"},
{"name":"Moldova, Republic of","alpha-2":"MD","alpha-3":"MDA"},
{"name":"Monaco","alpha-2":"MC","alpha-3":"MCO"},
{"name":"Mongolia","alpha-2":"MN","alpha-3":"MNG"},
{"name":"Montenegro","alpha-2":"ME","alpha-3":"MNE"},
{"name":"Montserrat","alpha-2":"MS","alpha-3":"MSR"},
{"name":"Morocco","alpha-2":"MA","alpha-3":"MAR"},
{"name":"Mozambique","alpha-2":"MZ","alpha-3":"MOZ"},
{"name":"Myanmar","alpha-2":"MM","alpha-3":"MMR"},
{"name":"Namibia","alpha-2":"NA","alpha-3":"NAM"},
{"name":"Nauru","alpha-2":"NR","alpha-3":"NRU"},
{"name":"Nepal","alpha-2":"NP","alpha-3":"NPL"},
{"name":"Netherlands","alpha-2":"NL","alpha-3":"NLD"},
{"name":"New Caledonia","alpha-2":"NC","alpha-3":"NCL"},
{"name":"New Zealand","alpha-2":"NZ","alpha-3":"NZL"},
{"name":"Nicaragua","alpha-2":"NI","alpha-3":"NIC"},
{"name":"Niger","alpha-2":"NE","alpha-3":"NER"},
{"name":"Nigeria","alpha-2":"NG","alpha-3":"NGA"},
{"name":"Niue","alpha-2":"NU","alpha-3":"NIU"},
{"name":"Norfolk Island","alpha-2":"NF","alpha-3":"NFK"},
{"name":"Northern Mariana Islands","alpha-2":"MP","alpha-3":"MNP"},
{"name":"Norway","alpha-2":"NO","alpha-3":"NOR"},
{"name":"Oman","alpha-2":"OM","alpha-3":"OMN"},
{"name":"Pakistan","alpha-2":"PK","alpha-3":"PAK"},
{"name":"Palau","alpha-2":"PW","alpha-3":"PLW"},
{"name":"Palestine, State of","alpha-2":"PS","alpha-3":"PSE"},
{"name":"Panama","alpha-2":"PA","alpha-3":"PAN"},
{"name":"Papua New Guinea","alpha-2":"PG","alpha-3":"PNG"},
{"name":"Paraguay","alpha-2":"PY","alpha-3":"PRY"},
{"name":"Peru","alpha-2":"PE","alpha-3":"PER"},
{"name":"Philippines","alpha-2":"PH","alpha-3":"PHL"},
{"name":"Pitcairn","alpha-2":"PN","alpha-3":"PCN"},
{"name":"Poland","alpha-2":"PL","alpha-3":"POL"},
{"name":"Portugal","alpha-2":"PT","alpha-3":"PRT"},
{"name":"Puerto Rico","alpha-2":"PR","alpha-3":"PRI"},
{"name":"Qatar","alpha-2":"QA","alpha-3":"QAT"},
{"name":"Réunion","alpha-2":"RE","alpha-3":"REU"},
{"name":"Romania","alpha-2":"RO","alpha-3":"ROU"},
{"name":"Russian Federation","alpha-2":"RU","alpha-3":"RUS"},
{"name":"Rwanda","alpha-2":"RW","alpha-3":"RWA"},
{"name":"Saint Barthélemy","alpha-2":"BL","alpha-3":"BLM"},
{"name":"Saint Helena, Ascension and Tristan da Cunha","alpha-2":"SH","alpha-3":"SHN"},
{"name":"Saint Kitts and Nevis","alpha-2":"KN","alpha-3":"KNA"},
{"name":"Saint Lucia","alpha-2":"LC","alpha-3":"LCA"},
{"name":"Saint Martin (French part)","alpha-2":"MF","alpha-3":"MAF"},
{"name":"Saint Pierre and Miquelon","alpha-2":"PM","alpha-3":"SPM"},
{"name":"Saint Vincent and the Grenadines","alpha-2":"VC","alpha-3":"VCT"},
{"name":"Samoa","alpha-2":"WS","alpha-3":"WSM"},
{"name":"San Marino","alpha-2":"SM","alpha-3":"SMR"},
{"name":"Sao Tome and Principe","alpha-2":"ST","alpha-3":"STP"},
{"name":"Saudi Arabia","alpha-2":"SA","alpha-3":"SAU"},
{"name":"Senegal","alpha-2":"SN","alpha-3":"SEN"},
{"name":"Serbia","alpha-2":"RS","alpha-3":"SRB"},
{"name":"Seychelles","alpha-2":"SC","alpha-3":"SYC"},
{"name":"Sierra Leone","alpha-2":"SL","alpha-3":"SLE"},
{"name":"Singapore","alpha-2":"SG","alpha-3":"SGP"},
{"name":"Sint Maarten (Dutch part)","alpha-2":"SX","alpha-3":"SXM"},
{"name":"Slovakia","alpha-2":"SK","alpha-3":"SVK"},
{"name":"Slovenia","alpha-2":"SI","alpha-3":"SVN"},
{"name":"Solomon Islands","alpha-2":"SB","alpha-3":"SLB"},
{"name":"Somalia","alpha-2":"SO","alpha-3":"SOM"},
{"name":"South Africa","alpha-2":"ZA","alpha-3":"ZAF"},
{"name":"South Georgia and the South Sandwich Islands","alpha-2":"GS","alpha-3":"SGS"},
{"name":"South Sudan","alpha-2":"SS","alpha-3":"SSD"},
{"name":"Spain","alpha-2":"ES","alpha-3":"ESP"},
{"name":"Sri Lanka","alpha-2":"LK","alpha-3":"LKA"},
{"name":"Sudan","alpha-2":"SD","alpha-3":"SDN"},
{"name":"Suriname","alpha-2":"SR","alpha-3":"SUR"},
{"name":"Svalbard and Jan Mayen","alpha-2":"SJ","alpha-3":"SJM"},
{"name":"Swaziland","alpha-2":"SZ","alpha-3":"SWZ"},
{"name":"Sweden","alpha-2":"SE","alpha-3":"SWE"},
{"name":"Switzerland","alpha-2":"CH","alpha-3":"CHE"},
{"name":"Syrian Arab Republic","alpha-2":"SY","alpha-3":"SYR"},
{"name":"Taiwan, Province of China","alpha-2":"TW","alpha-3":"TWN"},
{"name":"Tajikistan","alpha-2":"TJ","alpha-3":"TJK"},
{"name":"Tanzania, United Republic of","alpha-2":"TZ","alpha-3":"TZA"},
{"name":"Thailand","alpha-2":"TH","alpha-3":"THA"},
{"name":"Timor-Leste","alpha-2":"TL","alpha-3":"TLS"},
{"name":"Togo","alpha-2":"TG","alpha-3":"TGO"},
{"name":"Tokelau","alpha-2":"TK","alpha-3":"TKL"},
{"name":"Tonga","alpha-2":"TO","alpha-3":"TON"},
{"name":"Trinidad and Tobago","alpha-2":"TT","alpha-3":"TTO"},
{"name":"Tunisia","alpha-2":"TN","alpha-3":"TUN"},
{"name":"Turkey","alpha-2":"TR","alpha-3":"TUR"},
{"name":"Turkmenistan","alpha-2":"TM","alpha-3":"TKM"},
{"name":"Turks and Caicos Islands","alpha-2":"TC","alpha-3":"TCA"},
{"name":"Tuvalu","alpha-2":"TV","alpha-3":"TUV"},
{"name":"Uganda","alpha-2":"UG","alpha-3":"UGA"},
{"name":"Ukraine","alpha-2":"UA","alpha-3":"UKR"},
{"name":"United Arab Emirates","alpha-2":"AE","alpha-3":"ARE"},
{"name":"United Kingdom","alpha-2":"GB","alpha-3":"GBR"},
{"name":"United States","alpha-2":"US","alpha-3":"USA"},
{"name":"United States Minor Outlying Islands","alpha-2":"UM","alpha-3":"UMI"},
{"name":"Uruguay","alpha-2":"UY","alpha-3":"URY"},
{"name":"Uzbekistan","alpha-2":"UZ","alpha-3":"UZB"},
{"name":"Vanuatu","alpha-2":"VU","alpha-3":"VUT"},
{"name":"Venezuela, Bolivarian Republic of","alpha-2":"VE","alpha-3":"VEN"},
{"name":"Viet Nam","alpha-2":"VN","alpha-3":"VNM"},
{"name":"Virgin Islands, British","alpha-2":"VG","alpha-3":"VGB"},
{"name":"Virgin Islands, U.S.","alpha-2":"VI","alpha-3":"VIR"},
{"name":"Wallis and Futuna","alpha-2":"WF","alpha-3":"WLF"},
{"name":"Western Sahara","alpha-2":"EH","alpha-3":"ESH"},
{"name":"Yemen","alpha-2":"YE","alpha-3":"YEM"},
{"name":"Zambia","alpha-2":"ZM","alpha-3":"ZMB"},
{"name":"Zimbabwe","alpha-2":"ZW","alpha-3":"ZWE"}
];

sofia.ajax = function(params) {

	var $params = $.extend(true, {}, params);

	if ($params.url.indexOf('http') != 0) {

		$params.url =
				// base URL
				sofia.config.baseContentUrl +
				// API settings
				(sofia.config.baseContentApiPath != '' ? sofia.config.baseContentApiPath + '?key=' + sofia.config.baseContentApiKey + '&action=' : '') +
				// then plain URL
				$params.url;

		// add type overrides if possible
		if ($params.dataType == 'json') {
			$params.beforeSend = function(xhr){
				if (xhr.overrideMimeType){
					xhr.overrideMimeType('application/' + (sofia.config.baseContentApiPath != '' ? 'javascript' : 'json'));
				}
			}
		}

		// change setting
		if (sofia.config.baseContentApiPath != '') {
			$params.dataType = 'jsonp';
		}
	}

	$params.success = function(data) {

		if (params.success) {

			// convert back to text
			if ((params.dataType == 'text' || params.dataType == 'html') && sofia.config.baseContentApiPath != '') {
				data = data.text;
			}

			params.success(data);
		}
	};

	$params.error = function() {

		if (params.error) {
			params.error.apply(null, arguments);
		}

	};

	// run through jQuery
	$.ajax($params);
};

/******************
ReaderSettings
*******************/
var AppSettings = (function() {
	var storage = {};

    function testlocalStorage() {
        try {
            window.localStorage.setItem('1', '2');
            if (localStorage.getItem('1') !== '2') {
                return false;
            }
            window.localStorage.removeItem('1');
            return localStorage.getItem('1') !== '2';
        } catch(e) {
            return false;
        }
    }

	if (testlocalStorage()) {
		storage = window.localStorage;
	}

	// create me
	function getValue(key, defaultValue) {
		key = sofia.config.settingsPrefix + key;

		// console.log('getValue', key, defaultValue);

		var returnValue = {},
			storedValue = null;


		// put all default values on the value object
		for (var objkey in defaultValue) {
			returnValue[objkey] = defaultValue[objkey];
		}

		//console.log('default', returnValue);

		storedValue = storage[key];

		//console.log('storedValue', 'key:' + key, storedValue);

		if (storedValue == null) {
			return returnValue;
		} else {
			try {
				storedValue = JSON.parse(storedValue);
			} catch (ex) {

			}
		}

		//console.log('storedValue', storedValue);

		for (var objkey in storedValue) {
			returnValue[objkey] = storedValue[objkey];
		}

		//console.log('combined', returnValue);

		return returnValue;
	}

	function setValue(key, value) {

		key = sofia.config.settingsPrefix + key;

		// console.log('STORE', 'key:' + key, value);
		storage[key] = JSON.stringify(value);
	}

	/* From QuirksMode */
	function getCookieValue(name) {
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for(var i = 0; i < ca.length; i++) {
			var c = ca[i];
			while (c.charAt(0) == ' ') c = c.substring(1, c.length);
			if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
		}
		return null;
	}

	return {
		getValue: getValue,
		setValue: setValue,
		getCookieValue: getCookieValue
	}

})();

var EventEmitter = {
	events: [],

	addEventListener: function (eventName, callback, bubble) {
		this.events[eventName] = this.events[eventName] || [];
		this.events[eventName].push(callback);
	},
	removeEventListener: function (eventName, callback) {
		if (!eventName) { this.events = {}; return true; }
		var callbacks = this.events[eventName];
		if (!callbacks) return true;
		if (!callback) { this.events[eventName] = []; return true; }
		for (i = 0; i < callbacks.length; i++) {
			if (callbacks[i] === callback) {
				this.events[eventName].splice(i, 1);
				return true;
			}
		}
		return false;
	},
	dispatchEvent: function (eventName) {
		var i,
			args,
			callbacks = this.events[eventName];

		if (callbacks) {
			args = Array.prototype.slice.call(arguments, 1);
			for (i = 0; i < callbacks.length; i++) {
				callbacks[i].apply(null, args);
			}
		}
	},

	clearListeners: function() {
		this.events = [];
	},

	// jQuery like names
	on: function(eventName, callback, bubble) {
		this.addEventListener.call(this, eventName, callback, bubble);
	},
	trigger: function(eventName, value) {
		this.dispatchEvent.call(this, eventName, value);
	}
};


var Timer = function(callback, seconds) {

	var timeoutValue = null;
	function start() {
		if (timeoutValue == null) {
			clear();

			timeoutValue = setTimeout(function() {
				callback();
				clear();
			}, seconds);
		}
	}
	function clear() {
		if (timeoutValue != null) {
			clearTimeout(timeoutValue);
			timeoutValue = null;
		}
	}

	return {
		start: start,
		clear: clear
	}
};

var stringUtility = {

	// get from URL
	parseQuerystring: function (querystring) {

		querystring = querystring || window.location.search.substring(1);

		// remove any preceding url and split
		querystring = querystring.substring(querystring.indexOf('?')+1).split('&');
		var params = {}, pair, d = decodeURIComponent;
		// march and parse
		for (var i = querystring.length - 1; i >= 0; i--) {
		pair = querystring[i].split('=');
		params[d(pair[0])] = d(pair[1]);
		}

		return params;
	}
};

var Detection = (function() {
	var detection = {};

	detection.hasTouch = 'ontouchend' in document;

	/*
	detection.hasFlash = (function() {
		if (navigator.plugins != null && navigator.plugins.length > 0){
			return navigator.plugins["Shockwave Flash"] && true;
		}
		if (~navigator.userAgent.toLowerCase().indexOf("webtv")){
			return true;
		}
		if ((~navigator.appVersion.indexOf("MSIE") || ~navigator.appVersion.indexOf("Trident")) && !~navigator.userAgent.indexOf("Opera")){
			try {
				return new ActiveXObject("ShockwaveFlash.ShockwaveFlash") && true;
			} catch(e) {}
		}
		return false;
	})();
	*/


	return detection;
})();

if (!Array.prototype.filter) {
  Array.prototype.filter = function(fun /*, thisp */) {
	"use strict";

	if (this === void 0 || this === null)
	  throw new TypeError();

	var t = Object(this);
	var len = t.length >>> 0;
	if (typeof fun !== "function")
	  throw new TypeError();

	var res = [];
	var thisp = arguments[1];
	for (var i = 0; i < len; i++) {
	  if (i in t) {
		var val = t[i]; // in case fun mutates this
		if (fun.call(thisp, val, i, t))
		  res.push(val);
	  }
	}

	return res;
  };
}

if (!Array.prototype.indexOf) {
	Array.prototype.indexOf = function(obj, start) {
		for (var i = (start || 0), j = this.length; i < j; i++) {
			if (this[i] === obj) {
				return i;
			}
		}
		return -1;
	};
}

if(typeof String.prototype.trim !== 'function') {
	String.prototype.trim = function() {
		return this.replace(/^\s+|\s+$/g, '');
	};
};

/* temporarily stores locations when settings are changed */
var PlaceKeeper = (function() {

	var currentWindow = null,
		currentData = null;

	function storePlace() {
		currentData = getFirstLocation();
	}

	function getFirstLocation() {
		currentWindow = (sofia.app.windowManager) ?
							sofia.app.windowManager.getWindows().filter(function(w) { return w.className == 'BibleWindow'})[0] :
							null;

		var data = (currentWindow != null) ? currentWindow.getData() : null;

		return data;
	}

	function restorePlace() {
		if (currentWindow != null) {
			//
			//firstWindow.trigger('message', {type:'globalmessage', messagetype: 'nav', })

			currentWindow.trigger('globalmessage', {
				type: 'globalmessage',
				target: currentWindow,
				data: {
					messagetype: 'nav',
					type: 'bible',
					locationInfo: currentData // firstWindow.getData()
				}
			});
		}

	}

	return {
		storePlace: storePlace,
		restorePlace: restorePlace,
		getFirstLocation: getFirstLocation
	}

})();

/* stores locations for back/foward buttons on browser */
var TextNavigation = (function() {

	var locations = [],
		locationIndex = -1;

	$(window).on('popstate',  handleBrowserNavigation);

	function handleBrowserNavigation(e) {
		console.log('handleNavigation', e, e.state);

		if (e.originalEvent && e.originalEvent.state != null && typeof e.originalEvent.state.locationid != 'undefined') {

			var newlocationid =  e.originalEvent.state.locationid,
				type = '';


			if (locationIndex-1 > -1 && locations[locationIndex-1] == newlocationid) {
				locationIndex--;
				type = 'back';
			} else if (locationIndex+1 < locations.length && locations[locationIndex+1] == newlocationid) {
				locationIndex++;
				type = 'forward';
			}

			setLocation(newlocationid);

			textNavigation.trigger('locationchange', {type: type});
		}

	}


	// upon startup, store the first place
	function firstState(locationid) {
		console.log('firststate',locationid);

		locations.push(locationid);
		locationIndex = 0;

		window.history.replaceState({"locationid": locationid}, null, window.location.href);
	}

	// each additional change
	function locationChange(locationid, type) {

		// slice off anything after this one
		while (locationIndex > locations.length-1) {
			locations.pop();
		}

		locations.push(locationid);
		locationIndex++;

		window.history.pushState({"locationid": locationid}, null, window.location.href);


		textNavigation.trigger('locationchange', {type: type});
	}


	function setLocation(locationid) {
		// break off and be sure to add the trailing verse 1 (JN1_1)
		var fragmentid = locationid.indexOf('_') > -1 ? locationid : locationid + '_1',
			sectionid = fragmentid.split('_')[0];

		sofia.app.handleGlobalMessage({
			type: 'globalmessage',
			target: this,
			data: {
				messagetype:'nav',
				type: 'bible',
				locationInfo: {
					fragmentid: fragmentid,
					sectionid: sectionid,
					offset: 0
				}
			}
		});
	}

	function back() {

		window.history.go(-1);

		/*
		if (locationIndex > 0) {
			locationIndex--;
			var locationid = locations[locationIndex];
			setLocation(locationid);
		}
		*/
	}

	function forward() {

		window.history.go(1);


		/*
		if (locationIndex < locations.length-1) {
			// get this location
			locationIndex++;
			var locationid = locations[locationIndex];
			setLocation(locationid);
		}
		*/
	}

	function getLocations() {
		return locations;
	}

	function getLocationIndex() {
		return locationIndex;
	}


	var textNavigation =  {
		locationChange: locationChange,
		firstState: firstState,
		forward: forward,
		back: back,
		getLocationIndex: getLocationIndex,
		getLocations: getLocations
	}

	textNavigation = $.extend(true, textNavigation, EventEmitter);

	return textNavigation;
})();

var iso2iana = {
  // These are languages for which at least some browsers have hyphenation
  // dictionaries for listed under ISO-639-1 codes for which ISO-639-2 codes
  // are used in Bible modules and other data we process.
  data: {
    "afr": "af",
    "arz": "ar",
    "bul": "bg",
    "cat": "ca",
    "cym": "cy",
    "dan": "da",
    "dut": "nl",
    "eng": "en",
    "epo": "eo",
    "est": "et",
    "fin": "fi",
    "fra": "fr",
    "fre": "fr",
    "glg": "gl",
    "grc": "el",
    "grk": "el",
    "heb": "he",
    "hun": "hu",
    "ice": "is",
    "ina": "ia",
    "isl": "is",
    "ita": "it",
    "lat": "la",
    "lit": "lt",
    "mon": "mn",
    "nld": "nl",
    "nno": "nn",
    "nob": "nb",
    "por": "pt",
    "rus": "ru",
    "slv": "sl",
    "spa": "es",
    "swe": "sv",
    "tur": "tr",
    "ukr": "uk",
    "wel": "cy"
  },

  // Return the language code needed for browsers to properly process lang=
  // attributes. If we don't recognize a mapping, just return the original
  convert: function(iso) {
    var iana =  (typeof this.data[iso] === 'undefined') ? iso : this.data[iso];
    return iana;
  }
};

var ClickOff = {

	clickoffid: '',
	clickTargets:[],

	getClickTargets: function() {
		return this.clickTargets;
	},

	setClickTargets: function(clickTargets) {
		this.clickTargets = clickTargets;
		this.clearOffClickTimer();
	},

	docClick: function(e) {

		var target = $(e.target),
			clickedOnThis = false;

		// go through all nested clicked elements
		while (target != null && target.length > 0) {

			for (var i=0, il=this.clickTargets.length; i<il; i++) {
				var clickTarget = this.clickTargets[i];

				if (target[0] == clickTarget[0]) {
					clickedOnThis = true;
					break;
				}
			}

			if (clickedOnThis) {
				break;
			}

			target = target.parent();
		}

		console.log('clickoff', this.clickoffid, 'doc.click', clickedOnThis);

		if (!clickedOnThis) {
			//e.preventDefault();

			//this.startOffClickTimer();
			this.trigger('offclick');

			//$(document).off('click', this.docClick);
			this.unbindDocClick();

			//return false;
		}
	},

	offClickTimeout: null,

	startOffClickTimer: function () {
		var t = this;

		this.clearOffClickTimer();
		this.offClickTimeout = setTimeout(function() {
			if (t.trigger) {
				t.trigger('offclick');
			}
		}, 50);
	},

	clearOffClickTimer: function () {
		if (this.offClickTimeout != null) {
			clearTimeout(this.offClickTimeout);
			this.offClickTimeout = null;
		}
	},

	onshow: function() {
		console.log('clickoff', this.clickoffid, 'onshow');

		this.bindDocClick();
	},

	onhide: function() {
		console.log('clickoff', this.clickoffid, 'onhide');

		this.clearOffClickTimer();
		this.unbindDocClick();
	},

	bindDocClick: function() {
		this.unbindDocClick();

		var proxy = this.proxy = $.proxy( this, 'docClick' );

		$(document).on('click.' + this.clickoffid, proxy);
	},

	unbindDocClick: function() {
		if (this.proxy) {
			$(document).off('click.' + this.clickoffid, this.proxy);
		}
	}

};

/**
 * Bible namespace, Bible chapter/verse statistics, Book names and abbreviations
 *
 * @license MIT/GLPv2
 * @author John Dyer (http://j.hn/)
 */

if (typeof window.bible == 'undefined')
	window.bible = {};

/**
 * @description ID with chapter/verse statistics and English names
 */
bible.BOOK_DATA = {
"FR":{"name":"Front matter","sortOrder":0,"shortCode":"FR","usfm":"FRT","osis":"Preface",
    "chapters":[null],
    "names":{"eng":["Front matter"]}},
"IN":{"name":"Introduction","sortOrder":1,"shortCode":"IN","usfm":"INT","osis":"Intro",
    "chapters":[null],
    "names":{"eng":["Introduction"]}},
"GN":{"name":"Genesis","sortOrder":2,"shortCode":"GN","usfm":"GEN","osis":"Gen","section":"penta",
    "chapters":[31,25,24,26,32,22,24,22,29,32,32,20,18,24,21,16,27,33,38,18,34,24,20,67,34,35,46,22,35,43,55,32,20,31,29,43,36,30,23,23,57,38,34,34,28,34,31,22,33,26],
    "names":{"eng":["Genesis","Ge","Gen"]}},
"EX":{"name":"Exodus","sortOrder":3,"shortCode":"EX","usfm":"EXO","osis":"Exod","section":"penta",
    "chapters":[22,25,22,31,23,30,25,32,35,29,10,51,22,31,27,36,16,27,25,26,36,31,33,18,40,37,21,43,46,38,18,35,23,35,35,38,29,31,43,38],
    "names":{"eng":["Exodus","Ex","Exo"]}},
"LV":{"name":"Leviticus","sortOrder":4,"shortCode":"LV","usfm":"LEV","osis":"Lev","section":"penta",
    "chapters":[17,16,17,35,19,30,38,36,24,20,47,8,59,57,33,34,16,30,37,27,24,33,44,23,55,46,34],
    "names":{"eng":["Leviticus","Le","Lev"]}},
"NU":{"name":"Numbers","sortOrder":5,"shortCode":"NU","usfm":"NUM","osis":"Num","section":"penta",
    "chapters":[54,34,51,49,31,27,89,26,23,36,35,16,33,45,41,50,13,32,22,29,35,41,30,25,18,65,23,31,40,16,54,42,56,29,34,13],
    "names":{"eng":["Numbers","Nu","Num"]}},
"DT":{"name":"Deuteronomy","sortOrder":6,"shortCode":"DT","usfm":"DEU","osis":"Deut","section":"penta",
    "chapters":[46,37,29,49,33,25,26,20,29,22,32,32,18,29,23,22,20,22,21,20,23,30,25,22,19,19,26,68,29,20,30,52,29,12],
    "names":{"eng":["Deuteronomy","Dt","Deut","Deu","De"]}},
"JS":{"name":"Joshua","sortOrder":7,"shortCode":"JS","usfm":"JOS","osis":"Josh","section":"hist",
    "chapters":[18,24,17,24,15,27,26,35,27,43,23,24,33,15,63,10,18,28,51,9,45,34,16,33],
    "names":{"eng":["Joshua","Js","Jos","Jos","Josh"]}},
"JG":{"name":"Judges","sortOrder":8,"shortCode":"JG","usfm":"JDG","osis":"Judg","section":"hist",
    "chapters":[36,23,31,24,31,40,25,35,57,18,40,15,25,20,20,31,13,31,30,48,25],
    "names":{"eng":["Judges","Jg","Jdg","Jdgs"]}},
"RT":{"name":"Ruth","sortOrder":9,"shortCode":"RT","usfm":"RUT","osis":"Ruth","section":"hist",
    "chapters":[22,23,18,22],
    "names":{"eng":["Ruth","Ru","Rut"]}},
"S1":{"name":"The First Book of Samuel","sortOrder":10,"shortCode":"S1","usfm":"1SA","osis":"1Sam","section":"hist",
    "chapters":[28,36,21,22,12,21,17,22,27,27,15,25,23,52,35,23,58,30,24,42,15,23,29,22,44,25,12,25,11,31,13],
    "names":{"eng":["1 Samuel","1S","1 Sam","1Sam","1 Sa","1Sa","I Samuel","I Sam","I Sa"]}},
"S2":{"name":"The Second Book of Samuel","sortOrder":11,"shortCode":"S2","usfm":"2SA","osis":"2Sam","section":"hist",
    "chapters":[27,32,39,12,25,23,29,18,13,19,27,31,39,33,37,23,29,33,43,26,22,51,39,25],
    "names":{"eng":["2 Samuel","2S","2 Sam","2Sam","2 Sa","2Sa","II Samuel","II Sam","II Sa","IIS"]}},
"K1":{"name":"The First Book of Kings","sortOrder":12,"shortCode":"K1","usfm":"1KI","osis":"1Kgs","section":"hist",
    "chapters":[53,46,28,34,18,38,51,66,28,29,43,33,34,31,34,34,24,46,21,43,29,53],
    "names":{"eng":["1 Kings","1K","1 Kin","1Kin","1 Ki","IK","1Ki","I Kings","I Kin","I Ki"]}},
"K2":{"name":"The Second Book of Kings","sortOrder":13,"shortCode":"K2","usfm":"2KI","osis":"2Kgs","section":"hist",
    "chapters":[18,25,27,44,27,33,20,29,37,36,21,21,25,29,38,20,41,37,37,21,26,20,37,20,30],
    "names":{"eng":["2 Kings","2K","2 Kin","2Kin","2 Ki","IIK","2Ki","II Kings","II Kin","II Ki"]}},
"R1":{"name":"The First Book of Chronicles","sortOrder":14,"shortCode":"R1","usfm":"1CH","osis":"1Chr","section":"hist",
    "chapters":[54,55,24,43,26,81,40,40,44,14,47,40,14,17,29,43,27,17,19,8,30,19,32,31,31,32,34,21,30],
    "names":{"eng":["1 Chronicles","1Ch","1 Chr","1Chr","1 Ch","ICh","I Chronicles","I Chr","I Ch"]}},
"R2":{"name":"The Second Book of Chronicles","sortOrder":15,"shortCode":"R2","usfm":"2CH","osis":"2Chr","section":"hist",
    "chapters":[17,18,17,22,14,42,22,18,31,19,23,16,22,15,19,14,19,34,11,37,20,12,21,27,28,23,9,27,36,27,21,33,25,33,27,23],
    "names":{"eng":["2 Chronicles","2Ch","2 Chr","2 Chr","2Chr","2 Ch","IICh","II Chronicles","II Chr","II Ch"]}},
"ER":{"name":"Ezra","sortOrder":16,"shortCode":"ER","usfm":"EZR","osis":"Ezra","section":"hist",
    "chapters":[11,70,13,24,17,22,28,36,15,44],
    "names":{"eng":["Ezra","Ezr"]}},
"NH":{"name":"Nehemiah","sortOrder":17,"shortCode":"NH","usfm":"NEH","osis":"Neh","section":"hist",
    "chapters":[11,20,32,23,19,19,73,18,38,39,36,47,31],
    "names":{"eng":["Nehemiah","Ne","Neh","Neh","Ne"]}},
"ET":{"name":"Esther","sortOrder":18,"shortCode":"ET","usfm":"EST","osis":"Esth","section":"hist",
    "chapters":[22,23,15,17,14,14,10,17,32,3],
    "names":{"eng":["Esther","Es","Est","Esth"]}},
"JB":{"name":"Job","sortOrder":19,"shortCode":"JB","usfm":"JOB","osis":"Job","section":"poet",
    "chapters":[22,13,26,21,27,30,21,22,35,22,20,25,28,22,35,22,16,21,29,29,34,30,17,25,6,14,23,28,25,31,40,22,33,37,16,33,24,41,30,24,34,17],
    "names":{"eng":["Job","Jb","Job"]}},
"PS":{"name":"Psalms","sortOrder":20,"shortCode":"PS","usfm":"PSA","osis":"Ps","section":"poet",
    "chapters":[6,12,8,8,12,10,17,9,20,18,7,8,6,7,5,11,15,50,14,9,13,31,6,10,22,12,14,9,11,12,24,11,22,22,28,12,40,22,13,17,13,11,5,26,17,11,9,14,20,23,19,9,6,7,23,13,11,11,17,12,8,12,11,10,13,20,7,35,36,5,24,20,28,23,10,12,20,72,13,19,16,8,18,12,13,17,7,18,52,17,16,15,5,23,11,13,12,9,9,5,8,28,22,35,45,48,43,13,31,7,10,10,9,8,18,19,2,29,176,7,8,9,4,8,5,6,5,6,8,8,3,18,3,3,21,26,9,8,24,13,10,7,12,15,21,10,20,14,9,6],
    "names":{"eng":["Psalm","Ps","Psa"]}},
"PR":{"name":"Proverbs","sortOrder":21,"shortCode":"PR","usfm":"PRO","osis":"Prov","section":"poet",
    "chapters":[33,22,35,27,23,35,27,36,18,32,31,28,25,35,33,33,28,24,29,30,31,29,35,34,28,28,27,28,27,33,31],
    "names":{"eng":["Proverbs","Pr","Prov","Pro"]}},
"EC":{"name":"Ecclesiastes","sortOrder":22,"shortCode":"EC","usfm":"ECC","osis":"Eccl","section":"poet",
    "chapters":[18,26,22,16,20,12,29,17,18,20,10,14],
    "names":{"eng":["Ecclesiastes","Ec","Ecc","Qohelet"]}},
"SS":{"name":"Song of Solomon","sortOrder":23,"shortCode":"SS","usfm":"SNG","osis":"Song","section":"poet",
    "chapters":[17,17,11,16,16,13,13,14],
    "names":{"eng":["Song of Songs","So","Sos","Song of Solomon","SOS","SongOfSongs","SongofSolomon","Canticle of Canticles"]}},
"IS":{"name":"Isaiah","sortOrder":24,"shortCode":"IS","usfm":"ISA","osis":"Isa","section":"majorp",
    "chapters":[31,22,26,6,30,13,25,22,21,34,16,6,22,32,9,14,14,7,25,6,17,25,18,23,12,21,13,29,24,33,9,20,24,17,10,22,38,22,8,31,29,25,28,28,25,13,15,22,26,11,23,15,12,17,13,12,21,14,21,22,11,12,19,12,25,24],
    "names":{"eng":["Isaiah","Is","Isa"]}},
"JR":{"name":"Jeremiah","sortOrder":25,"shortCode":"JR","usfm":"JER","osis":"Jer","section":"majorp",
    "chapters":[19,37,25,31,31,30,34,22,26,25,23,17,27,22,21,21,27,23,15,18,14,30,40,10,38,24,22,17,32,24,40,44,26,22,19,32,21,28,18,16,18,22,13,30,5,28,7,47,39,46,64,34],
    "names":{"eng":["Jeremiah","Je","Jer"]}},
"LM":{"name":"Lamentations","sortOrder":26,"shortCode":"LM","usfm":"LAM","osis":"Lam","section":"poet",
    "chapters":[22,22,66,22,22],
    "names":{"eng":["Lamentations","La","Lam","Lament"]}},
"EK":{"name":"Ezekiel","sortOrder":27,"shortCode":"EK","usfm":"EZK","osis":"Ezek","section":"majorp",
    "chapters":[28,10,27,17,17,14,27,18,11,22,25,28,23,23,8,63,24,32,14,49,32,31,49,27,17,21,36,26,21,26,18,32,33,31,15,38,28,23,29,49,26,20,27,31,25,24,23,35],
    "names":{"eng":["Ezekiel","Ek","Ezek","Eze"]}},
"DN":{"name":"Daniel","sortOrder":28,"shortCode":"DN","usfm":"DAN","osis":"Dan","section":"majorp",
    "chapters":[21,49,30,37,31,28,28,27,27,21,45,13],
    "names":{"eng":["Daniel","Da","Dan","Dl","Dnl"]}},
"HS":{"name":"Hosea","sortOrder":29,"shortCode":"HS","usfm":"HOS","osis":"Hos","section":"minorp",
    "chapters":[11,23,5,19,15,11,16,14,17,15,12,14,16,9],
    "names":{"eng":["Hosea","Ho","Hos"]}},
"JL":{"name":"Joel","sortOrder":30,"shortCode":"JL","usfm":"JOL","osis":"Joel","section":"minorp",
    "chapters":[20,32,21],
    "names":{"eng":["Joel","Jl","Joel","Joe"]}},
"AM":{"name":"Amos","sortOrder":31,"shortCode":"AM","usfm":"AMO","osis":"Amos","section":"minorp",
    "chapters":[15,16,15,13,27,14,17,14,15],
    "names":{"eng":["Amos","Am","Amos","Amo"]}},
"OB":{"name":"Obadiah","sortOrder":32,"shortCode":"OB","usfm":"OBA","osis":"Obad","section":"minorp",
    "chapters":[21],
    "names":{"eng":["Obadiah","Ob","Oba","Obd","Odbh"]}},
"JH":{"name":"Jonah","sortOrder":33,"shortCode":"JH","usfm":"JON","osis":"Jonah","section":"minorp",
    "chapters":[17,10,10,11],
    "names":{"eng":["Jonah","Jh","Jon","Jnh"]}},
"MC":{"name":"Micah","sortOrder":34,"shortCode":"MC","usfm":"MIC","osis":"Mic","section":"minorp",
    "chapters":[16,13,12,13,15,16,20],
    "names":{"eng":["Micah","Mi","Mic"]}},
"NM":{"name":"Nahum","sortOrder":35,"shortCode":"NM","usfm":"NAM","osis":"Nah","section":"minorp",
    "chapters":[15,13,19],
    "names":{"eng":["Nahum","Na","Nah","Nah","Na"]}},
"HK":{"name":"Habakkuk","sortOrder":36,"shortCode":"HK","usfm":"HAB","osis":"Hab","section":"minorp",
    "chapters":[17,20,19],
    "names":{"eng":["Habakkuk","Hb","Hab","Hk","Habk"]}},
"ZP":{"name":"Zephaniah","sortOrder":37,"shortCode":"ZP","usfm":"ZEP","osis":"Zeph","section":"minorp",
    "chapters":[18,15,20],
    "names":{"eng":["Zephaniah","Zp","Zep","Zeph"]}},
"HG":{"name":"Haggai","sortOrder":38,"shortCode":"HG","usfm":"HAG","osis":"Hag","section":"minorp",
    "chapters":[15,23],
    "names":{"eng":["Haggai","Ha","Hag","Hagg"]}},
"ZC":{"name":"Zechariah","sortOrder":39,"shortCode":"ZC","usfm":"ZEC","osis":"Zech","section":"minorp",
    "chapters":[21,13,10,14,11,15,14,23,17,12,17,14,9,21],
    "names":{"eng":["Zechariah","Zc","Zech","Zec"]}},
"ML":{"name":"Malachi","sortOrder":40,"shortCode":"ML","usfm":"MAL","osis":"Mal","section":"minorp",
    "chapters":[14,17,18,6],
    "names":{"eng":["Malachi","Ml","Mal","Mlc"]}},
"TB":{"name":"Tobit","sortOrder":41,"shortCode":"TB","usfm":"TOB","osis":"Tob",
    "chapters":[22,14,17,21,22,17,18],
    "names":{"eng":["Tobit"]}},
"JT":{"name":"Judith","sortOrder":42,"shortCode":"JT","usfm":"JDT","osis":"Jdt",
    "chapters":[16,28,10,15,24,21,32,36,14,23,23,20,20,19,13,25],
    "names":{"eng":["Judith"]}},
"EG":{"name":"Esther (Greek)","sortOrder":43,"shortCode":"EG","usfm":"ESG","osis":"EsthGr",
    "chapters":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    "names":{"eng":["Esther (Greek)"]}},
"AE":{"name":"Additions to Esther","sortOrder":44,"shortCode":"AE","usfm":"ADE","osis":"AddEsth",
    "chapters":[],
    "names":{"eng":["Additions to Esther"]}},
"WS":{"name":"Wisdom of Solomon","sortOrder":45,"shortCode":"WS","usfm":"WIS","osis":"Wis",
    "chapters":[],
    "names":{"eng":["Wisdom","Wisdom of Solomon"]}},
"SR":{"name":"Sirach","sortOrder":46,"shortCode":"SR","usfm":"SIR","osis":"Sir",
    "chapters":[],
    "names":{"eng":["Sirach","Ecclesiasticus"]}},
"BR":{"name":"Baruch","sortOrder":47,"shortCode":"BR","usfm":"BAR","osis":"Bar",
    "chapters":[],
    "names":{"eng":["Baruch"]}},
"LJ":{"name":"Letter of Jeremiah","sortOrder":48,"shortCode":"LJ","usfm":"LJE","osis":"EpJer",
    "chapters":[],
    "names":{"eng":["Letter of Jeremiah"]}},
"PA":{"name":"Song of the Three Children","sortOrder":49,"shortCode":"PA","usfm":"S3Y","osis":"PrAzar",
    "chapters":[],
    "names":{"eng":["Prayer of Azariah"]}},
"SN":{"name":"Susanna","sortOrder":50,"shortCode":"SN","usfm":"SUS","osis":"Sus",
    "chapters":[],
    "names":{"eng":["Susanna"]}},
"BL":{"name":"Bel and the Dragon","sortOrder":51,"shortCode":"BL","usfm":"BEL","osis":"Bel",
    "chapters":[],
    "names":{"eng":["Bel and the Dragon"]}},
"M1":{"name":"1 Maccabees","sortOrder":52,"shortCode":"M1","usfm":"1MA","osis":"1Macc",
    "chapters":[],
    "names":{"eng":["1 Maccabees"]}},
"M2":{"name":"2 Maccabees","sortOrder":53,"shortCode":"M2","usfm":"2MA","osis":"2Macc",
    "chapters":[],
    "names":{"eng":["2 Maccabees"]}},
"E1":{"name":"1 Esdras","sortOrder":54,"shortCode":"E1","usfm":"1ES","osis":"1Esd",
    "chapters":[],
    "names":{"eng":["1 Esdras"]}},
"PX":{"name":"Psalm 151","sortOrder":56,"shortCode":"PX","usfm":"PS2","osis":"AddPs",
    "chapters":[null],
    "names":{"eng":["Psalm 151"]}},
"PN":{"name":"Prayer of Manasseh","sortOrder":56,"shortCode":"PN","usfm":"MAN","osis":"PrMan",
    "chapters":[null],
    "names":{"eng":["Prayer of Manasseh"]}},
"M3":{"name":"3 Maccabees","sortOrder":57,"shortCode":"M3","usfm":"3MA","osis":"3Macc",
    "chapters":[],
    "names":{"eng":["3 Maccabees"]}},
"E2":{"name":"2 Esdras","sortOrder":58,"shortCode":"E2","usfm":"2ES","osis":"2Esd",
    "chapters":[],
    "names":{"eng":["2 Esdras","5 Ezra"]}},
"M4":{"name":"4 Maccabees","sortOrder":59,"shortCode":"M4","usfm":"4MA","osis":"4Macc",
    "chapters":[],
    "names":{"eng":["4 Maccabees"]}},
"OS":{"name":"Odes of Solomon","sortOrder":60,"shortCode":"OS","usfm":"ODS","osis":"OdesSol",
    "chapters":[],
    "names":{"eng":["Odes of Solomon"]}},
"SP":{"name":"Psalms of Solomon","sortOrder":61,"shortCode":"SP","usfm":"PSS","osis":"PssSol",
    "chapters":[],
    "names":{"eng":["Psalms of Solomon"]}},
"LL":{"name":"Epistle to the Laodiceans","sortOrder":62,"shortCode":"LL","usfm":"EPL","osis":"EpLao",
    "chapters":[],
    "names":{"eng":["Epistle to the Laodiceans"]}},
"N1":{"name":"Ethiopic Apocalypse of Enoch","sortOrder":63,"shortCode":"N1","usfm":"1EN","osis":"1En",
    "chapters":[],
    "names":{"eng":["Ethiopic Apocalypse of Enoch"]}},
"JE":{"name":"Jubilees","sortOrder":64,"shortCode":"JE","usfm":"JUB","osis":"Jub",
    "chapters":[],
    "names":{"eng":["Jubilees"]}},
"AD":{"name":"Additions to Daniel","sortOrder":65,"shortCode":"AD","usfm":"DNT","osis":"AddDan",
    "chapters":[null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    "names":{"eng":["Additions to Daniel"]}},
"DG":{"name":"Daniel (Greek)","sortOrder":66,"shortCode":"DG","usfm":"DAG","osis":"DanGr",
    "chapters":[null,null,null,null,null,null,null,null,null,null,null,null],
    "names":{"eng":["Daniel (Greek)"]}},
"MT":{"name":"Matthew","sortOrder":70,"shortCode":"MT","usfm":"MAT","osis":"Matt","section":"gospel",
    "chapters":[25,23,17,25,48,34,29,34,38,42,30,50,58,36,39,28,27,35,30,34,46,46,39,51,46,75,66,20],
    "names":{"eng":["Matthew","Mt","Matt","Mat"]}},
"MK":{"name":"Mark","sortOrder":71,"shortCode":"MK","usfm":"MRK","osis":"Mark","section":"gospel",
    "chapters":[45,28,35,41,43,56,37,38,50,52,33,44,37,72,47,20],
    "names":{"eng":["Mark","Mk","Mar","Mrk"]}},
"LK":{"name":"Luke","sortOrder":72,"shortCode":"LK","usfm":"LUK","osis":"Luke","section":"gospel",
    "chapters":[80,52,38,44,39,49,50,56,62,42,54,59,35,35,32,31,37,43,48,47,38,71,56,53],
    "names":{"eng":["Luke","Lk","Luk","Lu"]}},
"JN":{"name":"John","sortOrder":73,"shortCode":"JN","usfm":"JHN","osis":"John","section":"gospel",
    "chapters":[51,25,36,54,47,71,53,59,41,42,57,50,38,31,27,33,26,40,42,31,25],
    "names":{"eng":["John","Jn","Joh","Jo"]}},
"AC":{"name":"Acts","sortOrder":74,"shortCode":"AC","usfm":"ACT","osis":"Acts","section":"acts",
    "chapters":[26,47,26,37,42,15,60,40,43,48,30,25,52,28,41,40,34,28,41,38,40,30,35,27,27,32,44,31],
    "names":{"eng":["Acts","Ac","Act"]}},
"RM":{"name":"Romans","sortOrder":75,"shortCode":"RM","usfm":"ROM","osis":"Rom","section":"paul",
    "chapters":[32,29,31,25,21,23,25,39,33,21,36,21,14,23,33,27],
    "names":{"eng":["Romans","Ro","Rom","Rmn","Rmns"]}},
"C1":{"name":"Paul's First Letter to the Corinthians","sortOrder":76,"shortCode":"C1","usfm":"1CO","osis":"1Cor","section":"paul",
    "chapters":[31,16,23,21,13,20,40,13,27,33,34,31,13,40,58,24],
    "names":{"eng":["1 Corinthians","1Co","1 Cor","1Cor","ICo","1 Co","1Co","I Corinthians","I Cor","I Co"]}},
"C2":{"name":"Paul's Second Lettor to the Corinthians","sortOrder":77,"shortCode":"C2","usfm":"2CO","osis":"2Cor","section":"paul",
    "chapters":[24,17,18,18,21,18,16,24,15,18,33,21,14],
    "names":{"eng":["2 Corinthians","2Co","2 Cor","2Cor","IICo","2 Co","2Co","II Corinthians","II Cor","II Co"]}},
"GL":{"name":"Paul's Letter to the Galatians","sortOrder":78,"shortCode":"GL","usfm":"GAL","osis":"Gal","section":"paul",
    "chapters":[24,21,29,31,26,18],
    "names":{"eng":["Galatians","Ga","Gal","Gltns"]}},
"EP":{"name":"Paul's Letter to the Ephesians","sortOrder":79,"shortCode":"EP","usfm":"EPH","osis":"Eph","section":"paul",
    "chapters":[23,22,21,32,33,24],
    "names":{"eng":["Ephesians","Ep","Eph","Ephn"]}},
"PP":{"name":"Paul's Letter to the Philippians","sortOrder":80,"shortCode":"PP","usfm":"PHP","osis":"Phil","section":"paul",
    "chapters":[30,30,21,23],
    "names":{"eng":["Philippians","Pp","Phi","Phil","Phi"]}},
"CL":{"name":"Paul's Letter to the Colossians","sortOrder":81,"shortCode":"CL","usfm":"COL","osis":"Col","section":"paul",
    "chapters":[29,23,25,18],
    "names":{"eng":["Colossians","Co","Col","Colo","Cln","Clns"]}},
"H1":{"name":"Paul's First Letter to the Thessalonians","sortOrder":82,"shortCode":"H1","usfm":"1TH","osis":"1Thess","section":"paul",
    "chapters":[10,20,13,18,28],
    "names":{"eng":["1 Thessalonians","1Th","1 Thess","1Thess","ITh","1 Thes","1Thes","1 The","1The","1 Th","1Th","I Thessalonians","I Thess","I The","I Th"]}},
"H2":{"name":"Paul's Second Letter to the Thessalonians","sortOrder":83,"shortCode":"H2","usfm":"2TH","osis":"2Thess","section":"paul",
    "chapters":[12,17,18],
    "names":{"eng":["2 Thessalonians","2Th","2 Thess","2 Thess","2Thess","IITh","2 Thes","2Thes","2 The","2The","2 Th","2Th","II Thessalonians","II Thess","II The","II Th"]}},
"T1":{"name":"Paul's First Letter to Timothy","sortOrder":84,"shortCode":"T1","usfm":"1TI","osis":"1Tim","section":"paul",
    "chapters":[20,15,16,16,25,21],
    "names":{"eng":["1 Timothy","1Ti","1 Tim","1Tim","1 Ti","ITi","1Ti","I Timothy","I Tim","I Ti"]}},
"T2":{"name":"Paul's Second Letter to Timothy","sortOrder":85,"shortCode":"T2","usfm":"2TI","osis":"2Tim","section":"paul",
    "chapters":[18,26,17,22],
    "names":{"eng":["2 Timothy","2Ti","2 Tim","2 Tim","2Tim","2 Ti","IITi","2Ti","II Timothy","II Tim","II Ti"]}},
"TT":{"name":"Paul's Letter to Titus","sortOrder":86,"shortCode":"TT","usfm":"TIT","osis":"Titus","section":"paul",
    "chapters":[16,15,15],
    "names":{"eng":["Titus","Ti","Tit","Tt","Ts"]}},
"PM":{"name":"Paul's Letter to Philemon","sortOrder":87,"shortCode":"PM","usfm":"PHM","osis":"Phlm","section":"paul",
    "chapters":[25],
    "names":{"eng":["Philemon","Pm","Phile","Phile","Philm","Pm"]}},
"HB":{"name":"The Letter to the Hebrews","sortOrder":88,"shortCode":"HB","usfm":"HEB","osis":"Heb","section":"general",
    "chapters":[14,18,19,16,14,20,28,13,28,39,40,29,25],
    "names":{"eng":["Hebrews","He","Heb","Hw"]}},
"JM":{"name":"The Letter from James","sortOrder":89,"shortCode":"JM","usfm":"JAS","osis":"Jas","section":"general",
    "chapters":[27,26,18,17,20],
    "names":{"eng":["James","Jm","Jam","Jas","Ja"]}},
"P1":{"name":"The First Letter from Peter","sortOrder":90,"shortCode":"P1","usfm":"1PE","osis":"1Pet","section":"general",
    "chapters":[25,25,22,19,14],
    "names":{"eng":["1 Peter","1P","1 Pet","1Pet","IPe","1P","I Peter","I Pet","I Pe"]}},
"P2":{"name":"The Second Letter from Peter","sortOrder":91,"shortCode":"P2","usfm":"2PE","osis":"2Pet","section":"general",
    "chapters":[21,22,18],
    "names":{"eng":["2 Peter","2P","2 Pet","2Pet","2Pe","IIP","II Peter","II Pet","II Pe"]}},
"J1":{"name":"John's First Letter","sortOrder":92,"shortCode":"J1","usfm":"1JN","osis":"1John","section":"general",
    "chapters":[10,29,24,21,21],
    "names":{"eng":["1 John","1J","1 Jn","1Jn","1 Jo","IJo","I John","I Jo","I Jn"]}},
"J2":{"name":"John's Second Letter","sortOrder":93,"shortCode":"J2","usfm":"2JN","osis":"2John","section":"general",
    "chapters":[13],
    "names":{"eng":["2 John","2J","2 Jn","2Jn","2 Jo","IIJo","II John","II Jo","II Jn"]}},
"J3":{"name":"John's Third Letter","sortOrder":94,"shortCode":"J3","usfm":"3JN","osis":"3John","section":"general",
    "chapters":[14],
    "names":{"eng":["3 John","3J","3 Jn","3 Jn","3Jn","3 Jo","IIIJo","III John","III Jo","III Jn"]}},
"JD":{"name":"Jude's Letter","sortOrder":95,"shortCode":"JD","usfm":"JUD","osis":"Jude","section":"general",
    "chapters":[25],
    "names":{"eng":["Jude","Jude","Jude"]}},
"RV":{"name":"The Revelation to John","sortOrder":96,"shortCode":"RV","usfm":"REV","osis":"Rev","section":"rev",
    "chapters":[20,29,22,11,14,17,17,13,21,11,19,17,18,20,8,21,18,24,21,15,27,20],
    "names":{"eng":["Revelation","Re","Rev","Rvltn"]}},
"BK":{"name":"Back matter","sortOrder":97,"shortCode":"BK","usfm":"BAK","osis":"Back",
    "chapters":[null],
    "names":{"eng":["Back matter"]}},
"OH":{"name":"Other","sortOrder":98,"shortCode":"OH","usfm":"OTH","osis":"Other",
    "chapters":[null],
    "names":{"eng":["Other"]}},
"XA":{"name":"XXA","sortOrder":99,"shortCode":"XA","usfm":"XXA","osis":"XXA",
    "chapters":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    "names":{"eng":["XXA"]}},
"XB":{"name":"XXB","sortOrder":100,"shortCode":"XB","usfm":"XXB","osis":"XXB",
    "chapters":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    "names":{"eng":["XXB"]}},
"XC":{"name":"XXC","sortOrder":101,"shortCode":"XC","usfm":"XXC","osis":"XXC",
    "chapters":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    "names":{"eng":["XXC"]}},
"XD":{"name":"XXD","sortOrder":102,"shortCode":"XD","usfm":"XXD","osis":"XXD",
    "chapters":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    "names":{"eng":["XXD"]}},
"XE":{"name":"XXE","sortOrder":103,"shortCode":"XE","usfm":"XXE","osis":"XXE",
    "chapters":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    "names":{"eng":["XXE"]}},
"XF":{"name":"XXF","sortOrder":104,"shortCode":"XF","usfm":"XXF","osis":"XXF",
    "chapters":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    "names":{"eng":["XXF"]}},
"XG":{"name":"XXG","sortOrder":105,"shortCode":"XG","usfm":"XXG","osis":"XXG",
    "chapters":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    "names":{"eng":["XXG"]}},
"GS":{"name":"Glossary","sortOrder":106,"shortCode":"GS","usfm":"GLO","osis":"Glossary",
    "chapters":[null],
    "names":{"eng":["Glossary"]}},
"CN":{"name":"Concordance","sortOrder":107,"shortCode":"CN","usfm":"CNC","osis":"Conc",
    "chapters":[null],
    "names":{"eng":["Concordance"]}},
"TX":{"name":"Topical Index","sortOrder":108,"shortCode":"TX","usfm":"TDX","osis":"Topic",
    "chapters":[null],
    "names":{"eng":["Topical Index"]}},
"NX":{"name":"Names Index","sortOrder":109,"shortCode":"NX","usfm":"NDX","osis":"Name",
    "chapters":[null],
    "names":{"eng":["Names Index"]}}
}

bible.EXTRA_MATTER = ["FR","IN","BK","OH","XA","XB","XC","XD","XE","XF","XG","GS","CN","TX","NX"];

/**
 * @description Default order of Old Testament books
 */
bible.OT_BOOKS_OSIS = ["Gen","Exod","Lev","Num","Deut","Josh","Judg","Ruth","1Sam","2Sam","1Kgs","2Kgs","1Chr","2Chr","Ezra","Neh","Esth","Job","Ps","Prov","Eccl","Song","Isa","Jer","Lam","Ezek","Dan","Hos","Joel","Amos","Obad","Jonah","Mic","Nah","Hab","Zeph","Hag","Zech","Mal"];

bible.OT_BOOKS_USFM = ["GEN","EXO","LEV","NUM","DEU","JOS","JDG","RUT","1SA","2SA","1KI","2KI","1CH","2CH","EZR","NEH","EST","JOB","PSA","PRO","ECC","SNG","ISA","JER","LAM","EZK","DAN","HOS","JOL","AMO","OBA","JON","MIC","NAM","HAB","ZEP","HAG","ZEC","MAL"];

bible.OT_BOOKS =
["GN","EX","LV","NU","DT","JS","JG","RT","S1","S2","K1","K2","R1","R2","ER","NH","ET","JB","PS","PR","EC","SS","IS","JR","LM","EK","DN","HS","JL","AM","OB","JH","MC","NM","HK","ZP","HG","ZC","ML"];


/**
 * @description Default order of New Testament books
 */
bible.NT_BOOKS_OSIS = ["Matt","Mark","Luke","John","Acts","Rom","1Cor","2Cor","Gal","Eph","Phil","Col","1Thess","2Thess","1Tim","2Tim","Titus","Phlm","Heb","Jas","1Pet","2Pet","1John","2John","3John","Jude","Rev"];

bible.NT_BOOKS_USFM = ["MAT","MRK","LUK","JHN","ACT","ROM","1CO","2CO","GAL","EPH","PHP","COL","1TH","2TH","1TI","2TI","TIT","PHM","HEB","JAS","1PE","2PE","1JN","2JN","3JN","JUD","REV"];

bible.NT_BOOKS = ["MT","MK","LK","JN","AC","RM","C1","C2","GL","EP","PP","CL","H1","H2","T1","T2","TT","PM","HB","JM","P1","P2","J1","J2","J3","JD","RV"];

/**
 * @description Default order of Apocryphal books
 */
bible.AP_BOOKS_OSIS = ["Tob","Jdt","EsthGr","AddEsth","Wis","Sir","Bar","EpJer","PrAzar","Sus","Bel","1Macc","2Macc","3Macc","4Macc","1Esd","2Esd","Ps151"];

bible.AP_BOOKS_USFM =
["TOB","JDT","ESG","ADE","WIS","SIR","BAR","LJE","PA","SUS","BEL","1MA","2MA","1ES"]

bible.AP_BOOKS =
["TB","JT","ED","AE","WS","SR","BR","LJ","S3Y","SN","BL","M1","M2","E1"]


/**
 * @description Default order of books
 */
bible.DEFAULT_BIBLE = bible.OT_BOOKS.concat(bible.NT_BOOKS);
bible.DEFAULT_BIBLE_OSIS = bible.OT_BOOKS_OSIS.concat(bible.NT_BOOKS_OSIS);
bible.DEFAULT_BIBLE_USFM = bible.OT_BOOKS_USFM.concat(bible.NT_BOOKS_USFM);

/**
 * @description Default order of Bible's with Apocryphal books
 */
bible.APOCRYPHAL_BIBLE = bible.OT_BOOKS.concat(bible.AP_BOOKS, bible.NT_BOOKS);
bible.APOCRYPHAL_BIBLE_USFM = bible.OT_BOOKS_USFM.concat(bible.AP_BOOKS_USFM, bible.NT_BOOKS_USFM);


/**
 * @description Adds names in bulk for a language (each version contains their own list of book names)
 */
bible.addNames = function(lang, bookList, namesData) {
	for (var i in bookList) {
		var dbsCode = bookList[i],
			bookInfo = bible.BOOK_DATA[ dbsCode ],
			names = namesData[i];

		if (typeof bookInfo != 'undefined') {

			if (typeof names === 'string') {
				names = [names];
			}

			if (!bookInfo.names[lang]) {
				bookInfo.names[lang] = [];
			}

			// bookInfo.names[lang] = names;
			bookInfo.names[lang].splice(bookInfo.names[lang].length-1, 0, names);

		}
	}
}


/**
 * @description Used in selecting a chapter since not all Bibles use digits 0-9.
 */
bible.numbers = {
	"default":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150"]
}

/**
 * Bible reference parser
 *
 * @author John Dyer (http://j.hn/)
 */


// Depends on bible.data.js

bible.parseReference = function (textReference, language) {

	var
		bookIndex = -1,
		chapter1 = -1,
		verse1 = -1,
		chapter2 = -1,
		verse2 = -1,
		input = new String(textReference),
		i,
		lang,
		bookid,
		matchingbookid = null,
		matchingLanguage = null,
		afterRange = false,
		afterSeparator = false,
		startedNumber = false,
		currentNumber = '',
		name,
		possibleMatch,
		shortCodeRegex = /^\w{2}\d{1,3}(_\d{1,3})?$/;

	// is short code format (GN2 || GN2_1)
	//bible.shortCodeRegex.lastIndex = 0;
	if (shortCodeRegex.test(input)) {

		var parts = input.split('_'),
			bookChapter = parts[0];


		bookid = bookChapter.substring(0,2).toUpperCase();
		chapter1 = parseInt(bookChapter.substring(2), 10);

		if (parts.length > 1) {
			verse1 = parseInt(parts[1], 10);
		}

		return bible.Reference(bookid, chapter1, verse1, chapter2, verse2, language);
	}

	// check books for DBS, OSIS, USFM


	// go through all books and test all names
	for (bookid in bible.BOOK_DATA) {

		// match id?
		possibleMatch = input.substring(0, Math.floor(bookid.length, input.length)).toLowerCase();
		var nextIsSeparator = input.length > possibleMatch.length ? /(\d|\.|\s)/.test(input.substr(possibleMatch.length, 1)) : false;
		if (possibleMatch == bookid.toLowerCase() && nextIsSeparator) {
			matchingbookid = bookid;
			input = input.substring(bookid.length);
			//matchingLanguage = 'eng';
			break;
		}

		// if no direct match on OSIS id, then go through names in each language
		for (lang in bible.BOOK_DATA[bookid].names) {

			// test each name starting with the full name, then short code, then abbreviation, then alternates
			for (var i=0, il=bible.BOOK_DATA[bookid].names[lang].length; i<il; i++) {

				name = new String(bible.BOOK_DATA[bookid].names[lang][i]).toLowerCase();
				possibleMatch = input.substring(0, Math.floor(name.length, input.length)).toLowerCase();

				if (possibleMatch == name) {
					matchingbookid = bookid;
					matchingLanguage = lang;
					input = input.substring(name.length);
					break; // out of names
				}
			}

			if (matchingbookid != null)
				break;	// out of languages

		}
		if (matchingbookid != null)
			break; // out of books
	}

	if (matchingbookid  == null)
		return null;

	// pull of _10_10 => 10_10
	if (input.substring(0,1) == '_') {
		input = input.substring(1)
	}

	for (i = 0; i < input.length; i++) {
		var c = input.charAt(i);

		if (c == ' ' || isNaN(c)) {
			if (!startedNumber)
				continue;

			if (c == '-') {
				afterRange = true;
				afterSeparator = false;
			} else if (c == ':' || c == ',' || c == '.' || c == '_') {
				afterSeparator = true;
			} else {
				// ignore
			}

			// reset
			currentNumber = '';
			startedNumber = false;

		} else {
			startedNumber = true;
			currentNumber += c;

			if (afterSeparator) {
				if (afterRange) {
					verse2 = parseInt(currentNumber);
				} else { // 1:1
					verse1 = parseInt(currentNumber);
				}
			} else {
				if (afterRange) {
					chapter2 = parseInt(currentNumber);
				} else { // 1
					chapter1 = parseInt(currentNumber);
				}
			}
		}
	}

	// reassign 1:1-2
	if (chapter1 > 0 && verse1 > 0 && chapter2 > 0 && verse2 <= 0) {
		verse2 = chapter2;
		chapter2 = chapter1;
	}
	// fix 1-2:5
	if (chapter1 > 0 && verse1 <= 0 && chapter2 > 0 && verse2 > 0) {
		verse1 = 1;
	}

	// just book
	if (bookIndex > -1 && chapter1 <= 0 && verse1 <= 0 && chapter2 <= 0 && verse2 <= 0) {
		chapter1 = 1;
		//verse1 = 1;
	}

	// validate max chapter
	if (chapter1 == -1) {
		chapter1 = 1;
	} else if (bible.BOOK_DATA[matchingbookid].chapters && bible.BOOK_DATA[matchingbookid].chapters.length > 0 && chapter1 > bible.BOOK_DATA[matchingbookid].chapters.length) {
		chapter1 = bible.BOOK_DATA[matchingbookid].chapters.length;
		if (verse1 > 0)
			verse1 = 1;
	}

	// validate max verse
	/*
	if (verse1 == -1) {
	verse1 = 1;
	} else
	*/
	if (bible.BOOK_DATA[matchingbookid].chapters && bible.BOOK_DATA[matchingbookid].chapters.length > 0 && verse1 > bible.BOOK_DATA[matchingbookid].chapters[chapter1 - 1]) {
		verse1 = bible.BOOK_DATA[matchingbookid].chapters[chapter1 - 1];
	}
	if (verse2 <= verse1) {
		chapter2 = -1;
		verse2 = -1;
	}

	// finalize
	return bible.Reference(matchingbookid, chapter1, verse1, chapter2, verse2, language);

}

bible.Reference = function () {

	var
		_bookid = -1,
		_chapter1 = -1,
		_verse1 = -1,
		_chapter2 = -1,
		_verse2 = -1,
		_language = 'eng';

	if (arguments.length == 1 && typeof arguments[0] == 'string') { // a string that needs to be parsed
		return bible.parseReference(arguments[0]);

	} else if (arguments.length == 2 && typeof arguments[0] == 'string' && typeof arguments[1] == 'string') { // verse, lang
		return bible.parseReference(arguments[0], arguments[1]);

	} else if (arguments.length >= 2 && typeof arguments[0] == 'string' && typeof arguments[1] == 'number'){
		_bookid = arguments[0];
		_chapter1 = arguments[1];
		if (arguments.length >= 3) _verse1 = arguments[2];
		if (arguments.length >= 4) _chapter2 = arguments[3];
		if (arguments.length >= 5) _verse2 = arguments[4];
		if (arguments.length >= 6) _language = arguments[5];
	} else {
		return null;
	}

	function padLeft(input, length, s) {
		while (input.length < length)
			input = s + input;
		return input;
	}

	var refObject = {
		bookid: _bookid,
		chapter: _chapter1,
		verse: _verse1,
		chapter1: _chapter1,
		verse1: _verse1,
		chapter2: _chapter2,
		verse2: _verse2,
		language: _language,
		bookList: bible.DEFAULT_BIBLE,

		isValid: function () {
			return (typeof _bookid != 'undefined' && _bookid != null && _chapter1 > 0);
		},

		chapterAndVerse: function (cvSeparator, vvSeparator, ccSeparator) {
			cvSeparator = cvSeparator || ':';
			vvSeparator = vvSeparator || '-';
			ccSeparator = ccSeparator || '-';

			if (this.chapter1 > 0 && this.verse1 <= 0 && this.chapter2 <= 0 && this.verse2 <= 0) // John 1
				return this.chapter1;
			else if (this.chapter1 > 0 && this.verse1 > 0 && this.chapter2 <= 0 && this.verse2 <= 0) // John 1:1
				return this.chapter1 + cvSeparator + this.verse1;
			else if (this.chapter1 > 0 && this.verse1 > 0 && this.chapter2 <= 0 && this.verse2 > 0) // John 1:1-5
				return this.chapter1 + cvSeparator + this.verse1 + vvSeparator + this.verse2;
			else if (this.chapter1 > 0 && this.verse1 <= 0 && this.chapter2 > 0 && this.verse2 <= 0) // John 1-2
				return this.chapter1 + ccSeparator + this.chapter2;
			else if (this.chapter1 > 0 && this.verse1 > 0 && this.chapter2 > 0 && this.verse2 > 0) // John 1:1-2:2
				return this.chapter1 + cvSeparator + this.verse1 + ccSeparator + ((this.chapter1 != this.chapter2) ? this.chapter2 + cvSeparator : '') + this.verse2;
			else
				return 'unknown';
		},

		toFormat: function(format) {

			function padLeft(nr, n, str){
			    return Array(n-String(nr).length+1).join(str||'0')+nr;
			}


			var t = this,
				output = format,
				bookInfo = bible.BOOK_DATA[this.bookid],
				flags = {
					// book number
					'I': function() {
						return bookInfo.sortOrder.toString();
					},
					'II': function() {
						return padLeft(bookInfo.sortOrder.toString(), 2);
					},
					'III': function() {
						return padLeft(bookInfo.sortOrder.toString(), 3);
					},
					// book USFM
					'UUU': function() {
						return bookInfo.usfm.toUpperCase();
					},
					'uuu': function() {
						return bookInfo.usfm.toLowerCase();
					},
					'Uuu': function() {
						return bookInfo.usfm.substring(0,1).toUpperCase() + bookInfo.usfm.substring(1).toLowerCase();
					},
					// DBS format
					'DD': function() {
						return bookInfo.shortCode.toUpperCase();
					},
					'dd': function() {
						return bookInfo.shortCode.toLowerCase();
					},

					// Name
					'NNN': function() {
						var bookName = '',
							bookNames = bookInfo.names[t.language];

						if (typeof bookNames != 'undefined') {
							bookName = bookNames[0];
						} else {
							bookName = bookInfo.names['eng'][0]
						}

						return bookName;
					},
					'N': function() {
						return bookInfo.usfm.substring(0,1).toUpperCase() + bookInfo.usfm.substring(1).toLowerCase();
					},

					// chapter
					'C': function() {
						return t.chapter1.toString();
					},
					'CC': function() {
						return padLeft(t.chapter1.toString(), 2);
					},
					'CCC': function() {
						return padLeft(t.chapter1.toString(), 3);
					},
					// verse
					'V': function() {
						return t.verse1.toString();
					},
					'VV': function() {
						return padLeft(t.verse1.toString(), 2);
					},
					'VVV': function() {
						return padLeft(t.verse1.toString(), 3);
					},
					'##': function() {
						return t.chapterAndVerse();
					}
				};

				// copy number/chapter/verse
				flags['i'] = flags['I'];
				flags['ii'] = flags['II'];
				flags['iii'] = flags['III'];
				flags['c'] = flags['C'];
				flags['cc'] = flags['CC'];
				flags['ccc'] = flags['CCC'];
				flags['v'] = flags['V'];
				flags['vv'] = flags['VV'];
				flags['vvv'] = flags['VVV'];


			// create and sort keys
			var keys = Object.keys(flags);
			keys = keys.sort(function(b, a) {
				if (a.length > b.length) {
					return 1;
				} else if (a.length < b.length) {
					return -1;
				} else {
					return 0;
				}
			});

			// do replacement
			for (var i in keys) {
				var key = keys[i];
				output = output.replace(new RegExp(key, 'g'), flags[key]());
			}

			return output;
		},

		toString: function () {
			if (this.bookid == null) return "invalid";

			var bookName = '',
				bookNames = bible.BOOK_DATA[this.bookid].names[this.language];

			if (typeof bookNames != 'undefined') {
				bookName = bookNames[0];
			} else {
				bookName = bible.BOOK_DATA[this.bookid].names['eng'][0]
			}

			return bookName + ' ' + this.chapterAndVerse();
		},

		toSection: function () {
			if (this.bookid == null) return "invalid";

			return this.bookid + '' + this.chapter1 + (this.verse1 > 0 ? '_' + this.verse1 : '');
		},

/*
		toOsis: function () {
			if (this.bookid == null) return "invalid";

			return this.bookid + '.' + this.chapter1 + (this.verse1 > 0 ? '.' + this.verse1 : '');
		},

		toOsisChapter: function () {
			if (this.bookid == null) return "invalid";

			return this.bookid + '.' + this.chapter1;
		},

		toOsisVerse: function () {
			if (this.bookid == null) return "invalid";

			return this.bookid + '.' + this.chapter1 + '.' + (this.verse1 > 0 ? this.verse1 : '0');
		},
*/

		prevChapter: function () {
			this.verse1 = 1;
			this.chapter2 = -1;
			this.verse2 = -1;
			if (this.chapter1 == 1 && this.bookList.indexOf(this.bookid) == 0) {
				return null;
			} else {
				if (this.chapter1 == 1) {
					// get the previous book
					this.bookid = this.bookList[this.bookList.indexOf(this.bookid)-1];

					// get the last chapter in this book
					this.chapter = this.chapter1 = bible.BOOK_DATA[this.bookid].chapters.length;
				} else {
					// just go back a chapter
					this.chapter = this.chapter1 = this.chapter1 - 1;
				}

			}

			// return the object ()
			return this;
		},

		nextChapter: function () {
			this.verse1 = 1;
			this.chapter2 = -1;
			this.verse2 = -1;

			// check for the last chapter in the last book
			if (this.bookList[this.bookid] == this.bookList.length-1 && bible.BOOK_DATA[this.bookid].chapters.length == this.chapter1) {
				return null;
			} else {

				if (this.chapter1 < bible.BOOK_DATA[this.bookid].chapters.length) {
					// just go up one chapter
					this.chapter = this.chapter1 = this.chapter1+1;

				} else if (this.bookList.indexOf(this.bookid) < this.bookList.length-1) {
					// go to the next book, first chapter
					this.bookid = this.bookList[this.bookList.indexOf(this.bookid)+1];
					this.chapter = this.chapter1 = 1;
				}

			}

			return this;
		},

		isFirstChapter: function () {
			return (this.chapter1 == 1 && this.bookList.indexOf(this.bookid) == 0);
		},

		isLastChapter: function () {
			return (this.bookList[this.bookid] == this.bookList.length-1 && bible.BOOK_DATA[this.bookid].chapters.length == this.chapter1);
		}
	};

	return refObject;
};
bible.utility = {};

/* language tools */
if (typeof(window.bible) == 'undefined')
	window.bible = {};


bible.morphology = {};

// http://wiki.logos.com/Morphology_Codes
//
bible.morphology['robinson'] = {

	format: function(morph) {

		var firstDash = morph.indexOf('-'),
			partOfSpeechKey = (firstDash > -1) ? morph.substring(0, firstDash) : morph,
			partOfSpeech = this.partsOfSpeech[partOfSpeechKey.toUpperCase()],

			parsingInfo = (firstDash > -1) ? morph.substring(firstDash+1) : '',
			formattedParsing = '';

		switch (partOfSpeechKey.toUpperCase()) {
			case 'T':
			case 'N':
			case 'R':
			case 'C':
			case 'D':
			case 'K':
			case 'I':
			case 'X':
			case 'Q':
			case 'F':
			case 'S':
				var c = this.nounCases[parsingInfo.substring(0, 1)];
				var n = this.wordNumber[parsingInfo.substring(1, 2)];
				var g = this.wordGender[parsingInfo.substring(2, 3)];
				formattedParsing = c + ((n) ? ', ' + n + ((g) ? ', ' + g : '') : '');
				break;

			case 'P':

				var firstLetter = parsingInfo.substr(0,1);
				if (firstLetter == '1' || firstLetter == '2') {

					var p = this.wordPerson[parsingInfo.substring(0, 1)];
					var c = this.nounCases[parsingInfo.substring(1, 2)];
					var n = this.wordNumber[parsingInfo.substring(2, 3)];
					formattedParsing = p + ((c) ? ', ' + c + ((n) ? ', ' + n : '') : '');
				} else {
					var c = this.nounCases[parsingInfo.substring(0, 1)];
					var n = this.wordNumber[parsingInfo.substring(1, 2)];
					var g = this.wordGender[parsingInfo.substring(2, 3)];
					formattedParsing = c + ((n) ? ', ' + n + ((g) ? ', ' + g : '') : '');
				}

				break;

			case 'A':
				var c = this.nounCases[parsingInfo.substring(0, 1)];
				var n = this.wordNumber[parsingInfo.substring(1, 2)];
				formattedParsing =   c + ', ' + n;
				break;

			case 'PRT':

				formattedParsing = this.particleTypes[parsingInfo];
				break;

			case 'V':
				var t = '';
				var rem = ''
				if (parsingInfo.substring(0, 1) == '2') {
					t = this.verbTenses[parsingInfo.substring(0, 2)];
					rem = parsingInfo.substring(2);
				} else {
					t = this.verbTenses[parsingInfo.substring(0, 1)];
					rem = parsingInfo.substring(1);
				}
				var v = this.verbVoices[rem.substring(0, 1)];
				var m = this.verbMoods[rem.substring(1, 2)];

				if (rem.length == 2) {
					formattedParsing = t + ', ' + v + ', ' + m;

				} else if (rem.length == 5) {
					var p = this.wordPerson[rem.substring(3, 4)];
					var n = this.wordNumber[rem.substring(4, 5)];
					formattedParsing =  t + ', ' + v + ', ' + m + ', ' + p + ', ' + n;

				} else if (rem.length == 6) {
					var c = this.nounCases[rem.substring(3, 4)];
					var n = this.wordNumber[rem.substring(4, 5)];
					var g = this.wordGender[rem.substring(5, 6)];

					formattedParsing =  t + ', ' + v + ', ' + m + ', ' + c + ', ' + n + ', ' + g;
				}
				break;

				//m = this.verbMoods[parsingInfo.substring(2+offset,3+offset)];
			default:
				formattedParsing =  parsingInfo;

		}

		return (typeof partOfSpeech != 'undefined' ? partOfSpeech + (formattedParsing != '' ? ': ' : '') : '') + formattedParsing;

	},

	partsOfSpeech: {
		N: 'noun',
		A: 'adjective',
		T: 'article',
		V: 'verb',
		P: 'personal pronoun',
		R: 'relative pronoun',
		C: 'reciprocal pronoun',
		D: 'demonstrative pronoun',
		K: 'correlative pronoun',
		I: 'interrogative pronoun',
		X: 'indefinite pronoun',
		Q: 'correlative or interrogative pronoun',
		F: 'reflexive pronoun',
		S: 'posessive pronoun',
		ADV: 'adverb',
		CONJ: 'conjunction',
		COND: 'cond',
		PRT: 'particle',
		PREP: 'preposition',
		INJ: 'interjection',
		ARAM: 'aramaic',
		HEB: 'hebrew'
	},

	getPartofSpeech: function(partOfSpeechKey) {
		var full = this.partsOfSpeech[partOfSpeechKey.toUpperCase()];

		return (full != null) ? full : '?';
	},

	nounCases: {
		'N': 'nominative',
		'V': 'vocative',
		'G': 'genitive',
		'D': 'dative',
		'A': 'accusative',
		'P': 'proper name'
	},

	wordNumber: {
		'S': 'singular',
		'P': 'plural'
	},

	wordGender: {
		'M': 'masculine',
		'F': 'feminine',
		'N': 'neuter'
	},

	wordPerson: {
		'1': '1st',
		'2': '2nd',
		'3': '3rd'
	},

	verbTenses: {
		'P': 'present',
		'I': 'imperfect',
		'F': 'future',
		'2F': 'second future',
		'A': 'aorist',
		'2A': 'second aorist',
		'R': 'perfect',
		'2R': 'second perfect',
		'L': 'pluperfect',
		'2L': 'second pluperfect',
		'X': 'no tense stated'
	},

	verbVoices: {
		'A': 'active',
		'M': 'middle',
		'P': 'passive',
		'E': 'middle or passive',
		'D': 'middle deponent',
		'O': 'passive deponent',
		'N': 'middle or passive deponent',
		'Q': 'impersonal active',
		'X': 'no voice'
	},

	verbMoods: {
		'I': 'indicative',
		'S': 'subjunctive',
		'O': 'optative',
		'M': 'imperative',
		'N': 'infinitive',
		'P': 'participle',
		'R': 'imperative participle'
	},

	particleTypes: {
		'I': 'interogative',
		'N': 'negative'
	}
};
bible.morphology['Greek'] = bible.morphology['robinson'];



// http://openscriptures.github.io/morphhb/parsing/HebrewMorphologyCodes.html
bible.morphology['OSHB'] = {
	format: function(morph) {
		var languageKey = morph.substr(0,1),
			language = this.languages[languageKey],
			morphParts = morph.substr(1).split('/'),
			formattedOutput = '';

		for (var i=0, il=morphParts.length; i<il; i++) {
			var m = morphParts[i],
				partOfSpeechKey = m.substr(0,1),
				partOfSpeech = this.partsOfSpeech[partOfSpeechKey],
				morphCodes = m.length > 0 ? m.substr(1) : '',

				partsList = [],
				details = [];

			switch (partOfSpeechKey) {

				case 'A':
					partsList = ['adjectiveTypes', 'gender', 'number', 'state'];

					break;
				case 'C':
				case 'D':
					// nothing

					break;
				case 'N':

					partsList = ['nounTypes', 'gender', 'number', 'state'];

					break;
				case 'P':

					partsList = ['pronounTypes', 'person', 'gender', 'number'];

					break;
				case 'R':
					partsList = ['prepositionTypes'];

					break;
				case 'S':

					partsList = ['suffixTypes', 'person', 'gender', 'number'];

					break;
				case 'T':

					partsList = ['particleTypes'];

					break;
				case 'V':

					partsList = [language.toLowerCase() + 'VerbStems', 'verbConjugationTypes', 'person', 'gender', 'number', 'state'];

					break;

			}

			for (var j=0, jl=partsList.length; j<jl; j++) {
				if (morphCodes.length > j) {
					details.push( this[ partsList[j] ][ morphCodes.substr(j, 1) ] );
				}
			}



			formattedOutput += (i>0 ? '; ' : '') + partOfSpeech + (details.length > 0 ? ': ' + details.join(', ') : '');
		}

		return formattedOutput;
	},

	partsOfSpeech: {

		'A':'adjective',
		'C':'conjunction',
		'D':'adverb',
		'N':'noun',
		'P':'pronoun',
		'R':'preposition',
		'S':'suffix',
		'T':'particle',
		'V':'verb'

	},

	hebrewVerbStems: {

		'q': 'qal',
		'N': 'niphal',
		'p': 'piel',
		'P': 'pual',
		'h': 'hiphil',
		'H': 'hophal',
		't': 'hithpael',
		'o': 'polel',
		'O': 'polal',
		'r': 'hithpolel',
		'm': 'poel',
		'M': 'poal',
		'k': 'palel',
		'K': 'pulal',

		'Q': 'qal passive',
		'l': 'pilpel',
		'L': 'polpal',
		'f': 'hithpalpel',
		'D': 'nithpael',
		'j': 'pealal',
		'i': 'pilel',
		'u': 'hothpaal',
		'c': 'tiphil',
		'v': 'hishtaphel',
		'w': 'nithpalel',
		'y': 'nithpoel',
		'z': 'hithpoel'
	},

	aramaicVerbStems: {

		'q': 'peal',
		'Q': 'peil',
		'u': 'hithpeel',
		'p': 'pael',
		'P': 'ithpaal',
		'M': 'hithpaal',
		'a': 'aphel',
		'h': 'haphel',
		's': 'saphel',
		'e': 'shaphel',
		'H': 'hophal',
		'i': 'ithpeel',
		't': 'hishtaphel',
		'v': 'ishtaphel',
		'w': 'hithaphel',
		'o': 'polel',
		'z': 'ithpoel',
		'r': 'hithpolel',
		'f': 'hithpalpel',
		'b': 'hephal',
		'c': 'tiphel',
		'm': 'poel',
		'l': 'palpel',
		'L': 'ithpalpel',
		'O': 'ithpolel',
		'G': 'ittaphal'

	},

	verbConjugationTypes: {
		'p': 'perfect (qatal)',
		'q': 'sequential perfect (weqatal)',
		'i': 'imperfect (yiqtol)',
		'w': 'sequential imperfect (wayyiqtol)',
		'h': 'cohortative',
		'j': 'jussive',
		'v': 'imperative',
		'r': 'participle active',
		's': 'participle passive',
		'a': 'infinitive absolute',
		'c': 'infinitive construct'
	},

	adjectiveTypes: {
		'a': 'adjective',
		'c': 'cardinal number',
		'g': 'gentilic',
		'o': 'ordinal number'
	},

	nounTypes: {
		'c': 'common',
		'g': 'gentilic',
		'p': 'proper name'
	},

	pronounTypes: {
		'd': 'demonstrative',
		'f': 'indefinite',
		'i': 'interrogative',
		'p': 'personal',
		'r': 'relative'
	},

	prepositionTypes: {
		'd': 'definite article'
	},

	suffixTypes: {
		'd': 'directional he',
		'h': 'paragogic he',
		'n': 'paragogic nun',
		'p': 'pronominal'
	},

	particleTypes: {
		'a': 'affirmation',
		'd': 'definite article',
		'e': 'exhortation',
		'i': 'interrogative',
		'j': 'interjection',
		'm': 'demonstrative',
		'n': 'negative',
		'o': 'direct object marker',
		'r': 'relative'
	},

	person: {
		'1': 'first',
		'2': 'second',
		'3': 'third'
	},

	gender: {
		'b': 'both (noun)',
		'c': 'common (verb)',
		'f': 'feminine',
		'm': 'masculine'
	},

	number: {
		'd': 'dual',
		'p': 'plural',
		's': 'singular'
	},

	state: {
		'a': 'absolute',
		'c': 'construct',
		'd': 'determined'
	},

	languages: {
		'H': 'Hebrew',
		'A': 'Aramaic'
	}
};

bible.morphology['Hebrew'] = bible.morphology['OSHB'];

sofia.textproviders = {};

TextLoader = (function() {

	var
		textInfoDataIsLoading = false,

		textInfoLoadingCallbacks = [],

		textInfoDataIsLoaded = false,

		// simple data from manifests that includes name, lang
		textInfoData = [],

		// full data with chapter arrays, etc.
		textData = {},

		cachedTexts = {};

	function loadSection(textInfo, sectionid, successCallback, errorCallback) {

		// double check
		if (sectionid == 'null' || sectionid == null) {
			return;
		}

		var textid = '';

		if (textInfo != null && typeof textInfo == 'string') {
			textid = textInfo;

			getText(textid, function(textInfo) {
				loadSection(textInfo, sectionid, successCallback, errorCallback);
			});
			return;

		} else {
			textid = textInfo.id;

			// sometimes the sections aren't yet known, so we'll check for them and hope for the best :)
			if (textInfo.sections && textInfo.sections.length > 0 && textInfo.sections.indexOf(sectionid) == -1) {
				sectionid = textInfo.sections[0];
			}
		}

		// send analytics for loading
		if (sofia.analytics && sofia.analytics.record) {
			sofia.analytics.record('load', textInfo.id, sectionid);
		}

		// use stored text if present
		if (typeof cachedTexts[textid] == 'undefined') {
			cachedTexts[textid] = {};
		}
		if (typeof cachedTexts[textid][sectionid] != 'undefined') {
			successCallback ( $(cachedTexts[textid][sectionid])  );
			return;
		}


		// load from provider
		sofia.textproviders[textInfo.providerName].loadSection(textid, sectionid, function(html) {

			// store
			cachedTexts[textid][sectionid] = html;

			// send
			successCallback ( $(cachedTexts[textid][sectionid])  );
		});
	}


	function getTextid(input) {

		var parts = input.split(':'),
			textid = (parts.length > 1) ? parts[1] : parts[0];

		return textid;

	}

	function getProviderName(input) {

		// if not loaded, get it from provider
		var
			parts = input.split(':'),
			textid = parts.length > 1 ? parts[1] : parts[0],
			providerName = parts.length > 1 ? parts[0] : '';

		if (providerName == '') {
			var textInfo = textInfoData.filter(function(info) {
					return info.id == textid;
				})[0];

			if (textInfo && typeof textInfo.providerName != 'undefined') {
				providerName = textInfo.providerName;
			} else {
				providerName = 'local'; // ???
			}
		}

		return providerName;
	}

	function getProviderId(input) {

		// assume we have the full providerid
		if (input.indexOf(':') > -1) {
			return input;
		} else {
			// assume we only have the textid
			var textid = input,
				textInfo = textInfoData.filter(function(info) {
					return info.id == textid;
				})[0];

			return textInfo.providerid;
		}
	}


	function getText(textid, callback, errorCallback) {

		// if already loaded, then send it right back
		var t = this,
			textinfo = textData[textid];

		if (typeof textinfo != 'undefined') {
			if (typeof callback != 'undefined') {
				callback(textinfo);
			}
			return textinfo;
		}

		var providerName = getProviderName(textid),
			textid = getTextid(textid);


		sofia.textproviders[providerName].getTextInfo(textid, function(data) {

			var initialInfo = textInfoData[textid];
			data = $.extend({}, initialInfo, data, true);


			processText(data, providerName)
			//data.providerName = providerName;





			// store
			textData[data.id] = data;

			// set names
			if (data.divisionNames) {
				bible.addNames(data.lang, data.divisions, data.divisionNames);
			}

			// send back
			callback(data);

		}, errorCallback);

	}

	function loadTexts(callback) {
		if (textInfoDataIsLoaded) {
			callback(textInfoData);
		} else {
			loadTextsManifest(callback);
		}
	}

	function loadTextsManifest(callback) {

		if (callback) {
			textInfoLoadingCallbacks.push(callback);
		}

		if (textInfoDataIsLoading) {
			return;
		}

		textInfoDataIsLoading = true;

		var providerKeys = Object.keys(sofia.textproviders),
			currentProviderIndex = 0;

		function loadNextProvider() {
			if (currentProviderIndex < providerKeys.length) {

				var providerName = providerKeys[currentProviderIndex]

				sofia.textproviders[providerName].getTextManifest(function(data) {

					if (data && data != null) {

						// append to array from previous provider
						textInfoData = textInfoData.concat(data);
					}

					currentProviderIndex++;
					loadNextProvider();
				});


			} else {
				textInfoDataIsLoading = false;
				textInfoDataIsLoaded = true;


				while (textInfoLoadingCallbacks.length > 0) {

					var cb = textInfoLoadingCallbacks.pop();
					cb(textInfoData);

				}
			}
		}

		loadNextProvider();

	}

	function processTexts(text_array, providerName) {
		// add providerName, providerid, and id to each one
		for (var i=0, il=text_array.length; i<il; i++) {

			var text = text_array[i];

			processText(text, providerName);
		}
	}

	function processText(text, providerName) {
		// remove any provider info from the id
		if (text.id.split(':').length > 1) {
			text.id = text.id.split(':')[1];
		}

		text.providerName = providerName;
		text.providerid = providerName + ':' + text.id;

		// TEMP for DBS
		if (typeof text.country != 'undefined' && typeof text.countries == 'undefined' && text.country != text.langName && text.country != text.langNameEnglish) {
			text.countries = [];

			var possibleCountryMatches = sofia.countries.filter(function(c) {
				return c.name.indexOf(text.country) == 0;
			});

			if (possibleCountryMatches.length > 0) {
				text.countries.push( possibleCountryMatches[0]['alpha-2'] );
			}
		}
	}

	function startSearch(textid, divisions, searchTerms, onSearchLoad, onSearchIndexComplete, onSearchComplete) {

		var providerName = getProviderName(textid);

		sofia.textproviders[providerName].startSearch(textid, divisions, searchTerms, onSearchLoad, onSearchIndexComplete, onSearchComplete);

	}

	function getTextInfoData() {
		return textInfoData;
	}

	// when the document is ready, start loading texts from providers
	$(function() {
		loadTextsManifest();
	});

	var ext = {
		getText: getText,
		loadTexts: loadTexts,
		textData: textData,
		getTextInfoData: getTextInfoData,
		loadSection: loadSection,
		startSearch: startSearch,
		processTexts: processTexts,
		processText: processText
	}

	return ext;
})();


sofia.textproviders['local'] = (function() {

	var providerName = 'local',
		fullName = '',
		textData = {};

	function getTextManifest(callback) {
		var textsUrl = 'content/texts/' + sofia.config.textsIndexPath;

		sofia.ajax({
			url: textsUrl,
			dataType: 'json',
			cache: false,
			success: function(data) {

				var textInfoData = data.textInfoData;

				//text_data = TextLoader.processTexts(textInfoData, providerName);

				callback(textInfoData);
			},
			error: function(jqXHR, textStatus, errorThrown) {
				//console.log('error loading texts.json', jqXHR, textStatus, errorThrown);
				//console.log(textStatus);

				var modal = new MovableWindow(600,250, 'Texts Error');
				//modal.size(500, 200).center();

				modal.body.css({background: '#000', color: '#fff' }).html(
					'<div style="padding: 20px;">' +
						'<p>Problem loading <code>' + sofia.config.baseContentUrl + textsUrl + '</code></p>' +
						'<p>Status: ' + textStatus + '</p>'+
						'<p>Error: ' + errorThrown + '</p>'+
					'</div>'
				);
				modal.show().center();

			}
		});
	}

	function getTextInfo(textid, callback, errorCallback) {

		if (typeof textData[textid] != 'undefined') {
			callback(textData[textid]);
			return;
		}

		// load it!
		var infoUrl = 'content/texts/' + textid + '/info.json';

		sofia.ajax({
			url: infoUrl,
			dataType: 'json',
			success: function(data) {
				textData[textid] = data;
				callback(data);
			},
			error: function(error) {

				console.log("ERROR TextInfoLoader.getText", infoUrl);

				if (errorCallback) {
					errorCallback(error);
				}
			}
		});
	}

	function loadSection(textid, sectionid, callback, errorCallback) {

		getTextInfo(textid, function(textInfo) {

			var url = 'content/texts/' + textid + '/' + sectionid + '.html';

			sofia.ajax({
				dataType: 'text',
				url: url,
				success: function(data) {

					// text to treat this like JSON or text/html
					var text = data,
						// split at the closing head tag to prevent problems with loading head material
						main = $( text.indexOf('</head>') > -1 ? text.split('</head>')[1] : text ),
						content = main.filter('.section'),
						footnotes = main.filter('.footnotes'),
						notes = footnotes.find('.footnote');

					// move notes into place
					if (notes.length > 0) {
						notes.each(function() {
							var footnote = $(this),
								noteid = footnote.find('a').attr('href'),
								footnotetext = footnote.find('.text'),
								noteintext = content.find(noteid);

							//console.log(noteid, noteintext);

							noteintext.append(footnotetext);

						});
					}

					content.attr('data-textid', textid);
					content.attr('data-lang3', textInfo.lang);

					// FIX title after chapter number
					var c = content.find('.c'),
						afterc = c.next();
					if (afterc.hasClass('s')) {
						c.before(afterc);
					}

					// FIX verse numbers inside verse
					content.find('.v-num').each(function() {
						var vnum = $(this),
							v = vnum.closest('.v');

						if (v.length > 0) {
							v.before(vnum);
						}

					});

					var html = content.wrapAll('<div></div>').parent().html();

					callback(html);

				}, error: function(jqXHR, textStatus, errorThrown) {
					if (errorCallback) {
						errorCallback(textid, sectionid);
					}

					//console.log('error', textStatus, errorThrown, jqXHR );
				}
			});
		});

	}

	function startSearch(textid, divisions, text, onSearchLoad, onSearchIndexComplete, onSearchComplete) {

		var textSearch = new TextSearch();

		textSearch.on('load', onSearchLoad);
		textSearch.on('indexcomplete', onSearchIndexComplete);
		textSearch.on('complete', onSearchComplete);

		textSearch.start(textid, divisions, text);

	}

	return {
		getTextManifest: getTextManifest,
		getTextInfo: getTextInfo,
		loadSection: loadSection,
		startSearch: startSearch,
		fullName: fullName
	}

})();

/*
sofia.textproviders['example'] = (function() {

	function getTextManifest (callback) {
		callback({});
	}

	function getTextInfo(textid, callback) {
		callback({});
	}

	function loadSection(textid, sectionid, callback) {
		callback(null);
	}

	return {
		getTextManifest: getTextManifest,
		getTextInfo: getTextInfo,
		loadSection: loadSection
	}

})();
*/


sofia.textproviders['fcbh'] = (function() {

	var text_data = [],
		text_data_is_loaded = false,
		text_data_is_loading = false,
		text_data_callbacks = [],
		providerName = 'fcbh',
		fullName = 'Faith Comes by Hearing - Digital Bible Platform';


	function getTextManifest (callback) {

		// check for offline use
		if (!sofia.config.enableOnlineSources || typeof sofia.config.fcbhKey == 'undefined' || sofia.config.fcbhKey == '') {
			callback(null);
			return;
		}

		// if loaded immediately callback
		if (text_data_is_loaded) {

			callback(text_data);

		} else {

			// store callback
			text_data_callbacks.push(callback);

			// don't continue
			if (text_data_is_loading) {
				return;
			}

			text_data_is_loading = true;


			sofia.ajax({
				url: 'content/texts/texts_fcbh.json',
				dataType: 'json',
				cache: false,
				success: function(data) {

					text_data = data.textInfoData;

					TextLoader.processTexts(text_data, providerName);

					for (var i=0, il=text_data.length; i<il; i++) {
						text_data[i].aboutHtml = createAboutHtml(text_data[i].name, text_data[i].abbr);
					}

					// filter
					if (sofia.config.fcbhTextExclusions && sofia.config.fcbhTextExclusions.length > 0) {

						text_data = text_data.filter(function(t) {

							// keep the ones that aren't in the exclusion list
							return sofia.config.fcbhTextExclusions.indexOf(t.id) == -1;

						});

					}


					finish();
				},
				error: function(jqXHR, textStatus, errorThrown) {
					text_data = null;
					finish();
				}
			});
		}
	}

	function finish() {
		text_data_is_loading = false;
		text_data_is_loaded = true;

		while (text_data_callbacks.length > 0) {
			var cb = text_data_callbacks.pop();
			cb(text_data);
		}
	}

	function createAboutHtml(title, version_code) {
		return '<h1>' + title + ' (' + version_code + ')' + '</h1>' +
				'<dl>' +
					'<dt>Source</dt>' +
					'<dd>This text comes from the <a href="https://www.digitalbibleplatform.com/">Digital Bible Platform</a> provided by <a href="http://faithcomesbyhearing.com/">Faith Comes By Hearing</a></dd>' +

					'<dt>API EULA</dt>' +
					'<dd><a href="https://www.digitalbibleplatform.com/eula/">End User License Agreement</a> for API</dd>' +
				'</dl>';
	}

	function getProviderid(textid) {
		var parts = textid.split(':'),
			fullid = providerName + ':' + (parts.length > 1 ? parts[1] : parts[0]);

		return fullid;
	}

	function getTextInfo(textid, callback) {

		if (!text_data_is_loaded) {

			getTextManifest (function() {
				getTextInfo(textid, callback);
			});
			return;
		}

		var providerid = getProviderid(textid);

		// get initial data
		var info = text_data.filter(function(text) {
			return text.providerid == providerid;
		})[0];

		if (typeof info.divisions == 'undefined' || info.divisions.length == 0) {

			info.providerName = providerName;
			info.divisions = [];
			info.divisionNames = [];
			info.sections = [];

			if (info.ot_dam_id != '') {
				loadBooks(info, info.ot_dam_id, function() {

					if (info.nt_dam_id != '') {
						loadBooks(info, info.nt_dam_id, function() {

							callback(info);

						});
					}

				});
			} else 	if (info.nt_dam_id != '') {
				loadBooks(info, info.nt_dam_id, function() {

					callback(info);

				});
			} else {

				console.log('FCBH error', 'No NT or OT id', info);

			}

		} else {

			callback(info);
		}

	}

	function loadBooks(info, dam_id, callback) {

		$.ajax({
			beforeSend: function(xhr){
				if (xhr.overrideMimeType){
					xhr.overrideMimeType("application/javascript");
				}
			},
			dataType: 'jsonp',
			url: 'https://dbt.io/library/book?v=2&reply=jsonp&key=' + sofia.config.fcbhKey + '&dam_id=' + dam_id,
			success: function(data) {

				// push data onto info object
				for (var i=0, il=data.length; i<il; i++) {
					var book = data[i],
						osisIndex = bible.DEFAULT_BIBLE_OSIS.indexOf(book.book_id),
						dbsBookCode = bible.DEFAULT_BIBLE[osisIndex];


					info.divisions.push(dbsBookCode);
					info.divisionNames.push(book.book_name);

					for (var c=0; c<book.number_of_chapters; c++) {
						info.sections.push(dbsBookCode + (c+1).toString());
					}
				}

				callback();

			}
		});

	}


	function getTextInfoSync(textid) {

		var providerid = getProviderid(textid);

		// get initial data
		var info = text_data.filter(function(text) {
			return text.providerid == providerid;
		})[0];

		return info;
	}


	function loadSection(textid, sectionid, callback) {


		// check for complete textinfo first, since we'll need the .sections data to make this work
		getTextInfo(textid, function(textinfo) {

			var
				bookid = sectionid.substring(0,2),
				chapter = sectionid.substring(2),
				lang = textinfo.lang,
				dir = (textinfo.dir && (textinfo.dir == 'ltr' || textinfo.dir == 'rtl')) ? textinfo.dir : data.language.isRTL(lang) ? 'rtl' : 'ltr',
				//usfmbook = bible.BOOK_DATA[bookid].usfm.substr(0,1).toUpperCase() + bible.BOOK_DATA[bookid].usfm.substr(1).toLowerCase(),
				usfmbook = bible.BOOK_DATA[bookid].osis,
				dam_id = bible.OT_BOOKS.indexOf(bookid) > -1 ? textinfo.ot_dam_id : textinfo.nt_dam_id,
				sectionIndex = textinfo.sections.indexOf(sectionid),
				previd = sectionIndex > 0 ? textinfo.sections[sectionIndex-1] : null,
				nextid = sectionIndex < textinfo.sections.length ? textinfo.sections[sectionIndex+1] : null;
				url = 'https://dbt.io/library/verse?v=2&reply=jsonp&key=' + sofia.config.fcbhKey + '&dam_id=' + dam_id + '&book_id=' + usfmbook + '&chapter_id=' + chapter; // format=osis (sadly doesn't do anything)

			//console.log(url);

			$.ajax({
				beforeSend: function(xhr){
					if (xhr.overrideMimeType){
						xhr.overrideMimeType("application/javascript");
					}
				},
				dataType: 'jsonp',
				url: url,
				success: function(chapter_data) {
					var html = [];


					//<div class="section chapter AC AC1 eng_kjv eng" dir="ltr" lang="en" data-id="AC1" data-nextid="AC2" data-previd="JN21">
					html.push('<div class="section chapter ' + textid + ' ' + bookid + ' ' + sectionid + ' ' + iso2iana.convert(lang) + ' " ' +
								' data-textid="' + textid + '"' +
								' data-id="' + sectionid + '"' +
								' data-nextid="' + nextid + '"' +
								' data-previd="' + previd + '"' +
								' lang="' + iso2iana.convert(lang) + '"' +
								' data-lang3="' + lang + '"' +
								' dir="' + dir + '"' +
								'>');

					if (chapter == '1') {
						html.push('<div class="mt">' + textinfo.divisionNames[textinfo.divisions.indexOf(bookid)] + '</div>');
					}

					html.push('<div class="c">' + chapter + '</div>');

					html.push('<div class="p">');
					for (var i=0, il=chapter_data.length; i<il; i++ ) {
						var verse = chapter_data[i],
							text = verse.verse_text,
							vnum = verse.verse_id,
							vid = sectionid + '_' + vnum;

						html.push('<span class="v-num v-' + vnum + '">' + vnum + '&nbsp;</span><span class="v ' + vid + '" data-id="' + vid + '">' + text + '</span>');

					}

					html.push('</div>'); // p
					html.push('</div>'); // section



					callback(html.join(''));
				}

			});


		});



	}

	function startSearch(textid, divisions, text, onSearchLoad, onSearchIndexComplete, onSearchComplete) {

		var info = getTextInfoSync(textid);

		var e = {
			type:'complete',
			target: this,
			data: {
				results: [],
				searchIndexesData: [], // not needed for SearchWindow
				searchTermsRegExp: SearchTools.createSearchTerms(text, false),
				isLemmaSearch: false
			}
		};

		var dam_id = '';

		if (info.ot_dam_id != '') {
			dam_id = info.ot_dam_id;
		} else if (info.nt_dam_id != '') {
			dam_id = info.nt_dam_id;
		}


		doSearch(dam_id, divisions, text, e, function() {

			onSearchComplete(e);

		});
	}
	function doSearch(dam_id, divisions, text, e, callback) {

		$.ajax({
			beforeSend: function(xhr){
				if (xhr.overrideMimeType){
					xhr.overrideMimeType("application/javascript");
				}
			},
			dataType: 'jsonp',

			// One giant call seems faster, than doing all the books individually?
			url: 'https://dbt.io/text/search?v=2&reply=jsonp&key=' + sofia.config.fcbhKey + '&dam_id=' + dam_id + '&query=' + text.replace(/\s/gi, '+') + '&limit=2000',
			success: function(data) {

				for (var i=0, il=data[1].length; i<il; i++) {
					var verse = data[1][i],
						dbsBookCode = bible.DEFAULT_BIBLE[ bible.DEFAULT_BIBLE_OSIS.indexOf(verse.book_id) ],
						fragmentid = dbsBookCode + verse.chapter_id + '_' + verse.verse_id,
						hasMatch = e.data.searchTermsRegExp[0].test(verse.verse_text);

					if (hasMatch && (divisions.length == 0 || divisions.indexOf(dbsBookCode) > -1)) {
						e.data.results.push({
							fragmentid: fragmentid,
							html: highlightWords(verse.verse_text, e.data.searchTermsRegExp)
						});
					}
				}

				callback(data);
			}
		});
	}

	function highlightWords(text, searchTermsRegExp) {

		var processedHtml = text;

		for (var j=0, jl=searchTermsRegExp.length; j<jl; j++) {

			searchTermsRegExp[j].lastIndex = 0;

			// surround the word with a highlight
			processedHtml = processedHtml.replace(searchTermsRegExp[j], function(match) {
				return '<span class="highlight">' + match + '</span>';
			});
		}

		return processedHtml;
	}


	return {
		getTextManifest: getTextManifest,
		getTextInfo: getTextInfo,
		loadSection: loadSection,
		startSearch: startSearch,
		fullName: fullName
	}

})();

sofia.config = $.extend(sofia.config, {

	enableAmericanBibleSociety: true,

	absUrl: 'abs.php',

	absForceLoadVersions: false,

	absExclusions: []

});



sofia.textproviders['abs'] = (function() {

	var text_data = [],
		text_data_is_loaded = false,
		text_data_is_loading = false,
		text_data_callbacks = [],

		fums_loaded = false,

		providerName = 'abs',
		fullName = 'American Bible Society Bibles API';

	function getTextManifest (callback) {

		// check for offline use
		if (!sofia.config.enableOnlineSources || !sofia.config.enableAmericanBibleSociety || sofia.config.absUrl == '') {
			callback(null);
			return;
		}

		// if loaded immediately callback
		if (text_data_is_loaded) {

			callback(text_data);

		} else {

			// store callback
			text_data_callbacks.push(callback);

			// don't continue
			if (text_data_is_loading) {
				return;
			}

			text_data_is_loading = true;

			$.ajax({
				url: sofia.config.baseContentUrl + sofia.config.absUrl,
				dataType: 'jsonp',
				beforeSend:  function(xhr){
					if (xhr.overrideMimeType) {
						xhr.overrideMimeType('application/javascript');
					}
				},
				cache: false,
				data: {
					action: 'list',
					force: sofia.config.absForceLoadVersions
				},
				success: function(data) {

					if (data == null || data.textInfoData == null) {
						finish();
						return;
					}

					text_data = data.textInfoData;

					// remove versions you don't want
					if (sofia.config.absExclusions && sofia.config.absExclusions.length > 0) {
						text_data = text_data.filter(function(text) {
							return sofia.config.absExclusions.indexOf(text.id) == -1;
						});
					}

					TextLoader.processTexts(text_data, providerName);

					finish();
				},
				error: function(jqXHR, textStatus, errorThrown) {

					text_data = null;
					finish();
				}
			});
		}
	}

	function finish() {
		text_data_is_loading = false;
		text_data_is_loaded = true;

		while (text_data_callbacks.length > 0) {
			var cb = text_data_callbacks.pop();
			cb(text_data);
		}
	}

	function getProviderid(textid) {
		var parts = textid.split(':'),
			fullid = providerName + ':' + (parts.length > 1 ? parts[1] : parts[0]);

		return fullid;
	}

	function getTextInfo(textid, callback) {

		if (!text_data_is_loaded) {

			getTextManifest (function() {
				getTextInfo(textid, callback);
			});
			return;
		}

		var providerid = getProviderid(textid);

		// get initial data
		var info = text_data.filter(function(text) {
			return text.providerid == providerid;
		})[0];

		if (typeof info.divisions == 'undefined' || info.divisions.length == 0) {

			$.ajax({
				url: sofia.config.baseContentUrl + sofia.config.absUrl,
				dataType: 'jsonp',
				beforeSend:  function(xhr){
					if (xhr.overrideMimeType) {
						xhr.overrideMimeType('application/javascript');
					}
				},
				cache: false,
				data: {
					action: 'books',
					version: info.absid
				},
				success: function(data) {

					$.extend(info, data);
					callback(info);

				},
				error: function(jqXHR, textStatus, errorThrown) {
					callback(null);
				}

			});

		} else {

			callback(info);
		}

	}


	function getTextInfoSync(textid) {

		var providerid = getProviderid(textid);

		// get initial data
		var info = text_data.filter(function(text) {
			return text.providerid == providerid;
		})[0];

		return info;
	}


	function loadSection(textid, sectionid, callback) {

		var textinfo = getTextInfoSync(textid),

			lang3 = textinfo.lang,
			lang = iso2iana.convert(lang3),
			dir = (textinfo.dir && (textinfo.dir == 'ltr' || textinfo.dir == 'rtl')) ? textinfo.dir : data.language.isRTL(lang) ? 'rtl' : 'ltr',

			dbsBookCode = sectionid.substring(0,2),
			osisBookCode = bible.BOOK_DATA[dbsBookCode].osis,
			chapterNum = sectionid.substring(2),

			sectionIndex = textinfo.sections.indexOf(sectionid),
			previd = sectionIndex > 0 ? textinfo.sections[sectionIndex-1] : null,
			nextid = sectionIndex < textinfo.sections.length ? textinfo.sections[sectionIndex+1] : null;

		$.ajax({
			url: sofia.config.baseContentUrl + sofia.config.absUrl,
			dataType: 'jsonp',
			beforeSend:  function(xhr){
				if (xhr.overrideMimeType) {
					xhr.overrideMimeType('application/javascript');
				}
			},
			cache: false,
			data: {
				action: 'chapter',
				version: textinfo.id,
				lang3: lang3,
				lang: lang,
				dir: dir,
				sectionid: sectionid,
				osis: osisBookCode,
				chapter: chapterNum,
				previd: previd,
				nextid: nextid,
				bookname: textinfo.divisionNames[textinfo.divisions.indexOf(dbsBookCode)]
			},
			success: function(data) {

				callback(data.html);


				if (!fums_loaded) {

					$.getScript('//' + data.fums_js_include, function() {
						fums_loaded = true;

						eval(data.fums_js);

					});

				} else {

					eval(data.fums_js);

				}

			},
			error: function(jqXHR, textStatus, errorThrown) {
				callback(null);
			}

		});
	}

	function startSearch(textid, divisions, text, onSearchLoad, onSearchIndexComplete, onSearchComplete) {

		var textinfo = getTextInfoSync(textid),
			e = {
				type:'complete',
				target: this,
				data: {
					results: [],
					searchIndexesData: [], // not needed for SearchWindow
					searchTermsRegExp: SearchTools.createSearchTerms(text, false),
					isLemmaSearch: false
				}
			};

		$.ajax({
			url: sofia.config.baseContentUrl + sofia.config.absUrl,
			dataType: 'jsonp',
			beforeSend:  function(xhr){
				if (xhr.overrideMimeType) {
					xhr.overrideMimeType('application/javascript');
				}
			},
			cache: false,
			data: {
				action: 'search',
				version: textinfo.id,
				text: text,
				divisions: divisions
			},
			success: function(data) {

				//e.data.results = data.results;

				function padLeft(s, n) {

				}

				for (var i=0, il=data.results.length; i<il; i++) {
					var result = data.results[i],
						fragmentid = Object.keys(result)[0],
						html = result[fragmentid],

						dbsBookCode = fragmentid.substring(0,2),
						bookData = bible.BOOK_DATA[dbsBookCode],
						bookIndex = (bookData) ? bookData.sortOrder : '0',
						chapterNum = fragmentid.split('_')[1].substring(2),
						verseNum = fragmentid.split('_')[0],
						pad = '000',
						canonicalOrder =
									(pad + bookIndex.toString()).slice(-pad.length) +
									(pad + chapterNum.toString()).slice(-pad.length) +
									(pad + verseNum.toString()).slice(-pad.length);


					if (html.indexOf('class="highlight"') == -1) {
						html = highlightWords(html, e.data.searchTermsRegExp);
					}

					// fix canonical order
					e.data.results.push({
						fragmentid: fragmentid,
						html: html,
						canonicalOrder: canonicalOrder
					});

				}

				// sort restuls
				e.data.results.sort(function(a,b) {
					if  (a.canonicalOrder > b.canonicalOrder) {
						return 1;
					} else if  (a.canonicalOrder < b.canonicalOrder) {
						return -1;
					} else {
						return 0;
					}
				});


				onSearchComplete(e);

				if (!fums_loaded) {

					$.getScript('//' + data.fums_js_include, function() {
						fums_loaded = true;

						eval(data.fums_js);

					});

				} else {

					eval(data.fums_js);

				}

			},
			error: function(jqXHR, textStatus, errorThrown) {
				console.log('search error', textStatus, errorThrown);
				onSearchComplete(null);
			}

		});

	}

	function highlightWords(text, searchTermsRegExp) {

		var processedHtml = text;

		for (var j=0, jl=searchTermsRegExp.length; j<jl; j++) {

			searchTermsRegExp[j].lastIndex = 0;

			// surround the word with a highlight
			processedHtml = processedHtml.replace(searchTermsRegExp[j], function(match) {
				return '<span class="highlight">' + match + '</span>';
			});
		}

		return processedHtml;
	}


	return {
		getTextManifest: getTextManifest,
		getTextInfo: getTextInfo,
		loadSection: loadSection,
		startSearch: startSearch,
		fullName: fullName
	}

})();

sofia.config = $.extend(sofia.config, {
	dbsEnabled: true,
	dbsKey: '',
	dbsBase: 'https://api.v4.dbt.io/',
	dbsIncludeList: [],
	dbsExcludeList: [],
});



sofia.textproviders['dbs'] = (function() {

	var text_data = [],
		text_data_is_loaded = false,
		text_data_is_loading = false,
		text_data_callbacks = [],

		providerName = 'dbs',
		fullName = 'Digital Bible Society';

	function getTextManifest (callback) {

		// check for offline use
		if (!sofia.config.enableOnlineSources || !sofia.config.dbsEnabled || sofia.config.dbsKey == '' ) {
			callback(null);
			return;
		}

		// if loaded immediately callback
		if (text_data_is_loaded) {

			callback(text_data);

		} else {

			// store callback
			text_data_callbacks.push(callback);

			// don't continue
			if (text_data_is_loading) {
				return;
			}

			text_data_is_loading = true;

			$.ajax({
				url: sofia.config.dbsBase + 'bibles?v=4&key=' + sofia.config.dbsKey,
				dataType: 'json',
				cache: false,
				success: function(data) {

					if (data == null || data.data == null) {
						finish();
						return;
					}

					// convert to older DBS version
	/*
	{
		"id":"eng-CEV",
		"name":"Contemporary English Version (US Version)",
		"nameEnglish":"",
		"abbr":"CEV",
		"lang":"eng",
		"langName":"English",
		"langNameEnglish":"English",
		"dir":"ltr",
		"type":"bible",
		"absid":"eng-CEV",
		"absAudio":"NONE"
	},
	*/
					text_data = [];
					for (var id in data.data) {

						var dbs = data.data[id];

						// skip not in include list
						if (sofia.config.dbsIncludeList.length > 0 && sofia.config.dbsIncludeList.indexOf(dbs.abbr) == -1) {
							continue;
						}

						// skip in exclude list
						if (sofia.config.dbsExcludeList.length > 0 && sofia.config.dbsExcludeList.indexOf(dbs.abbr) > -1) {
							continue;
						}

						// keep this one!
						if (dbs.name != null) {
							var sofiabible = {
								type: 'bible',
								id: dbs.abbr,
								name: dbs.name,
								nameEnglish: dbs.vname,
								abbr: dbs.abbr,
								lang: dbs.iso,
								langName: dbs.language,
								langNameEnglish: dbs.language,
								dbs: dbs,
                fcbh_audio_nt: dbs.filesets["dbp-prod"].filter(selectFileset, {'type':'audio','size':'NT'}).shift()?.id,
                fcbh_audio_ot: dbs.filesets["dbp-prod"].filter(selectFileset, {'type':'audio','size':'OT'}).shift()?.id,
                fcbh_drama_nt: dbs.filesets["dbp-prod"].filter(selectFileset, {'type':'audio_drama','size':'NT'}).shift()?.id,
                fcbh_drama_ot: dbs.filesets["dbp-prod"].filter(selectFileset, {'type':'audio_drama','size':'OT'}).shift()?.id,
							};
							text_data.push(sofiabible);
						}
					}

					TextLoader.processTexts(text_data, providerName);

					finish();
				},
				error: function(jqXHR, textStatus, errorThrown) {

					text_data = null;
					finish();
				}
			});
		}
	}

	function selectFileset(fileset) {
    return Object.keys(this).every((key) => fileset[key] === this[key]);
  }

	function finish() {
		text_data_is_loading = false;
		text_data_is_loaded = true;

		while (text_data_callbacks.length > 0) {
			var cb = text_data_callbacks.pop();
			cb(text_data);
		}
	}

	function getProviderid(textid) {
		var parts = textid.split(':'),
			fullid = providerName + ':' + (parts.length > 1 ? parts[1] : parts[0]);

		return fullid;
	}

	function getTextInfo(textid, callback) {

		if (!text_data_is_loaded) {

			getTextManifest (function() {
				getTextInfo(textid, callback);
			});
			return;
		}

		var providerid = getProviderid(textid);

		// get initial data
		var info = text_data.filter(function(text) {
			return text.providerid == providerid;
		})[0];

		if (typeof info.divisions == 'undefined' || info.divisions.length == 0) {

			$.ajax({
				url: sofia.config.dbsBase + 'bibles/' + info.id + '?v=4&key=' + sofia.config.dbsKey ,
				dataType: 'json',
				/*
				dataType: 'jsonp',
				beforeSend:  function(xhr){
					if (xhr.overrideMimeType) {
						xhr.overrideMimeType('application/javascript');
					}
				},
				*/
				cache: false,
				success: function(data) {


					// transfer books and chapters
					/*
					divisions: ['GN','EX']
					sections: ['GN1','GN2']
					*/

					info.divisions = [];
					info.sections = [];
					info.divisionNames = [];

					// book list (divisions)
					for (var i=0, il=data.data.books.length; i<il; i++) {
						var bookinfo = data.data.books[i],
							usfmCode = bookinfo.book_id,
							bookIndex = bible.APOCRYPHAL_BIBLE_USFM.indexOf(usfmCode),
							dbsCode = bible.APOCRYPHAL_BIBLE[bookIndex];

						if (typeof dbsCode == 'undefined') {
							console.warn(bookinfo, usfmCode);
						}

						info.divisions.push(dbsCode);
						info.divisionNames.push(bookinfo.name);

						// chapter list (sections)
						for (var j=0, jl=bookinfo.chapters.length; j<jl; j++) {

							info.sections.push(dbsCode + (j+1));

						}

					}




					//$.extend(info, data);
					callback(info);

				},
				error: function(jqXHR, textStatus, errorThrown) {
					callback(null);
				}

			});

		} else {

			callback(info);
		}

	}


	function getTextInfoSync(textid) {

		var providerid = getProviderid(textid);

		// get initial data
		var info = text_data.filter(function(text) {
			return text.providerid == providerid;
		})[0];

		return info;
	}


	function loadSection(textid, sectionid, callback) {

		loadSectionText(textid, sectionid, callback);

	}


	function loadSectionText(textid, sectionid, callback) {

		var textinfo = getTextInfoSync(textid),

			lang3 = textinfo.lang,
			lang = iso2iana.convert(lang3),
			dir = (textinfo.dir && (textinfo.dir == 'ltr' || textinfo.dir == 'rtl')) ? textinfo.dir : data.language.isRTL(lang) ? 'rtl' : 'ltr',


			bookid = dbsBookCode = sectionid.substring(0,2),
			usfm = bible.BOOK_DATA[dbsBookCode].usfm,
			chapterNum = sectionid.substring(2),

			sectionIndex = textinfo.sections.indexOf(sectionid),
			previd = sectionIndex > 0 ? textinfo.sections[sectionIndex-1] : null,
			nextid = sectionIndex < textinfo.sections.length ? textinfo.sections[sectionIndex+1] : null;


		// TEXT VERSION


		$.ajax({
			url: sofia.config.dbsBase + 'bibles/filesets/' + textinfo.id + '/' + usfm + '/' + chapterNum + '?v=4&key=' + sofia.config.dbsKey ,
			dataType: 'json',
			/*
			dataType: 'jsonp',
			beforeSend:  function(xhr){
				if (xhr.overrideMimeType) {
					xhr.overrideMimeType('application/javascript');
				}
			},
			*/
			cache: false,
			success: function(data) {

				// create HTML
				var html = [];

				//<div class="section chapter AC AC1 eng_kjv eng" dir="ltr" lang="en" data-id="AC1" data-nextid="AC2" data-previd="JN21">
				html.push('<div class="section chapter ' + textid + ' ' + bookid + ' ' + sectionid + ' ' + iso2iana.convert(lang) + ' " ' +
							' data-textid="' + textid + '"' +
							' data-id="' + sectionid + '"' +
							' data-nextid="' + nextid + '"' +
							' data-previd="' + previd + '"' +
							' lang="' + lang + '"' +
							' data-lang3="' + lang + '"' +
							' dir="' + dir + '"' +
							'>');


				if (chapterNum == '1') {
					html.push('<div class="mt">' + textinfo.divisionNames[textinfo.divisions.indexOf(bookid)] + '</div>');
				}

				html.push('<div class="c">' + chapterNum + '</div>');

				html.push('<div class="p">');
				for (var i=0, il=data.data.length; i<il; i++ ) {
					var verse = data.data[i],
						text = verse.verse_text,
						vnum = verse.verse_start,
						vid = sectionid + '_' + vnum;

					html.push(' <span class="v-num v-' + vnum + '">' + vnum + '</span><span class="v ' + vid + '" data-id="' + vid + '">' + text + '</span>');

				}

				html.push('</div>'); // p
				html.push('</div>'); // section



				callback(html.join(''));


			},
			error: function(jqXHR, textStatus, errorThrown) {
				callback(null);
			}

		});
	}

	function startSearch(textid, divisions, text, onSearchLoad, onSearchIndexComplete, onSearchComplete) {

		var e = {
			type:'complete',
			target: this,
			data: {
				results: [],
				searchIndexesData: [], // not needed for SearchWindow
				searchTermsRegExp: SearchTools.createSearchTerms(text, false),
				isLemmaSearch: false
			}
		};

		doSearch(textid, divisions, text, e, function() {

			onSearchComplete(e);

		});
	}
	function doSearch(textid, divisions, text, e, callback) {

		var textinfo = getTextInfoSync(textid);

		$.ajax({
			/*
			beforeSend: function(xhr){
				if (xhr.overrideMimeType){
					xhr.overrideMimeType("application/javascript");
				}
			},
			dataType: 'jsonp',
			*/
			dataType: 'json',

			// One giant call seems faster, than doing all the books individually?
			url: sofia.config.dbsBase + 'text/search?v=4&key=' + sofia.config.dbsKey + '&fileset_id=' + textid + '&query=' + text.replace(/\s/gi, '+') + '&limit=2000',
			success: function(data) {

				for (var i=0, il=data.data.length; i<il; i++) {
					var verse = data.data[i],
						dbsBookCode = bible.DEFAULT_BIBLE[ bible.DEFAULT_BIBLE_USFM.indexOf(verse.book_id) ],
						fragmentid = dbsBookCode + verse.chapter + '_' + verse.verse_start,
						hasMatch = e.data.searchTermsRegExp[0].test(verse.verse_text);

					if (hasMatch && (divisions.length == 0 || divisions.indexOf(dbsBookCode) > -1)) {
						e.data.results.push({
							fragmentid: fragmentid,
							html: highlightWords(verse.verse_text, e.data.searchTermsRegExp)
						});
					}
				}

				callback(data);
			}
		});
	}

	function highlightWords(text, searchTermsRegExp) {

		var processedHtml = text;

		for (var j=0, jl=searchTermsRegExp.length; j<jl; j++) {

			searchTermsRegExp[j].lastIndex = 0;

			// surround the word with a highlight
			processedHtml = processedHtml.replace(searchTermsRegExp[j], function(match) {
				return '<span class="highlight">' + match + '</span>';
			});
		}

		return processedHtml;
	}



	return {
		getTextManifest: getTextManifest,
		getTextInfo: getTextInfo,
		loadSection: loadSection,
		startSearch: startSearch,
		fullName: fullName
	}

})();

// truth AND Love
// 1. load indexes
// 2. find verses with both terms
// 3. reduce to chapters
// 4. load chapters
// 5. extract verses


// truth OR love
// 1. load indexes
// 2. merge lists of verses into canonical order
// 3. reduce to chapters
// 4. load chapters
// 5. extract verses


// "in truth"
// 1. load indexes
// 2. ...
// 3. reduce to chapters
// 4. load chapters
// 5. extract verses


// truth love
// 1. NO INDEX
// 2. load every chapter
// 3. use regexp to find verses with words

var singleWordLanguages = ['cht','chs','chi','zho','cmn', 'jpn', 'kor'];

TextSearch = function() {

	var
		baseContentPath = sofia.config.baseContentUrl + 'content/' + 'texts/',
		isSearching = false,
		canceled = false,
		searchText = '',
		searchTextid = '',
		searchDivisions = [],
		//isAsciiRegExp = new RegExp('^[\040-\176]*$', 'gi'),
		isLemmaRegExp = /[GgHh]\d{1,6}/g,

		isLemmaSearch = false,
		startTime = null,

		searchTermsRegExp = [],
		searchIndexLoader = new SearchIndexLoader(),
		searchIndexesData = [],
		searchIndexesCurrentIndex = 0,

		searchType = 'AND',

		searchFinalResults = [];
		;

	searchIndexLoader.on('complete', indexesLoaded);

	function start(textid, divisions, text) {

		//console.log('TextSearch.start', text, textid);

		if (isSearching) {
			//console.log('already started ... return');
			return false;
		}
		isSearching = true;

		// store variables
		searchText = text.trim();
		searchTextid = textid;
		searchDivisions = divisions;
		textInfo = TextLoader.getText(searchTextid);


		// reset
		canceled = false;
		startTime = new Date();
		searchFinalResults = [];
		searchTermsRegExp = [];
		searchIndexesData = []
		searchIndexesCurrentIndex = 0;
		searchType = /\bOR\b/gi.test(text) ? 'OR' : 'AND';

		//createSearchTerms();
		isLemmaSearch = isLemmaRegExp.test(searchText);
		searchTermsRegExp = SearchTools.createSearchTerms(text, isLemmaSearch);

		if (sofia.config.serverSearchPath != '' && (window.location.protocol != 'file:' || sofia.config.baseContentUrl != '')) {

			startServerSearch(textInfo, searchDivisions, searchText, isLemmaSearch);
		} else {
			// load indexes
			searchIndexLoader.loadIndexes(textInfo, searchDivisions, searchText, isLemmaSearch);
		}

		return true;
	}

	function startServerSearch(textInfo, searchDivisions, searchText, isLemmaSearch) {

		$.ajax({
			dataType: 'jsonp',
			url: sofia.config.serverSearchPath,
			data: {
				textid: textInfo.id,
				search: searchText.toLowerCase(),
				divisions: searchDivisions.join(','),
				date: (new Date()).toString()
			},
			success: function(data) {

				// create results
				if (data && data.results) {

					// STEMs?
					if (typeof data.stem_words != 'undefinded' && data.stem_words.length > 0) {

						searchType = 'OR';
						// redo search terms
						searchTermsRegExp = [];

						for (var i=0, il=data.stem_words.length; i<il; i++) {
							searchTermsRegExp.push( new XRegExp('\\b(' + data.stem_words[i] + ')\\b', 'gi') );
						}

					}



					for (var i=0, il=data.results.length; i<il; i++) {
						var result = data.results[i],
							fragmentid = Object.keys(result)[0],
							html = result[fragmentid];


						var result = findMatchesInVerse(html);

						if (result.foundMatch) {
							searchFinalResults.push({fragmentid: fragmentid, html: result.html});
						} else {
							console.log('no match', html);
						}

						// add to results
						//searchFinalResults.push({fragmentid: fragmentid, html: html});
					}


					ext.trigger('complete', {type: 'complete', target:this, data: {results: searchFinalResults, searchIndexesData: searchIndexesData, searchTermsRegExp: searchTermsRegExp, isLemmaSearch: isLemmaSearch}});


				} else {

					ext.trigger('complete', {type: 'complete', target: this, data: {results: null, searchIndexesData: searchIndexesData, searchTermsRegExp: searchTermsRegExp, isLemmaSearch: isLemmaSearch}});


				}



				isSearching = false;
			},
			error: function(a,b,c,d) {
				console.log('error:serverSearch', a,b,c,d);
				//reset()
			}
		})
	}

	// fires after indexer loader is done
	function indexesLoaded(e) {
		//console.log('searchIndexLoader:complete', e.data);

		if (e.data.loadedIndexes.length == 0) {

			// BRUTE FORCE?
			//console.log('BRUTE FORCE');

			// create "index" of all verses?
			searchIndexesData = [];
			for (var i=0, il = textInfo.sections.length; i<il; i++) {
				var sectionid = textInfo.sections[i],
					dbsBookCode = sectionid.substr(0,2),
					chapterNumber = parseInt(sectionid.substr(2), 10),
					sectionData = {
						sectionid: sectionid,
						fragmentids: []
					};

				for (v=1; v<=bible.BOOK_DATA[dbsBookCode].chapters[chapterNumber-1]; v++ ) {
					sectionData.fragmentids.push(sectionid + '_' + v);
				}


				searchIndexesData.push(sectionData);
			}

			loadNextSectionid();



			/*
			isSearching = false;
			ext.trigger('indexerror', {type: 'indexerror', target:this, data: {results: searchFinalResults}});
			*/

		} else {
			ext.trigger('indexcomplete', {type: 'indexcomplete', target:this, data: {searchIndexesData: e.data.loadedResults }});

			// begin loading

			if (e.data.stemInfo && e.data.stemInfo.length > 0) {

				//if (typeof data.stem_words != 'undefinded' ) {

					searchType = 'OR';
					// redo search terms
					searchTermsRegExp = [];

					for (var si=0, sil=e.data.stemInfo.length; si <sil; si++) {
						var stemWords = e.data.stemInfo[si].words;

						for (var i=0, il=stemWords.length; i<il; i++) {
							searchTermsRegExp.push( new XRegExp('\\b(' + stemWords[i] + ')\\b', 'gi') );
						}

					}
				//}
			}


			searchIndexesData = e.data.loadedResults;
			searchIndexesCurrentIndex = -1;

			//console.log('start loading indexes', searchIndexesData.length, searchIndexesCurrentIndex);
			loadNextSectionid();
		}

	}

	function loadNextSectionid() {
		searchIndexesCurrentIndex++;

		////console.log('loadNextSectionid', searchIndexesData.length, searchIndexesCurrentIndex);

		if (searchIndexesCurrentIndex > searchIndexesData.length) {

			//console.log('OVER');

			isSearching = false;

		} else if (searchIndexesCurrentIndex == searchIndexesData.length) {
			// DONE!

			//console.log('textSearch:complete');

			ext.trigger('complete', {type: 'complete', target:this, data: {results: searchFinalResults, searchIndexesData: searchIndexesData, searchTermsRegExp: searchTermsRegExp, isLemmaSearch: isLemmaSearch}});

			isSearching = false;

		} else {
			var sectionData = searchIndexesData[searchIndexesCurrentIndex],
				sectionid = sectionData ? sectionData.sectionid : null,
				fragmentids = sectionData ? sectionData.fragmentids : null;
				;// url = baseContentPath + textInfo.id + '/' + sectionid + '.json';

			if (!sectionData) {
				loadNextSectionid();
				return;
			}

			ext.trigger('load', {type: 'load', target:this, data: {sectionid: sectionid, index: searchIndexesCurrentIndex, total: searchIndexesData.length}});

			TextLoader.loadSection(textInfo, sectionid, function(content) {

				for (var i=0, il=fragmentids.length; i<il; i++) {
					var
						fragmentid = fragmentids[i],
						fragmentNode = content.find('.' + fragmentid).clone(),

						// assuming a single node
						//html = fragmentNode.html();

						html = '';

					// remove notes
					fragmentNode.find('.note, .cf, .v-num, .verse-num').remove();

					// concat verses split over multiple <span class="v"> nodes (paragraphs)
					fragmentNode.each(function(i,el) {
						html += $(el).html() + ' ';
					});

					if (fragmentNode.length > 0) {

						var result = findMatchesInVerse(html);

						if (result.foundMatch) {
							searchFinalResults.push({fragmentid: fragmentid, html: result.html});
						}
					}
				}


				// DEBUG!!
				//setTimeout(function() {
					loadNextSectionid();
				//}, 10);


			}, function(error) {

				//console.log('searchindex:error');

				loadNextSectionid();
			});

		}
	}


	function findMatchesInVerse(html) {
		var processedHtml = html,
			foundMatch = false,
			regMatches = new Array(searchTermsRegExp.length);

		for (var j=0, jl=searchTermsRegExp.length; j<jl; j++) {

			searchTermsRegExp[j].lastIndex = 0;

			if (isLemmaSearch) {

				// add the 'highlight' class to the <l> node
				processedHtml = processedHtml.replace(searchTermsRegExp[j], function(match) {
					regMatches[j] = true;
					foundMatch = true;
					return match + ' class="highlight" ';
				});

			} else {

				// surround the word with a highlight
				processedHtml = processedHtml.replace(searchTermsRegExp[j], function(match) {
					regMatches[j] = true;
					foundMatch = true;
					return '<span class="highlight">' + match + '</span>';
				});

			}
		}

		if (searchType == 'AND') {
			var foundAll = true;
			for (var j=0, jl=regMatches.length; j<jl; j++) {
				if (regMatches[j] !== true) {
					foundAll = false;
					break;
				}
			}
			foundMatch = foundAll;

		}

		return {html: processedHtml, foundMatch: foundMatch};
	}




	var ext = {
		start: start,
		findMatchesInVerse: findMatchesInVerse
	};
	ext = $.extend(true, ext, EventEmitter);

	return ext;
};

SearchTools = {

	isAsciiRegExp: new RegExp('^[\040-\176]*$', 'gi'),

	isLemmaRegExp: /[GgHh]\d{1,6}/g,

	createSearchTerms: function (searchText, isLemmaSearch) {
		var searchTermsRegExp = [];

		if (isLemmaSearch) {

			var strongNumbers = searchText.split(' ');

			for (var i=0, il=strongNumbers.length; i<il; i++) {

				var part = strongNumbers[i];

				searchTermsRegExp.push( new RegExp('s=("|\')(\\w\\d{1,4}[a-z]?\\s)?' + '(G|H)?' + part.substr(1) + '[a-z]?(\\s\\w\\d{1,4}[a-z]?)?("|\')', 'gi') );

			}

		} else {



			// check for quoted search "jesus christ"
			if (searchText.substring(0,1) == '"' && searchText.substring(searchText.length-1) == '"') {

				var withoutQuotes =  searchText.substring(1,searchText.length-1);
				withoutQuotes = withoutQuotes.replace(/\s/g,'(\\s?(<(.|\\n)*?>)?\\s?)?');

				searchTermsRegExp.push( new XRegExp('\\b(' + withoutQuotes + ')\\b', 'gi') );

			} else {

				// ASCII characters have predictable word boundaries (space ' ' = \b)
				SearchTools.isAsciiRegExp.lastIndex = 0;

				if (SearchTools.isAsciiRegExp.test( searchText )) {

					// for non-quoted searches, use "AND" search
					var andSearchParts = searchText.split(/\s+AND\s+|\s+/gi);

					// filter for duplicate words
					andSearchParts = $.unique(andSearchParts);

					for (var i=0, il=andSearchParts.length; i<il; i++) {

						var part = andSearchParts[i],
							partRegex = new XRegExp('\\b(' + part + ')\\b', 'gi');

						searchTermsRegExp.push( partRegex );
					}

				} else {

					var words = SearchTools.splitWords(searchText);

					for (var j=0, jl=words.length; j<jl; j++) {

						searchTermsRegExp.push( new XRegExp(words[j], 'gi') );

					}
				}
			}
		}

		return searchTermsRegExp;
	},

	splitWords: function(input) {

		var
			removeRegChars = ['\\', '^', '$', '.', '|', '?', '*', '+', '(', ')', '[', ']', '{', '}'];
			otherRemoveChars = [
				// roman
				',',';', '!', '-', '–', '―', '—', '~', ':', '"','/', "'s", '’s', "'", '‘', '’', '“', '”', '¿', '<', '>', '&',
				// chinese
				'。', '：', '，', '”', '“', '）', '（', '~', '「', '」'
			],
			punctuation = [].concat(removeRegChars).concat(otherRemoveChars),
			innerWordExceptions = ["'", '’', '-'],
			words = [],
			word = '';

		function addWord() {
			if (word != '')	{
				words.push(word);
			}
			word = '';
		}

		// formalize string
		input = new String(input);

		// yes or no on apostrophes
		input = input.replace(/(['’]s)/gi, '');

	    for (var i = 0, il = input.length; i<il; i++) {
			var	letter = input.charAt(i),
				charCode = input.charCodeAt(i),
				isFirstChar = (i==0);
				isLastChar = (i==il-1),
				isPunctuation = punctuation.indexOf(letter) > -1,
				isWhitespace = letter == ' ',
				isLetter = !(isWhitespace || isPunctuation);

			// if this is a letter
			if ( isLetter ) {

				 word += letter;

				// If this is a Chinese/Japanese/Korean ideograph, it is a word by itself. No separator is needed.
				if (((charCode >= 0x4E00) && (charCode <= 0x9FFF)) || ((charCode >= 0x3400) && (charCode <= 0x4DFF)) || ((charCode >= 0x20000) && (charCode <= 0x2A6DF))) {

	                addWord(); // Technically, some ideographs combine to make a compound word, but concordance/search will work without that refinement, possibly with extra hits.
	            }

			} else if (!isFirstChar && !isLastChar && innerWordExceptions.indexOf(letter) > -1 && punctuation.indexOf(input[i-1]) == -1 && punctuation.indexOf(input[i+1]) == -1) {

				word += letter;

			} else {
				// it was punctuation!
				addWord();
			}

			////console.log(letter, charCode);
	    }

		addWord();

		words = $.unique(words);

		return words;
	},

	HASHSIZE: 20,

	hashWord: function(word) {
	    var hash = 0;
	    for (i = 0; i < word.length; i++) {
	        hash += word.charCodeAt(i);
	        hash %= SearchTools.HASHSIZE;
	   }
	   return hash;
	}
};

SearchIndexLoader = function() {

	var
		baseContentPath = sofia.config.baseContentUrl + 'content/' + 'texts/',
		textInfo = null,
		searchTerms = [],
		searchTermsIndex = -1,
		isLemmaSearch = false,
		isStemEnabled = true,
		stemmingData = {},
		stemInfo = [],
		searchDivisions = [],
		// initial load: [{term:'light': occurrences: ['GN1_2', 'GN2_5']}, {term: 'love': ['JN3']}
		loadedIndexes = [],
		// final: [{sectionid:'GN1', fragmentids: ['GN1_2', 'GN1_3']}, {sectionid:'GN2', fragmentids: ['GN2_4']} }
		loadedResults = [],
		searchType = 'AND'; // OR

	// START
	function loadIndexes(newTextInfo, divisions, searchText, isLemma) {

		isLemmaSearch = isLemma;
		textInfo = newTextInfo;
		searchDivisions = divisions;

		searchTerms = SearchTools.splitWords(searchText);

		searchTermsIndex = -1;
		loadedIndexes = [];
		loadedResults = [];
		stemInfo = [];
		stemmingData = isLemmaSearch ? null : {};

		searchType = /\bOR\b/gi.test(searchText) ? 'OR' : 'AND';

		if (isStemEnabled && !isLemmaSearch) {
			loadStemmingData();
		} else {
			loadNextIndex();
		}
	}

	function loadStemmingData() {

		var stemUrl = baseContentPath + textInfo.id + '/index/stems.json';

		// attempt to load in index
		$.ajax({
			beforeSend: function(xhr){
				if (xhr.overrideMimeType){
					xhr.overrideMimeType("application/json");
				}
			},

			dataType: 'json',
			url: stemUrl,
			success: function(data) {
				console.log('Loaded Stems!', textInfo.id);

				stemmingData = data;

				loadNextIndex();
			},
			error: function() {
				// set it to null in order to check later
				stemmingData = null;

				console.log('No stem data for', textInfo.id);
				loadNextIndex();
			}
		});
	}


	function loadNextIndex() {

		// starts at -1, so this will make the first one 0
		searchTermsIndex++;

		if (searchTermsIndex < searchTerms.length) {

			loadSearchTermIndex( searchTerms[searchTermsIndex] );

		} else {

			// if we've done all the indexes, then it's time to start combining them
			//combineIndexes();
			processIndexes();
		}

	}

	function loadSearchTermIndex(searchTerm) {

		var indexUrl = '',
			key = '',
			hash = '',
			stem = '';

		if (isLemmaSearch) {
			key = searchTerm.toUpperCase();
			var letter = key.substr(0,1),
				firstNumber = searchTerm.length >= 5 ? searchTerm.substr(1,1) : '0';

			indexUrl = baseContentPath + textInfo.id + '/indexlemma/_' + letter.toUpperCase() + firstNumber + '000' + '.json';

		} else {
			key = searchTerm.toLowerCase();

			if (isStemEnabled && stemmingData != null) {
				stem = stemmingData[key],
				hash = SearchTools.hashWord(stem);
				indexUrl = baseContentPath + textInfo.id + '/index/_stems_' + hash + '.json';

			} else {
				hash = SearchTools.hashWord(key);
				indexUrl = baseContentPath + textInfo.id + '/index/_' + hash + '.json';

			}
		}

		if (searchTerm == 'undefined') {
			//console.log('STOP search. undefined term');
			return;
		}

		//console.log('Loading Index:' + searchTerm + ',' + searchTermEncoded);

		// attempt to load in index
		$.ajax({
			beforeSend: function(xhr){
				if (xhr.overrideMimeType){
					xhr.overrideMimeType("application/json");
				}
			},

			dataType: 'json',
			url: indexUrl,
			success: function(data) {

				var fragments = null;

				//console.log(key, stem, data, data[stem]);

				if (isStemEnabled && stemmingData != null) {
					fragments = data[stem].fragmentids;
					stemInfo.push({
						word: key,
						stem: stem,
						words: data[stem].words
					});
				} else {
					fragments = data[key];
				}

				loadedIndexes.push(fragments);

				loadNextIndex();
			},
			error: function() {
				//console.log('no index for: ' + searchTerm);
				loadNextIndex();
			}

		});

	}

	function processIndexes() {

		// we'll combine everything into this ['GN1_1', 'GN1_2']
		fragmentids = [];
		// then pair down to this [{sectionid:'GN1', fragmentids: ['GN1_1','GN1_2']}]
		loadedResults = [];

		if (loadedIndexes.length > 0) {

			if (searchType == 'OR') {
				// combine all the fragments
				for (var i=0, il=loadedIndexes.length; i<il; i++) {
					fragmentids = fragmentids.concat( loadedIndexes[i] ); // .occurrences );
					////console.log(loadedIndexes[i].term);
					////console.log(loadedIndexes[i].occurrences);
				}

				// sort!
				fragmentids.sort(function(a, b) {
					// split into parts
					function splitFragment(fragmentid) {
						var parts = fragmentid.split('_'),
							sectionid = parts[0],
							sectionIndex = textInfo.sections.indexOf(sectionid),
							fragmentNum = parseInt(parts[1], 10),
							value = {
								sectionid: sectionid,
								sectionIndex: sectionIndex,
								fragmentNum: fragmentNum
							};

						return value;
					}

					var fraga = splitFragment(a),
						fragb = splitFragment(b);


					if (fraga.sectionIndex < fragb.sectionIndex ||
						(fraga.sectionIndex == fragb.sectionIndex && fraga.fragmentNum < fragb.fragmentNum) )
						return -1;
					if (fraga.sectionIndex > fragb.sectionIndex ||
						(fraga.sectionIndex == fragb.sectionIndex && fraga.fragmentNum > fragb.fragmentNum) )
						return 1;
					// a must be equal to b
					return 0;
				});


			} else if (searchType == 'AND') {

				// combine arrays to only include fragments (verses) where all indexes overlap (truth AND love)
				var totalIndexes = loadedIndexes.length;
				if (totalIndexes == 1) {
					fragmentids = loadedIndexes[0]; // .occurrences;
				} else if (totalIndexes > 1) {
					//fragmentids = loadedIndexes[0].occurrences.filter(function(val) {
					fragmentids = loadedIndexes[0].filter(function(val) {
						var inOtherArrays = true;
						for (var i=1; i<totalIndexes; i++) {
							//if (loadedIndexes[i].occurrences.indexOf(val) == -1) {
							if (loadedIndexes[i].indexOf(val) == -1) {
								inOtherArrays = false;
								break;
							}
						}

						return inOtherArrays;
					});
				}
			}

			// reformat fragments into sectionids
			// ['JN1_1','JN1_2'] => [{sectionid: 'JN1', fragmentids: ['JN1_1','JN1_2']}]
			if (fragmentids) {
				for (var i=0, il=fragmentids.length; i<il; i++) {
					var fragmentid = fragmentids[i];

					if (fragmentid != '' && fragmentid != null) {


						var	sectionid = fragmentid.split('_')[0],
							dbsBookCode = sectionid.substring(0,2);

						if (searchDivisions.length == 0 || searchDivisions.indexOf(dbsBookCode) > -1) {

							// see if we already created data for this section id
							var sectionidInfo = $.grep(loadedResults, function(val){ return val.sectionid == sectionid; });

							// create new data
							if (sectionidInfo.length == 0) {
								loadedResults.push({sectionid: sectionid, fragmentids: [fragmentid]});
							}
							// add to this sectionid
							else {
								sectionidInfo[0].fragmentids.push(fragmentid);
							}
						}
					}
				}
			}
		}

		// send up the chain
		ext.trigger('complete', {type:'complete', target: this, data: {
																	loadedIndexes: loadedIndexes,
																	loadedResults: loadedResults,
																	fragmentids: fragmentids,
																	stemInfo: stemInfo,
																}
								});
	}

	var ext = {
		loadIndexes: loadIndexes
	};
	ext = $.extend(true, ext, EventEmitter);

	return ext;
};


if (typeof sofia != 'undefined') {
	sofia.audioSources = [];
}

var AudioDataManager = function() {

	function getAudioInfo(textInfo, callback) {

		var index = 0;
		function doNext() {

			var audioSource = sofia.audioSources[index];
			audioSource.getAudioInfo(textInfo, recieveData);

			////console.log('-AudioSource', index, textInfo.id);
		}
		function recieveData(audioInfo) {

			////console.log('-AudioSource.receiveData', textInfo.id);

			// send data backup
			if (audioInfo != null) {
				////console.log('found: ', data);

				audioInfo.audioSourceIndex = index;

				callback(audioInfo);
			} else {
				index++;

				if (index < sofia.audioSources.length) {
					// try again
					doNext();

				} else {
					// didn't find anything
					callback(null);
				}

			}

		}

		doNext();
	}

	function getFragmentAudio(textInfo, audioInfo, fragmentid, audioOption, callback) {

		// pass to the correct source using the index number assigned when getAudioInfo was called
		sofia.audioSources[audioInfo.audioSourceIndex].getFragmentAudio(textInfo, audioInfo, fragmentid, audioOption, callback);

	}

	function getNextFragment(textInfo, audioInfo, fragmentid, callback) {
		sofia.audioSources[audioInfo.audioSourceIndex].getNextFragment(textInfo, audioInfo, fragmentid, callback);
	}

	function getPrevFragment(textInfo, audioInfo, fragmentid, callback) {
		sofia.audioSources[audioInfo.audioSourceIndex].getPrevFragment(textInfo, audioInfo, fragmentid, callback);
	}


	var audio = {
		getAudioInfo: getAudioInfo,
		getFragmentAudio: getFragmentAudio,
		getNextFragment: getNextFragment,
		getPrevFragment: getPrevFragment
	};
	return audio;
};


var LocalAudio = (function() {

	function getAudioInfo(textInfo, callback) {
		////console.log('LocalAudio', textInfo.id);

		var checkDirectory = textInfo.id;


		if (typeof textInfo.audioDirectory != 'undefined') {

			// if empty it means, "Don't check anything"
			if (textInfo.audioDirectory == '') {
				callback(null);
				return;
			} else {

				checkDirectory = textInfo.audioDirectory;
			}
		}

		sofia.ajax({
			dataType: 'json',
			url: 'content/audio/' + checkDirectory + '/info.json',
			success: function(audioInfo) {

				if (typeof audioInfo == 'undefined' ) {
					callback(null);
					return;
				}

				audioInfo.type = 'local';
				audioInfo.directory = checkDirectory;

				if (!audioInfo.title) {
					audioInfo.title = 'Local';
				}

				////console.log('--LocalAudio success', textInfo.id);

				callback(audioInfo);
			},
			error: function(e) {

				////console.log('--LocalAudio error', textInfo.id);

				callback(null);
			}
		});
	}

	function getFragmentAudio(textInfo, audioInfo, fragmentid, audioOption, callback) {

		var fragmentData = findFragmentData(audioInfo, fragmentid);

		if (fragmentData == null) {
			callback(null);
			return;
		}

		// yeah, we found one!
		var audioData = {
			url: sofia.config.baseContentUrl + 'content/' + 'audio/' + audioInfo.directory + '/' + fragmentData.filename + '.' + fragmentData.exts[0],
			id: fragmentData.index,
			start: fragmentData.start,
			end: fragmentData.end
		}

		callback(audioData);
	}

	function findFragmentData(audioInfo, fragmentid) {
		// split through all the files
		var verseParts = fragmentid.split('_'),
			sectionid = verseParts[0],
			verseNumber = parseInt(verseParts[1], 10),
			fragmentIndex = 0,
			fragmentData = null;

		// look through all the ranges
		/*
		{
			"start": "GN1_1",
			"end": "GN1_31",
			"filename": "GN1",
			"exts": [
				"mp3"
			]
		},
		*/
		for (var i=0, il=audioInfo.fragments.length; i<il; i++) {
			var fragmentFileinfo = audioInfo.fragments[i],
				startFragmentParts = fragmentFileinfo.start.split('_'),
				startSectionid = startFragmentParts[0];

			// if matching chapter then check if verse
			if (sectionid == startSectionid) {
				var startVerseNumber = parseInt(startFragmentParts[1], 10),
					endFragmentParts = fragmentFileinfo.end.split('_'),
					endVerseNumber = parseInt(endFragmentParts[1], 10);

				if (verseNumber >= startVerseNumber && verseNumber <= endVerseNumber) {
					//filename = fragmentFileinfo.filename + '.' + fragmentFileinfo.exts[0];

					fragmentIndex = i;
					fragmentData = fragmentFileinfo;

					break;
				}
			}
		}

		if (fragmentData != null) {
			fragmentData.index = fragmentIndex;
		}

		return fragmentData;
	}

	function getNextFragment(textInfo, audioInfo, fragmentid, callback) {
		var fragmentData = findFragmentData(audioInfo, fragmentid);

		if (fragmentData == null) {
			callback(null);
			return;
		}

		if (fragmentData.index < audioInfo.fragments.length-1) {
			var nextFragmentData = audioInfo.fragments[fragmentData.index+1];

			callback(nextFragmentData.start);
		} else {
			callback(null);
		}
	}

	function getPrevFragment(textInfo, audioInfo, fragmentid, callback) {
		var fragmentData = findFragmentData(audioInfo, fragmentid);

		if (fragmentData == null) {
			callback(null);
			return;
		}

		if (fragmentData.index > 0) {
			var prevFragmentData = audioInfo.fragments[fragmentData.index-1];

			callback(prevFragmentData.start);
		} else {
			callback(null);
		}
	}

	var audio = {
		getAudioInfo: getAudioInfo,
		getFragmentAudio: getFragmentAudio	,
		getNextFragment: getNextFragment,
		getPrevFragment: getPrevFragment
	};
	return audio;
})();




var FaithComesByHearingAudio = (function() {

	var fcbhLocation = null,
		fcbhList = null,
		fcbhIsLoaded = false,

		currentTextInfo = null,
		currentCallback = null


	function init() {
		$(function(){
			loadFcbHearingLocations();
		});
	}

	function loadFcbHearingLocations() {
		$.ajax({
			dataType: 'jsonp',
			url: sofia.protocol + '//dbt.io/audio/location?v=2&reply=jsonp&key=' + sofia.config.fcbhKey,
			success: function(data) {
				fcbhLocation = data;
			},
			complete: function() {
				loadFcbHearingInfo();
			}
		});
	}

	function loadFcbHearingInfo() {
		$.ajax({
			dataType: 'jsonp',
			url: sofia.protocol + '//dbt.io/library/volume?v=2&reply=jsonp&media=audio&delivery=web&key=' + sofia.config.fcbhKey,
			success: function(data) {
				fcbhList = data;

				////console.log('FCBH', fcbhLocation, fcbhList);

			},
			complete: function() {
				fcbhIsLoaded = true;

				attemptGetAudioInfo();
			}
		});
	}


	function getAudioInfo(textInfo, callback) {

		// store
		currentTextInfo = textInfo;
		currentCallback = callback;

		// attempt
		attemptGetAudioInfo();
	}

	function attemptGetAudioInfo() {

		// check for FCBH info hardcoded in the textInfo object
		if (fcbhIsLoaded && currentTextInfo != null) {
			var fcbhKeys = ['fcbh_audio_nt','fcbh_audio_ot','fcbh_drama_nt','fcbh_drama_ot'],
				fcbhExists = false,
				audioData = {title: 'FCBH', type: 'fcbh'};

			for (var i=0, il=fcbhKeys.length; i<il; i++) {
				var key = fcbhKeys[i],
					keyData = currentTextInfo[ key ];

				audioData[key] = keyData;

				if (keyData && keyData != '') {
					fcbhExists = true;
				}
			}

			// favor drama
			if (audioData.fcbh_drama_nt != '' || audioData.fcbh_drama_ot != '') {
				audioData.title += ' (drama)';
			}

			if (fcbhExists) {
				currentCallback(audioData);
			} else {
				currentCallback(null);
			}

			currentTextInfo = null;
			currentCallback = null;

			return;
		}


		// TEMP: no longer attempt FCBH detection
		return;


		// if not in textInfo, then we need to look it up from the FCBH data
		if (fcbhIsLoaded && currentTextInfo != null && currentCallback != null) {

			var audioData = {
				title: 'FCBH',
				fcbh_audio_nt: getFbchCollection(currentTextInfo, 'non-drama', 'nt'),
				fcbh_audio_ot: getFbchCollection(currentTextInfo, 'non-drama', 'ot'),
				fcbh_drama_nt: getFbchCollection(currentTextInfo, 'drama', 'nt'),
				fcbh_drama_ot: getFbchCollection(currentTextInfo, 'drama', 'ot')
			};

			// if we find one, send it!
			if (audioData.fcbh_audio_nt != null ||
				audioData.fcbh_audio_ot != null ||
				audioData.fcbh_drama_nt != null ||
				audioData.fcbh_drama_ot != null) {

				currentCallback(audioData);
			} else {

				currentCallback(null);
			}



			currentTextInfo = null;
			currentCallback = null;
		}
	}

	function getFbchCollection(textInfo, mediaType, testament ) {

		var
			// our attempt to find a fake dam_id (real: ENGESVN2DA and ENGESVO2DA)
			dam_id_start = textInfo.id.replace(/[-_]/gi, '').toUpperCase(),
			results = [];


		// match dam_id
		for (var i=0, il = fcbhList.length; i<il; i++) {
			var fbchCollection = fcbhList[i];

			if (fbchCollection.dam_id && fbchCollection.dam_id.indexOf(dam_id_start) > -1) {
				results.push(fbchCollection);
			}
		}

		// if no dam_id match, then try language
		if (results.length == 0 && textInfo.lang != 'eng') {
			// dam_id
			for (var i=0, il = fcbhList.length; i<il; i++) {
				var fbchCollection = fcbhList[i];

				if (fbchCollection.language_iso && fbchCollection.language_iso == textInfo.lang) {
					results.push(fbchCollection);
				}
			}
		}

		// if no dam_id or langauge match, try family code
		if (results.length == 0 && textInfo.lang != 'eng') {
			// dam_id
			for (var i=0, il = fcbhList.length; i<il; i++) {
				var fbchCollection = fcbhList[i];

				if (fbchCollection.language_family_iso && fbchCollection.language_family_iso == textInfo.lang) {
					results.push(fbchCollection);
				}
			}
		}

		// filter by testament if needed
		if (testament != '') {
			var testamentResults = [];

			for (var i=0, il = results.length; i<il; i++) {
				var fbchCollection = results[i];

				if (fbchCollection.collection_code && fbchCollection.collection_code.toLowerCase() == testament) {
					testamentResults.push(fbchCollection);
				}
			}

			results = testamentResults;
		}

		// filter by mediaType ('drama' or 'non-drama') if possible
		if (mediaType != '') {
			var mediaTypeResults = [];

			for (var i=0, il = results.length; i<il; i++) {
				var fbchCollection = results[i];

				if (fbchCollection.media_type && fbchCollection.media_type.toLowerCase() == mediaType) {
					mediaTypeResults.push(fbchCollection);
				}
			}

			if (mediaTypeResults.length > 0) {
				results = mediaTypeResults;
			}
		}

		if (results.length > 0) {
			return results[0].dam_id;
		} else {
			return null;
		}
	}

	function getFbchCollectionById(dam_id) {
		var collection = null;

		if (fcbhList == null) {
			return null;
		}

		for (var i=0, il = fcbhList.length; i<il; i++) {
			var fbchCollection = fcbhList[i];

			if (fbchCollection.dam_id && fbchCollection.dam_id == dam_id) {
				collection = fbchCollection;
				break;
			}
		}

		return collection;
	}

	function getFragmentAudio(textInfo, audioInfo, fragmentid, audioOption, callback) {
		if (audioInfo == null) {
			callback(null);
			return;
		}

		// find the right dam_id for this audio fragment
		var
			fragmentparts = fragmentid.split('_'),
			sectionid = fragmentparts[0],
			dbsBookCode = sectionid.substr(0,2),
			chapterNum = sectionid.substr(2),
			bookInfo = bible.BOOK_DATA[dbsBookCode],
			testament = bible.OT_BOOKS.indexOf(dbsBookCode) > -1 ? 'ot' :
						bible.NT_BOOKS.indexOf(dbsBookCode) > -1 ? 'nt' : '',
			dramaKey = 'fcbh_drama_' + testament,
			audioKey = 'fcbh_audio_' + testament,
			dam_id = '';


		// apocrypha!
		if (testament == '') {
			callback(null);
			return;
		}



		// find correct damID
		if (audioOption == 'audio') {

			if (audioInfo[audioKey] && audioInfo[audioKey] != '') {
				dam_id = audioInfo[audioKey];
			} else if (audioInfo[dramaKey] && audioInfo[dramaKey] != '') {
				dam_id = audioInfo[dramaKey];
			}

		} else if (audioOption == 'drama') {

			if (audioInfo[dramaKey] && audioInfo[dramaKey] != '') {
				dam_id = audioInfo[dramaKey];
			} else if (audioInfo[audioKey] && audioInfo[audioKey] != '') {
				dam_id = audioInfo[audioKey];
			}
		}

		//console.log('audio preference', audioOption, dam_id);

		var collectionInfo = getFbchCollectionById(dam_id);
		if (collectionInfo != null) {
			audioInfo.title = 'FCBH: ' + collectionInfo.version_code; //  + '-' + (collectionInfo.version_name != '' ? collectionInfo.version_name : collectionInfo.volume_name);
		}

		var
			url = sofia.protocol + '//dbt.io/audio/path?v=2&reply=jsonp&dam_id=' + dam_id + '&book_id=' + bookInfo.osis.toLowerCase() + '&chapter_id=' + chapterNum.toString() + '&key=' + sofia.config.fcbhKey;

		$.ajax({
			dataType: 'jsonp',
			url: url,
			success: function(pathData) {

				if (fcbhLocation == null || fcbhLocation.length == 0) {
					callback(null);
					return;
				}

				if (pathData.length == 0) {
					callback(null);
					return;
				}

				var server = fcbhLocation[0],
					url = server.protocol + "://" + server.server + server.root_path + "/" + pathData[0].path,
					audioData = {
						id: sectionid,
						url: url,
						start: sectionid + '_1',
						end: ''
					};

				if (callback) {
					callback(audioData);
				}
			},
			error: function(a,b,c,d) {

				//console.log('FCBH location error', a,b,c,d);

				if (callback) {
					callback(null);
				}
			}
		});

	}

	function getNextFragment(textInfo, audioInfo, fragmentid, callback) {

		// next chapter!
		var sectionid = fragmentid.split('_')[0],
			reference = new bible.Reference(sectionid),
			nextChapter = reference.nextChapter();

		callback( nextChapter.toSection() );

	}

	function getPrevFragment(textInfo, audioInfo, fragmentid, callback) {

		// prev chapter!
		var sectionid = fragmentid.split('_')[0],
			reference = new bible.Reference(sectionid),
			prevChapter = reference.prevChapter();

		callback( prevChapter.toSection() );
	}

	var audio = {
		getAudioInfo: getAudioInfo,
		getFragmentAudio: getFragmentAudio,
		getFbchCollection: getFbchCollection,
		getFragmentAudio: getFragmentAudio,
		fcbhIsLoaded: fcbhIsLoaded,
		getNextFragment: getNextFragment,
		getPrevFragment: getPrevFragment
	};

	init();

	return audio;
})();


// FCBH First (March 2014)
sofia.initMethods.push(function() {
	if (typeof sofia != 'undefined') {
		if (sofia.config.enableOnlineSources) {

			sofia.audioSources.push(FaithComesByHearingAudio);
		}
	}

	if (typeof sofia != 'undefined') {
		sofia.audioSources.push(LocalAudio);
	}
});

var JesusFilmMediaApi = (function() {

	var
		isLoaded = false,
		isLoading = false,
		jfmLanguages = null,
		getPlayerCallbacks = [];

	function load() {

		if (isLoaded || isLoading) {
			return;
		}

		isLoading = true;
		isLoaded = false;

		$.ajax({

			url: 'content/media/jesusfilmmedia/jesusfilmlanguages.json',
			success: function(data) {

				isLoading = true;
				isLoaded = true;

				jfmLanguages = data;

				findPlayers();
			},
			error: function(a,b,c,d) {
				console.log('error', a,b,c,d);
			}

		});
	}

	// public method
	function getPlayer(lang, segmentNumber, callback) {

		getPlayerCallbacks.push({lang: lang, segmentNumber: segmentNumber, callback:callback});

		if (!isLoaded) {
			if (!isLoading) {
				load();
			}
		} else {
			findPlayers();
		}
	}

	function findPlayers() {

		// wait until the languages are loaded
		if (jfmLanguages == null) {
			load();
			return;
		}

		// return all results
		while(getPlayerCallbacks.length > 0) {
			var callbackInfo = getPlayerCallbacks.pop();

			findPlayer(callbackInfo.lang, callbackInfo.segmentNumber, callbackInfo.callback);
		}
	}

	function findPlayer(lang, segmentNumber, callback) {


		var languageId = jfmLanguages[lang],
			iframeUrl = '';

		if (typeof languageId == 'undefined' || languageId == null)	{
			languageId = 529;
			lang = 'eng';
		}

		iframeUrl = sofia.protocol + '//api.arclight.org/videoPlayerUrl?refId=1_' + languageId + '-jf61' + segmentNumber + '-0-0&amp;apiSessionId=' + sofia.config.jfmKey + '&playerStyle=vanilla';

		callback(iframeUrl, lang);
	}

	var ext = {
		getPlayer: getPlayer

	}

	return ext;
})();

sofia.globals.mediaLargeImage = null;

sofia.globals.mediaImageClick = function(e) {
	e.preventDefault();


	if (sofia.globals.mediaLargeImage != null) {
		sofia.globals.mediaLargeImage.fadeOut(function() {
			$(this).remove();
		});
	}

	var link = $(this),
		url = link.attr('href'),
		img = link.find('img'),
		imgWidth = img.width(),
		imgHeight = img.height(),
		imgOffset = img.offset(),
		win = $(window),
		winHeight = win.height(),
		winWidth = win.width(),

		clonedImage = $('<img src="' + img.parent('a').attr('href') + '" />')

		//clonedImage = img
		//				.clone()
						.appendTo($('body'))
						.addClass('big-image')
						.css({top: imgOffset.top, left: imgOffset.left, width: imgWidth, height: imgHeight }),

		newHeight = winHeight,
		newWidth = winHeight * imgWidth / imgHeight,
		newTop = 0,
		newLeft = winWidth/2 - newWidth/2;

	// if the image is wider in ratio than the window
	if (newLeft < 0) {
		newWidth = winWidth;
		newHeight = winWidth * imgHeight / imgWidth;
		newLeft = 0;
		newTop = winHeight/2 - newHeight/2;
	}

	clonedImage.on('load', function() {
		clonedImage.animate({
			top: newTop,
			left: newLeft,
			width: newWidth,
			height: newHeight
		});
	});

	sofia.globals.mediaLargeImage = clonedImage;

	if (sofia.analytics) {
		sofia.analytics.record('imageclick', url);
	}

	clonedImage.on('click', shrinkImage);

	function shrinkImage() {
		clonedImage.animate(
			{top: imgOffset.top, left: imgOffset.left, width: imgWidth, height: imgHeight },
			{complete: function() { clonedImage.remove();}
		});

		// remove this listener
		$('body').off('click', shrinkImage);
	}

	// click anywhere to remove
	$('body').on('click', shrinkImage);

	return false;
};


// GLOBAL Video window
sofia.globals.videoWindow = null;

$(function() {

	// create window
	sofia.globals.videoWindow = new MovableWindow(640,360,'Video','video-player');
	sofia.globals.videoWindow.center();
	sofia.globals.videoWindow.hide();

	sofia.globals.videoWindow.container.find('.close-button').on('click', function() {

		// attempt to hide video
		var video = sofia.globals.videoWindow.container.find('video');
		if (video.length > 0) {
			video[0].pause();
		}

		sofia.globals.videoWindow.body.html('');
	});

});

sofia.globals.mediaVideoClick = function(e) {
	e.preventDefault();

	var link = $(this),
		url = link.attr('href'),
		title = link.attr('title');

	sofia.globals.showVideo(url, title);

	return false;
};

sofia.globals.mediaVideoJfmClick = function(e) {
	e.preventDefault();

	var link = $(this),
		//segmentNumber = link.attr('href'),
		segmentData = link.attr('data-filename'),
		title = link.attr('title'),

		firstSection = $('.section:first'),

		lang = firstSection.length > 0 ? firstSection.attr('data-lang3') : 'eng';


	JesusFilmMediaApi.getPlayer(lang, segmentData, function(iframeUrl) {
		sofia.globals.showIframe(iframeUrl, title);
	});

	return false;
};

sofia.globals.showVideo = function(videoUrl, title) {

	sofia.globals.videoWindow.body.html('');

	// add video
	var video = $('<video autoplay controls src="' + videoUrl + '" style="width:100%; height: auto;"></video>')
					.appendTo(sofia.globals.videoWindow.body);

	// title?
	if (title) {
		sofia.globals.videoWindow.title.html(title);
	}

	// show me!
	sofia.globals.videoWindow.show();
}


sofia.globals.showIframe = function(iframeUrl, title) {

	sofia.globals.videoWindow.body.html('');

	// add video
	var iframe = $('<iframe src="' + iframeUrl + '" allowfullscreen frameborder="0" width="' + sofia.globals.videoWindow.body.width() + '" height="' + sofia.globals.videoWindow.body.height() + '"></iframe>')
					.appendTo(sofia.globals.videoWindow.body);

	// title?
	if (title) {
		sofia.globals.videoWindow.title.html(title);
	}

	// show me!
	sofia.globals.videoWindow.show();
}





var MediaLibrary = (function(){


	var
		currentMediaIndex = 0,
		mediaLibraries = null,
		dataIsLoaded = false;

	function init() {

		// load main info
		sofia.ajax({
			dataType: 'json',
			url: 'content/media/media.json',
			success: function(data) {

				mediaLibraries = data.media;


			}, complete: function() {
				loadNextMediaLibrary();
			}
		});

	}

	function loadNextMediaLibrary() {

		//console.log('loadNextMediaLibrary', currentMediaIndex, mediaLibraries.length);

		if (currentMediaIndex < mediaLibraries.length) {

			var mediaLibrary = mediaLibraries[currentMediaIndex];
			currentMediaIndex++;

			sofia.ajax({
				dataType: 'json',
				url: 'content/media/' + mediaLibrary.folder + '/info.json',
				success: function(data) {
					mediaLibrary.data = data;
				},
				complete: function() {
					loadNextMediaLibrary();
				}
			});
		} else {

			dataIsLoaded = true;
			sendMediaCallbacks();
		}

	}


	var getMediaListCallbacks = [];
	function getMediaLibraries(callback) {
		getMediaListCallbacks.push(callback);
		sendMediaCallbacks();
	}
	function sendMediaCallbacks() {

		if (!dataIsLoaded) {
			return;
		}

		while (getMediaListCallbacks.length > 0) {
			var callback = getMediaListCallbacks.pop();

			callback(mediaLibraries);
		}
	}

	var module = {
		getMediaLibraries: getMediaLibraries,
		init: init
	};


	return module;

})();

sofia.initMethods.push(MediaLibrary.init);

sofia.config = $.extend(sofia.config, {

	enableBibleSelectorTabs: false,
	bibleSelectorDefaultList: ['ENGNAS', 'ENGNIV']

});



/******************
TextChooser
*******************/

var TextChooser = function() {
	// create me
	var
		// set by show() function
		container = null,
		text_type = null,
		target = null,

		isFull = false,
		selectedTextInfo = null,
		textChooser = $('<div class="text-chooser nav-drop-list">' +
							'<span class="up-arrow"></span>' +
							'<span class="up-arrow-border"></span>' +
							'<div class="text-chooser-header">' +
								'<div class="text-chooser-selector">' +
									'<span class="text-chooser-default selected i18n" data-mode="default" data-i18n="[html]windows.bible.default"></span>' +
									'<span class="text-chooser-languages i18n" data-mode="languages" data-i18n="[html]windows.bible.languages"></span>' +
									'<span class="text-chooser-countries i18n" data-mode="countries" data-i18n="[html]windows.bible.countries"></span>' +
								'</div>' +
								'<input type="text" class="text-chooser-filter-text i18n" data-i18n="[placeholder]windows.bible.filter" />' +
								'<span class="close-button">Close</span>' +
							'</div>' +
							'<div class="text-chooser-main"></div>' +
						'</div>')
						.appendTo( $('body') )
						.hide(),
		header = textChooser.find('.text-chooser-header'),
		main = textChooser.find('.text-chooser-main'),
		listselector = textChooser.find('.text-chooser-selector'),
		defaultSelector = textChooser.find('.text-chooser-default'),
		languagesSelector = textChooser.find('.text-chooser-languages'),
		countriesSelector = textChooser.find('.text-chooser-countries'),
		filter = textChooser.find('.text-chooser-filter-text'),
		title = textChooser.find('.text-chooser-title'),
		closeBtn = textChooser.find('.close-button').hide(),
		allTextsVisible = false,
		hasDefaultTexts = false,
		recentlyUsedKey = 'texts-recently-used',
		recentlyUsed = AppSettings.getValue(recentlyUsedKey, {"recent":[]} ),
		list_data = null;

	//textChooser.find('.i18n').i18n();

	title.html("Texts");

	closeBtn.on('click', hide);

	if (sofia.config.enableBibleSelectorTabs && sofia.config.bibleSelectorDefaultList && sofia.config.bibleSelectorDefaultList.length > 0) {

		listselector.on('click', 'span', function() {
			$(this)
				.addClass('selected')
				.siblings()
					.removeClass('selected');

			filter
				.val('');

			if (!Detection.hasTouch) {
				filter.focus();
			}

			renderTexts(list_data);
		});


	} else {
		listselector.hide();
	}


	filter.on('keyup keypress', filterVersions);

	filter.on('focus', function() {
		/*
		if (Detection.hasTouch) {
			filter.blur();
		}
		*/
	});

	function filterVersions(e) {

		// when the user presses return and there is only one version, attempt to go to that one
		if (e && e.which == 13) {
			var visibleRows = main.find('.text-chooser-row:visible, .text-chooser-row-divider:visible');

			if (visibleRows.length == 1) {

				visibleRows.click();

				filter.val('');
				return;
			}
		}

		var text = filter.val().toLowerCase();



		if (text == '') {
			renderTexts(list_data);
			//updateRecentlyUsed();
		} else {

			// filter by type
			var arrayOfTexts = list_data;

			arrayOfTexts = arrayOfTexts.filter(function(t) {

				if (text_type == 'audio') {
					var hasAudio = 	t.hasAudio ||
						typeof t.audioDirectory != 'undefined' ||
						(typeof t.fcbh_audio_ot != 'undefined' || typeof t.fcbh_audio_nt != 'undefined' ||
						 typeof t.fcbh_drama_ot != 'undefined' || typeof t.fcbh_drama_nt != 'undefined');

					return hasAudio == true;
				}

				var thisTextType = typeof t.type == 'undefined' ? 'bible' : t.type;
				return thisTextType == text_type;
			});

			var html = [];

			for (var i=0, il=arrayOfTexts.length; i<il; i++) {
				var textInfo = arrayOfTexts[i],
					hasMatch = 	textInfo.name.toLowerCase().indexOf(text) > -1 ||
								textInfo.abbr.toLowerCase().indexOf(text) > -1 ||
								(textInfo.langNameEnglish && textInfo.langName.toLowerCase().indexOf(text) > -1) ||
								(textInfo.langNameEnglish && textInfo.langNameEnglish.toLowerCase().indexOf(text) > -1);


				if (hasMatch) {
					html.push (
						createTextRow(textInfo, false, '')
					);
				}

			}


			main.html('<table cellspacing="0">' + html.join('') + '</table>');

		}
	}

	// handle when user clicks on a text
	textChooser.on('click', '.text-chooser-row', function() {
		var row = $(this),
			textid = row.attr('data-id');

		row.addClass('selected')
			.siblings()
			.removeClass('selected');


		storeRecentlyUsed(textid);
		updateRecentlyUsed();

		hide();

		TextLoader.getText(textid, function(data) {

			selectedTextInfo = data;

			//console.log('chooser:change:click', selectedTextInfo);
			ext.trigger('change', {type:'change', target: this, data: {textInfo: selectedTextInfo, target: target} });

		});

	});


	function storeRecentlyUsed(textInfo) {

		if (text_type != 'bible') {
			return;
		}

		var textid = (typeof textInfo == 'string') ? textInfo : textInfo.id;

		// look for this version
		var existingVersions = recentlyUsed.recent.filter(function(t) {
			return t == textid;
		});

		if (existingVersions.length == 0) {

			// store recent text
			recentlyUsed.recent.unshift(textid);

			// limit to 5
			while (recentlyUsed.recent.length > 5 ) {
				recentlyUsed.recent.pop();
			}
		}

		//console.log('storeRecentlyUsed',recentlyUsed.recent.length);

		// save
		AppSettings.setValue(recentlyUsedKey, recentlyUsed);
	}

	function updateRecentlyUsed() {

		if (list_data == null || text_type == null) {
			return;
		}

		if (text_type != 'bible' || (getMode() != 'default' && getMode() != 'none')) {
			main.find('.text-chooser-recently-used').remove();
			return;
		}

		// RECENTly Used
		if (recentlyUsed.recent.length > 0) {

			var isDefaultText = false;

			// find if this should be a priority text shown at the beginning
			//if (sofia.config.topTexts && sofia.config.topTexts.length > 0) {
			//	isDefaultText = true;
			//}

			var recentlyUsedHtml =
					createHeaderRow(
						'',
						i18n.t('windows.bible.recentlyused'),
						'',
						'',
						'text-chooser-recently-used' + (isDefaultText ? ' is-default-text' : '')
					);

			for (var i=0, il=recentlyUsed.recent.length; i<il; i++) {
				var textid = recentlyUsed.recent[i],
					textInfo = list_data.filter(function(ti) { return ti.id == textid; })[0];

				if (textInfo) {
					recentlyUsedHtml +=
						createTextRow(textInfo, isDefaultText, 'text-chooser-recently-used' );
				}
			}

			// remove existing
			main.find('.text-chooser-recently-used').remove();

			// add update recent stuff
			var recentRow = $(recentlyUsedHtml);
			main.find('table tbody').prepend(recentRow);
		}

	}


	function checkIsDefaultText(id) {

		var isDefaultText = false,
			parts = id.split(':'),
			textid = parts.length > 1 ? parts[1] : parts[0];

		// find if this should be a priority text shown at the beginning
		if (sofia.config.bibleSelectorDefaultList && sofia.config.bibleSelectorDefaultList.length > 0) {

			for (var t=0, tl=sofia.config.bibleSelectorDefaultList.length; t<tl; t++) {
				if (textid == sofia.config.bibleSelectorDefaultList[t]) {
					isDefaultText = true;
					break;
				}
			}

		} else {
			isDefaultText = false;
		}


		return isDefaultText;

	}

	function getMode() {
		if (sofia.config.enableBibleSelectorTabs) {
			var selectedMode = listselector.find('.selected'),
				mode = selectedMode.length > 0 ? selectedMode.data('mode') : 'none';

			return mode;
		} else {
			return 'none';
		}
	}

	function renderTexts(data) {

		if (data == null || typeof data == 'undefined') {
			return;
		}

		// render all the rows
		var html = [],
			arrayOfTexts = data,
			mode = getMode();

		if (mode == 'languages' || mode == 'default' || mode == 'none') {

			// filter by type
			arrayOfTexts = arrayOfTexts.filter(function(t) {

				if (text_type == 'audio') {
					var hasAudio = t.hasAudio ||
						typeof t.audioDirectory != 'undefined' ||
						(typeof t.fcbh_audio_ot != 'undefined' || typeof t.fcbh_audio_nt != 'undefined' ||
						 typeof t.fcbh_drama_ot != 'undefined' || typeof t.fcbh_drama_nt != 'undefined');

					return hasAudio === true;
				} else {
					if (t.hasText === false) {
						return false;
					}
				}

				var thisTextType = typeof t.type == 'undefined' ? 'bible' : t.type;

				return thisTextType == text_type;
			});

			// find languages
			var languages = [];
			for (var index in arrayOfTexts) {
				var text = arrayOfTexts[index];

				/* ORDER BY  English Name */
				var langKey = text.langNameEnglish;
				if (langKey == undefined || langKey == '') {
					langKey = text.langName;
				}

				if (languages.indexOf(langKey) == -1) {
					languages.push( langKey );
				}
			}

			// PINNED
			var pinnedLanguages = [];
			if (sofia.config.pinnedLanguages && sofia.config.pinnedLanguages.length && sofia.config.pinnedLanguages.length > 0) {
				console.log('finding pins');

				for (var i=0, il  = sofia.config.pinnedLanguages.length; i<il; i++) {
					var pinnedLanguage = sofia.config.pinnedLanguages[i];

					var pinnedIndex = languages.indexOf(pinnedLanguage);
					if (pinnedIndex > -1) {

						if (mode == 'default' || mode == 'none') {
							// pull it out
							languages.splice(pinnedIndex, 1);
						}

						// store for later
						pinnedLanguages.push(pinnedLanguage);
					}
				}
			}

			// sort
			languages.sort();

			// put it back in
			if (pinnedLanguages.length > 0) {
				languages.splice.apply(languages, [0, 0].concat(pinnedLanguages));
			}


			for (var index in languages) {

				// get all the ones with this language
				var langName = languages[index],
					textsInLang = arrayOfTexts.filter(function(t) { return (t.langName == langName || t.langNameEnglish == langName) }),
					hasDefaultText = false,
					langHtml = [];

				// sort the texts by name
				textsInLang = textsInLang.sort(function (a, b) {
					if (a.name == b.name) {
						return 0;
					} else if (a.name > b.name) {
						return 1;
					} else if (a.name < b.name) {
						return -1;
					}
				});

				// create HTML for the texts
				for (var textIndex in textsInLang) {
					var text = textsInLang[textIndex],
						isDefaultText = checkIsDefaultText(text.id);

					if (text_type == 'bible' ) {
						if (mode == 'none' || mode == 'languages' || (isDefaultText && mode == 'default')) {
							langHtml.push(
								createTextRow(
										text,
										isDefaultText,
										mode == 'languages' ? 'collapsed' : ''
								)
							);
						}

						if (!hasDefaultText && isDefaultText) {
							hasDefaultText = true;
						}
					} else if (text_type == 'deafbible' ) {
						langHtml.push(
							createImageRow(
									text,
									mode == 'languages' ? 'collapsed' : ''
							)
						);

					}
				}

				if (text_type == 'bible' && (mode == 'none' || mode == 'languages' || (hasDefaultText && mode == 'default')) ) {

					var languageDisplayTitle = '';

					// vernacular first
					/*
					languageDisplayTitle = textsInLang[0].langName +
									( textsInLang[0].langName != textsInLang[0].langNameEnglish && typeof textsInLang[0].langNameEnglish != 'undefined' ? ' (' + textsInLang[0].langNameEnglish + ')' : '');
					*/

					// english first
					var langName = textsInLang[0].langName,
						langNameEnglish = textsInLang[0].langNameEnglish;

					if (langNameEnglish != '' && langNameEnglish != undefined) {
						languageDisplayTitle = 	langNameEnglish + (langName != langNameEnglish ? ' (' + langName + ')' : '');
					} else {
						languageDisplayTitle = langName;
					}

					html.push(
						createHeaderRow(
							'',
							languageDisplayTitle,
							'',
							'',
							mode == 'languages' ? 'collapsible-language collapsed' : ''
						)
					);
				}

				html.push(langHtml.join(''));

			}


			main.html('<table cellspacing="0" class="' + (mode == 'languages' ? 'collapsible' : '') + '">' + html.join('') + '</table>');


			updateSelectedText();

			// do this after the 'selected' so it's not in the recently used
			updateRecentlyUsed();


		} else if (mode == "countries") {

			textChooser.removeClass('show-more');

			for (var i=0, il=sofia.countries.length; i<il; i++) {

				var countryInfo = sofia.countries[i],
					textsInCountry = arrayOfTexts.filter(function(t) {
						return typeof t.countries != 'undefined' && t.countries.indexOf(countryInfo["alpha-2"]) > -1;
					});


				if (textsInCountry.length > 0) {
					html.push(
						createHeaderRow(countryInfo["alpha-3"],
							countryInfo.name,
							'',
							'<img src="' + sofia.config.baseContentUrl + 'content/countries/' + countryInfo["alpha-2"].toLowerCase() + '.png" alt="' + countryInfo["alpha-2"] + '" />',
							'country collapsed')

					);

					// order by languages?
					var languagesInCountry = [];

					for (var index in textsInCountry) {
						var text = textsInCountry[index];

						/* ORDER BY  English Name */
						var langKey = text.langNameEnglish;
						if (langKey == undefined || langKey == '') {
							langKey = text.langName;
						}

						if (languagesInCountry.indexOf(langKey) == -1) {
							languagesInCountry.push( langKey );
						}
					}

					languagesInCountry.sort();

					for (var index in languagesInCountry) {

						// get all the ones with this language
						var langName = languagesInCountry[index],
							textsInLang = textsInCountry.filter(function(t) { return (t.langName == langName || t.langNameEnglish == langName) }),
							hasDefaultText = false,
							langHtml = [];


						// LANGUAGE
						var languageDisplayTitle = '';

						// english first
						var langName = textsInLang[0].langName,
							langNameEnglish = textsInLang[0].langNameEnglish;

						if (langNameEnglish != '' && langNameEnglish != undefined) {
							languageDisplayTitle = 	langNameEnglish + (langName != langNameEnglish ? ' (' + langName + ')' : '');
						} else {
							languageDisplayTitle = langName;
						}

						html.push(
							createDividerRow(
								languageDisplayTitle,
								'collapsed'
							)
						);


						// sort the texts by name
						textsInLang = textsInLang.sort(function (a, b) {
							if (a.name == b.name) {
								return 0;
							} else if (a.name > b.name) {
								return 1;
							} else if (a.name < b.name) {
								return -1;
							}
						});


						// create HTML for the texts
						for (var textIndex in textsInLang) {
							var text = textsInLang[textIndex];

							langHtml.push(
								createTextRow(
										text,
										false,
										'collapsed'
								)
							);

							if (!hasDefaultText && isDefaultText) {
								hasDefaultText = true;
							}
						}





						html.push(langHtml.join(''));

					}



					/* simple list in country */
					/*
					for (var textIndex in textsInCountry) {
						var text = textsInCountry[textIndex];

						html.push(
							createTextRow(text, isDefaultText, 'collapsed')
						);

					}
					*/

				}

			}

			main.html('<table cellspacing="0" class="collapsible">' + html.join('') + '</table>');

		}

	}

	main.on('click', '.collapsible .text-chooser-row-header', function() {

		var header = $(this),
			children = header.nextUntil('.text-chooser-row-header');

		if (header.hasClass('collapsed')) {

			header.removeClass('collapsed');
			children.removeClass('collapsed');

		} else {

			header.addClass('collapsed');
			children.addClass('collapsed');

		}


	});

	function updateSelectedText() {

		// find the selected text
		if (selectedTextInfo != null) {

			textChooser
					.find('table .selected')
					.removeClass('selected');

			textChooser
					.find('[data-id="' + selectedTextInfo.id + '"]')
					.addClass('selected');
		}

	}


	function createTextRow(text, isDefaultText, className) {
		var hasAudio = 	text.hasAudio ||
						typeof text.audioDirectory != 'undefined' ||
						(typeof text.fcbh_audio_ot != 'undefined' || typeof text.fcbh_audio_nt != 'undefined' ||
						 typeof text.fcbh_drama_ot != 'undefined' || typeof text.fcbh_drama_nt != 'undefined'),
			hasLemma = text.hasLemma,

			providerName = (typeof text.providerName != 'undefined' && text.providerName != 'local') ? text.providerName : '',
			providerFullName = sofia.textproviders[text.providerName] && sofia.textproviders[text.providerName].fullName ? sofia.textproviders[text.providerName].fullName : '',

			colspan = 4 - (hasAudio ? 1 : 0) - (hasLemma ? 1 : 0) - (providerName != '' ? 1 : 0);

		var html = '<tr class="text-chooser-row' + (isDefaultText ? ' is-default-text' : '') + (className != '' ? ' ' + className : '') + '" data-id="' + text.id + '" data-lang-name="' + text.langName + '" data-lang-name-english="' + text.langNameEnglish + '">' +
					'<td class="text-chooser-abbr">' + text.abbr + '</td>' +
					'<td class="text-chooser-name" ' + (colspan > 1 ? ' colspan="' + colspan + '"' : '') + '>' +
						'<span>' + text.name + '</span>' +
					'</td>' +

					(hasLemma === true ? '<td class="text-chooser-lemma"><span title="' + i18n.t('windows.bible.lemma') + '" data-i18n="[title]windows.bible.lemma"></span></td>' : '') +
					(hasAudio === true ? '<td class="text-chooser-audio"><span title="' + i18n.t('windows.bible.audio') + '" data-i18n="[title]windows.bible.audio"></span></td>' : '') +
					(providerName != '' ? '<td class="text-chooser-provider-' + providerName + '"><span title="' + providerFullName + '"></span></td>' : '') +
				'</tr>';

		return html;
	}

	function createImageRow(text, className) {
		var
			providerName = (typeof text.providerName != 'undefined' && text.providerName != 'local') ? text.providerName : '',
			providerFullName = sofia.textproviders[text.providerName] && sofia.textproviders[text.providerName].fullName ? sofia.textproviders[text.providerName].fullName : '',
			imageUrl = 'content/texts/' + text.id + '/' + text.id + '.png';


		var html = '<tr class="text-chooser-row' + (className != '' ? ' ' + className : '') + '" data-id="' + text.id + '" data-lang-name="' + text.langName + '" data-lang-name-english="' + text.langNameEnglish + '">' +
					'<td class="text-chooser-image">' +
						'<img src="' + imageUrl + '" />' +
					'</td>' +
					'<td class="text-chooser-name" >' +
						'<span>' + text.name + '</span>' +
					'</td>' +
				'</tr>';

		return html;
	}



	function createHeaderRow(id, name, englishName, additionalHtml, className) {
		var html = '<tr class="text-chooser-row-header' + (className != '' ? ' ' + className : '') + '" data-id="' + id + '"><td colspan="5">' +
					'<span class="name">' + name + '</span>' +
					additionalHtml +
					'</td></tr>';


		return html;
	}

	function createDividerRow(name, className) {
		var html = '<tr class="text-chooser-row-divider ' + (className != '' ? ' ' + className : '') + '">' +
					//'<td>&nbsp;</td>' +
					//'<td colspan="4">' +
					'<td colspan="5">' +
						'<span class="name">' + name + '</span>' +
					'</td>' +
					'</tr>';


		return html;
	}

	function toggle() {

		if (textChooser.is(':visible') ) {
			hide();
		} else {
			show();
		}

	}

	function setTarget(_container, _target, _text_type) {

		var needsToRerender = _text_type != text_type;;

		container = _container;
		target = _target;
		text_type = _text_type;

		ext.setClickTargets([_target, textChooser]);

		if (needsToRerender) {
			renderTexts(list_data);

			if (text_type == 'bible' && sofia.config.enableBibleSelectorTabs && sofia.config.bibleSelectorDefaultList && sofia.config.bibleSelectorDefaultList.length > 0) {
				listselector
					.find('.text-chooser-default')
					.addClass('selected')
						.siblings()
							.removeClass('selected');

				listselector.show();
			} else {

				listselector
					.find('span')
					.removeClass('selected');

				listselector.hide();
			}
		}

	}

	function getTarget() {
		return target;
	}

	function show() {
		//$('.nav-drop-list').hide();

		//console.log('textchooser.show');

		size();
		textChooser.show();
		ext.onshow();


		if (!list_data) {
			main.addClass('loading-indicator');//.html('Loading');

			TextLoader.loadTexts(function(data) {
				list_data = data;

				// check for countries
				if (sofia.config.enableCountrySelector) {
					var hasCountries = list_data.filter(function(c) { return typeof c.countries != 'undefined' && c.countries.length > 0; }).length > 0;
					if (!hasCountries) {
						listselector.hide();
					}
				}

				//console.log('TextChoose.show(), load render');
				main.removeClass('loading-indicator');
				renderTexts(list_data);

			});
		} else {
			main.removeClass('loading-indicator');
		}

		size();

		if (filter.val() != '') {
			filter.val('');
			filterVersions();
		}

		if (!Detection.hasTouch) {
			filter.focus();
		}

	}

	function hide() {
		textChooser.hide();
		ext.onhide();
	}

	function setTextInfo(text) {
		selectedTextInfo = text;

		storeRecentlyUsed(selectedTextInfo);
		updateRecentlyUsed();

		updateSelectedText();
	}

	function getTextInfo() {
		return selectedTextInfo;
	}

	function size(width,height) {

		if (target == null || container == null) {
			return;
		}

		//clearOffClickTimer();

		if (isFull) {

			// cover the container area
			if (!(width && height)) {
				width = container.width();
				height = container.height();
			}

			textChooser
				.width(width)
				.height(height)
				.css({top: container.offset().top,left: container.offset().left});

			main
				.width(width)
				.height(height - header.outerHeight());

		} else {

			// reasonable size!
			var targetOffset = target.offset(),
				targetOuterHeight = target.outerHeight(),
				win = $(window),
				selectorWidth = textChooser.outerWidth(),

				top = targetOffset.top + targetOuterHeight + 10,
				left = targetOffset.left,
				winHeight = win.height() - 40,
				winWidth = win.width(),
				maxHeight = winHeight - top;

			if (winWidth < left + selectorWidth) {
				left = winWidth - selectorWidth;
				if (left < 0) {
					left = 0;
				}
			}


			textChooser
				.outerHeight(maxHeight)
				.css({top: top,left: left});

			main
				.outerHeight(maxHeight - header.outerHeight());


			// UP ARROW
			var upArrowLeft = targetOffset.left - left + 20;

			textChooser.find('.up-arrow, .up-arrow-border')
				.css({left: upArrowLeft});

		}

	}

	function isVisible() {
		return textChooser.is(':visible');
	}

	function node() {
		return textChooser;
	}

	function close() {
		//textChooser.remove();
		//ext.clearListeners();
	}

	var ext = {
		setTarget: setTarget,
		getTarget: getTarget,
		show: show,
		hide: hide,
		toggle: toggle,
		isVisible: isVisible,
		node: node,
		getTextInfo: getTextInfo,
		setTextInfo: setTextInfo,
		renderTexts: renderTexts,
		size: size,
		close: close
	};
	ext = $.extend(true, ext, EventEmitter);
	ext = $.extend(true, ext, ClickOff);
	ext.clickoffid = 'version picker';
	ext.on('offclick', function() {
		hide();
	});

	return ext;

};

sofia.initMethods.push(function() {
	sofia.globalTextChooser = new TextChooser();
});

/******************
Text Navigator
*******************/

var TextNavigator = function() {
	// create me

	var
		container = null,
		target = null,
		isFull = false,
		changer = $('<div class="text-navigator nav-drop-list">' +
							'<span class="up-arrow"></span>' +
							'<span class="up-arrow-border"></span>' +
						'<div class="text-navigator-header">' +
							'<span class="text-navigator-title">&nbsp;</span>' +
							'<span class="text-navigator-back">Back</span>' +
							'<span class="text-navigator-close">Close</span>' +
						'</div>' +
						'<div class="text-navigator-divisions"></div>' +
						//'<div class="text-navigator-sections"></div>' +
 					'</div>'
					)
					//.css({height: $(window).height(), width: $(window).width()})
					.appendTo( $('body') )
					.hide(),
		header = changer.find('.text-navigator-header'),
		title = changer.find('.text-navigator-title'),
		back = changer.find('.text-navigator-back').hide(),
		closeBtn = changer.find('.text-navigator-close').hide(),
		fullname = $('<div class="text-navigator-fullname"></div>').appendTo( $('body') ).hide(),
		textInfo = null,

		fullBookMode = false;

	if (!Detection.hasTouch) {
		changer.on('mouseover', '.text-navigator-division', function() {

			if (!fullBookMode) {

				var node = $(this),
					name = node.attr('data-name');

				fullname
					.html(name)
					.css({
						backgroundColor: node.css('backgroundColor'),
						top: (parseInt(node.offset().top, 10)-1) + 'px',
						left: node.offset().left,
					})
					.show();

				fullname.lastNode = node;
			}

		})
		.on('mouseout', '.text-navigator-division', function() {
			fullname.hide();
		});
	}

	// pointer-events: none for modern browsers;
	fullname.on('click', function() {
		if (fullname.lastNode) {
			fullname.lastNode.trigger('click');
			fullname.hide();
		}

	});

	closeBtn.on('click', function() {
		hide();
	});

	function hide() {
		changer.hide();
		fullname.hide();
		ext.onhide();
	}

	function toggle() {

		if (changer.is(':visible')) {
			hide();
		} else {
			show();
		}

	}

	function show() {

		//$('.nav-drop-list').hide();

		if (textInfo == null) {
			console.warn('chooser has not textInfo!');
			return;
		}

		title.html( textInfo.name );

		// reset width
		size();
		changer.show();
		ext.onshow();
		size();

		// remove all selections
		changer.find('.selected').removeClass('selected');
		changer.find('.text-navigator-divisions').scrollTop(0);

		switch (textInfo.type.toLowerCase()) {
			case 'bible':
			case 'deafbible':
			case 'videobible':
			case 'commentary':

				var textInputValue = target.val(),
					biblereference = new bible.Reference(textInputValue),
					fragmentid = (biblereference) ? biblereference.toSection() : null;

				renderDivisions();
				changer.find('.text-navigator-divisions').show().attr('dir', textInfo.dir).attr('lang', textInfo.lang);
				//changer.find('.text-navigator-sections').hide();

				if (fragmentid) {
					var parts = fragmentid.split('_'),
						sectionid = parts[0],
						divisionid = sectionid.substring(0,2),
						chapter = sectionid.substring(2);

					var divisionNode = changer.find('.divisionid-' + divisionid).addClass('selected');
					// scroll to it

					if (divisionNode.length > 0) {
						var offset = divisionNode.position();

						changer.find('.text-navigator-divisions').scrollTop(offset.top-40);

						renderSections(false);

						divisionNode.find('.section-' + sectionid).addClass('selected');
					}



				}

				break;
			case 'book':
				renderSections();
				changer.find('.text-navigator-divisions').hide();
				changer.find('.text-navigator-sections').show().attr('dir', textInfo.dir).attr('lang', textInfo.lang);
				break;

		}
	}

	function getBookSectionClass(bookid) {
		return bible.BOOK_DATA[bookid].section;
	}

	// divisions = Bible books
	function renderDivisions() {
		//console.log('renderDivisions', textInfo);

		// render books
		var html = [];

		var hasPrintedOt = false,
			hasPrintedNt = false,
			hasPrintedAp = false;

		fullBookMode = !(textInfo.divisionAbbreviations || textInfo.lang == 'eng') ;
		fullBookMode = true;

		//console.log(fullBookMode, textInfo.divisionAbbreviations , textInfo.divabbr);

		if (fullBookMode) {
			changer.find('.text-navigator-divisions').addClass('text-navigator-divisions-full');
		} else {
			changer.find('.text-navigator-divisions').removeClass('text-navigator-divisions-full');
		}


		for (var i=0, il= textInfo.divisions.length ; i<il; i++) {

			var divisionid = textInfo.divisions[i],
				divisionName = (textInfo.divisionNames) ?
									textInfo.divisionNames[i] : null,
				divisionAbbr = (textInfo.divisionAbbreviations) ?
									textInfo.divisionAbbreviations[i] : null,
				displayName = fullBookMode ? divisionName :
											divisionAbbr != null ?
												divisionAbbr.replace(/\s/i,'').substring(0,3) :
												divisionName.replace(/\s/i,'').substring(0,3),
				book = bible.BOOK_DATA[divisionid];

			if (typeof book == 'undefined') {
				continue;
			}

			if (bible.OT_BOOKS.indexOf(divisionid) > -1 && !hasPrintedOt) {
				html.push('<div class="text-navigator-division-header">' + i18n.t('windows.bible.ot') + '</div>');
				hasPrintedOt = true;
			}
			if (bible.NT_BOOKS.indexOf(divisionid) > -1 && !hasPrintedNt) {
				html.push('<div class="text-navigator-division-header">' + i18n.t('windows.bible.nt') + '</div>');
				hasPrintedNt = true;
			}
			/*
			if (bible.AP_BOOKS.indexOf(divisionid) > -1 && !hasPrintedAp) {
				html.push('<div class="text-navigator-division-header">' + i18n.t('windows.bible.dc') + '</div>');
				hasPrintedAp = true;
			}
			*/


			/*
			var num_of_chapters = 0;
			for (var j=0, jl=textInfo.sections.length; j<jl; j++) {
				if (textInfo.sections[j].substring(0,2) == divisionid) {
					num_of_chapters++;
				}
			}
			html.push('<div class="text-navigator-division divisionid-' + divisionid + ' division-section-' + getBookSectionClass(divisionid) + '" data-id="' + divisionid + '" data-chapters="' + num_of_chapters + '" data-name="' + divisionName + '"><span>' + displayName + '</span></div>');
			*/

			var chapters = textInfo.sections.filter(function(c) {
				return c.substring(0,2) == divisionid;
			});

			html.push('<div class="text-navigator-division divisionid-' + divisionid + ' division-section-' + getBookSectionClass(divisionid) + '" data-id="' + divisionid + '" data-chapters="' + chapters.join(',') + '" data-name="' + divisionName + '"><span>' + displayName + '</span></div>');
		} //

		changer.find('.text-navigator-divisions').html(html).show();
		changer.find('.text-navigator-sections').remove();

	}


	// click a division (Bible book)
	changer.on('click', '.text-navigator-division', function() {

		var divisionNode = $(this);

		if (divisionNode.hasClass('selected')) {
			divisionNode.find('.text-navigator-sections').slideUp({complete: function() {
				divisionNode.removeClass('selected');
			}});

			return;
		}

		divisionNode
			.addClass('selected')
			.siblings()
				.removeClass('selected');

		fullname.hide();

		// hide previous book's chapter
		var divisions = changer.find('.text-navigator-divisions'),
			positionBefore = divisionNode.position(),
			scrollTopBefore = divisions.scrollTop();

		// close the existing set of sections
		changer.find('.text-navigator-sections').remove();

		var positionAfter = divisionNode.position();

		if (positionBefore.top > positionAfter.top) {
			var newScrollTop = scrollTopBefore - (positionBefore.top - positionAfter.top);// + header.outerHeight(true);

			divisions.scrollTop(newScrollTop);
		}

		renderSections(true);
	});


	// sections = bible chapters
	function renderSections(animated) {

		console.log('renderSections', textInfo.type);

		var html = [];

		switch (textInfo.type.toLowerCase()) {
			case 'bible':
			case 'deafbible':
			case 'videobible':

			case 'commentary':
				// print out chapters
				var selected_division = changer.find('.text-navigator-division.selected'),
					isLast = selected_division.next().length == 0,
					divisionid = selected_division.attr('data-id'),
					divisionname = selected_division.attr('data-name'),
					//num_of_chapters = parseInt(selected_division.attr('data-chapters'), 10),
					chapters = selected_division.attr('data-chapters').split(','),
					numbers = typeof textInfo.numbers != 'undefined' ? textInfo.numbers : bible.numbers.default;

				title.html( divisionname );

				console.log('chapters',chapters);

				for (var chapter=0; chapter<chapters.length; chapter++) {
					var dbsChapterCode = chapters[chapter],
						chapterNumber = parseInt(dbsChapterCode.substring(2));

					html.push('<span class="text-navigator-section section-' + dbsChapterCode + '" data-id="' + dbsChapterCode + '">' + numbers[chapterNumber].toString() + '</span>');
				}

				var sectionNodes = $('<div class="text-navigator-sections" style="display:none;">' + html.join('') + '</div>');

				selected_division.find('span').after( sectionNodes );


				if (animated === true && !isLast) {
					sectionNodes.slideDown();
				} else {
					sectionNodes.show();

					if (isLast) {
						var divisions = changer.find('.text-navigator-divisions');
						divisions.scrollTop( divisions.scrollTop() + 500 );
					}
				}

				break;
			case 'book':

				//console.log('text', textInfo.sections);

				// flat list of sections (i.e. pages)
				for (var i=0, il= textInfo.sections.length ; i<il; i++) {
					var sectionid = textInfo.sections[i];
					html.push('<span class="text-navigator-section" data-id="' + sectionid + '">' + sectionid.replace('P','') + '</span>');
				}


				break;
		}

/*
		changer.find('.text-navigator-divisions').hide();
		changer.find('.text-navigator-sections')
				.html(html)
				.attr('dir', textInfo.dir)
				.attr('lang', textInfo.lang)
				.show();
*/
	}



	// click a chapter
	changer.on('click', '.text-navigator-section', function() {
		var sectionid = $(this)
							.addClass('selected')
							.attr('data-id');

		console.log('navigator selected', sectionid);
		ext.trigger('change', {type:'change', target: this, data: {sectionid: sectionid, target: target}});

		//navigation_changed_callback(sectionid);

		changer.hide();
	});

	function size(width,height) {

		if (isFull) {

			if (!(width && height)) {
				width = container.width();
				height = container.height();
			}

			changer
				.width(width)
				.height(height)
				.css({top: container.offset().top,left: container.offset().left});
		} else {

			if (target == null) {
				return;
			}

			var
				targetOffset = target.offset(),
				targetOuterHeight = target.outerHeight(),
				top = targetOffset.top + targetOuterHeight + 10,
				left = targetOffset.left,
				win = $(window),
				changerWidth = changer.outerWidth(),
				winHeight = win.height() - 40,
				winWidth = win.width(),
				maxHeight = winHeight - top;

			if (winWidth < left + changerWidth) {
				left = winWidth - changerWidth;
				if (left < 0) {
					left = 0;
				}
			}

			changer
				.outerHeight(maxHeight)
				.css({top: top, left: left});

			var upArrowLeft = targetOffset.left - left + 20;

			changer.find('.up-arrow, .up-arrow-border')
				.css({left: upArrowLeft});

			changer.find('.text-navigator-divisions, .text-navigator-sections')
				.outerHeight(maxHeight - header.outerHeight());

		}
	}

	function setTextInfo(value) {
		textInfo = value;

		if (textInfo.title) {
			changer.find('.text-navigator-header').html( textInfo.title );
		}

		// set names
		if (textInfo.divisionNames) {
			bible.addNames(textInfo.lang, textInfo.divisions, textInfo.divisionNames);
		}
	}

	function isVisible() {
		return changer.is(':visible');
	}

	function node() {
		return changer;
	}

	function close() {
		//ext.clearListeners();

		//changer.remove();
	}

	function setTarget(_container, _target) {

		container = _container;
		target = _target;

		ext.setClickTargets([_target, changer]);
	}

	function getTarget() {
		return target;
	}

	// this is the return object!
	var ext = {
		setTarget: setTarget,
		getTarget: getTarget,
		show: show,
		toggle: toggle,
		hide: hide,
		isVisible: isVisible,
		node: node,
		setTextInfo: setTextInfo,
		size: size,
		close:close
	}

	ext = $.extend(true, ext, EventEmitter);
	ext = $.extend(true, ext, ClickOff);
	ext.clickoffid = 'book/chapter picker';
	ext.on('offclick', function() {
		hide();
	});

	return ext;

};

sofia.initMethods.push(function() {
	sofia.globalTextNavigator = new TextNavigator();
});

var InfoWindow = function(id) {
	var container = $(	'<div class="info-window"' + (id ? ' id="' + id + '"' : '') + '>'+
							'<span class="close-button"></span>' +
							'<div class="info-body"></div>' +
						'</div>')
							.appendTo( $(document.body) )
							.hide(),

		body = container.find('.info-body'),
		close = container.find('.close-button'),
		win = $(window);

	close
		.on('click', hide);


	function show() {
		container.show();

		ext.onshow();
		ext.trigger('show');

		return ext;
	}
	function hide() {
		container.hide();

		ext.onhide();

		ext.trigger('hide');

		return ext;
	}

	function center() {
		var
			infoWidth = container.outerWidth(),
			infoHeight = container.outerHeight();

		container.css({
			top: win.height()/2 - infoHeight/2,
			left: win.width()/2 - infoWidth/2
		});

		return ext;
	}

	function position(target) {
		var tOffset = target.offset(),
			tHeight = target.outerHeight(),
			left = tOffset.left - 20,
			top = tOffset.top + tHeight,
			infoWidth = container.outerWidth(),
			infoHeight = container.outerHeight();


		// far left edge
		if (left < 0) {
			left = 0;
		// far right
		} else if (left + infoWidth > win.width()) {
			left = win.width() - infoWidth;
		}

		if (top + infoHeight > win.height()) {
			top = tOffset.top - infoHeight;
		}

		container.css({
			top: top,
			left: left
		});
		return ext;
	}

	var ext =  {
		show: show,
		hide: hide,
		container: container,
		body: body,
		position: position,
		center: center
	};

	ext = $.extend(true, ext, EventEmitter);
	ext = $.extend(true, ext, ClickOff);
	ext.setClickTargets([container]);
	ext.clickoffid = id;
	ext.on('offclick', function() {
		hide();
	});




	return ext;

};

var MovableWindow = function(width,height,titleText,id) {

	width = width || 300;
	height = height || 200;
	titleText = titleText || '';

	var container = $(	'<div class="movable-window" ' + (id ? ' id="' + id + '"' : '') + '>' +
							'<div class="movable-header">' +
								'<span class="movable-header-title">' + titleText + '</span>' +
								'<span class="close-button"></span>' +
							'</div>' +
							'<div class="movable-body"></div>' +
						'</div>')
							.appendTo( $(document.body) )
							.hide(),
		header = container.find('.movable-header'),
		title = container.find('.movable-header-title'),
		body = container.find('.movable-body'),
		close = container.find('.close-button'),
		win = $(window),
		doc = $(document),

		startWindowPosition = null,
		startMousePosition = null;

	header.on('mousedown', function(e) {
		doc
			.on('mousemove', move)
			.on('mouseup', mouseup);

		startWindowPosition = container.offset();
		startMousePosition = {x:e.clientX, y:e.clientY};
	});

	function mouseup() {
		doc
			.off('mousemove', move)
			.off('mouseup', mouseup);
	}

	function move(e) {
		// handle move
		//console.log(e);

		container.css({
			top: startWindowPosition.top - (startMousePosition.y - e.clientY),
			left: startWindowPosition.left - (startMousePosition.x - e.clientX)
		});
	}

	close.on('click', hide);


	function size(width, height) {

		body.width(width);
		body.height(height);

		return ext;
	}
	size(width, height);
	center();

	function show() {
		container.show();
		return ext;
	}
	function hide() {
		container.hide();
		return ext;
	}
	function center() {
		var
			infoWidth = container.outerWidth(),
			infoHeight = container.outerHeight(),
			top = win.height()/2 - infoHeight/2,
			left = win.width()/2 - infoWidth/2;

		if (top < 0) {
			top = 0;
		}
		if (left < 0) {
			left = 0;
		}

		container.css({
			top: top,
			left: left
		});

		return ext;
	}

	var ext = {
		show: show,
		hide: hide,
		size: size,
		container: container,
		body: body,
		title: title,
		center: center,
		closeButton: close
	};

	return ext;

};

sofia.config = $.extend(sofia.config, {

	enableLemmaInfoPlugin: true

});

var LemmaInfoPlugin = function(app) {

	if (!sofia.config.enableLemmaInfoPlugin) {
		return;
	}

	var lemmaInfo = $('<div class="lemma-info"></div>').appendTo( $(document.body) ).hide();

	if (!Detection.hasTouch) {

		$('.windows-main').on('mouseover','.BibleWindow l', function(e) {

			var l = $(this),
				morph = l.attr('m'),
				strongs = l.attr('s'),
				main = l.closest('.scroller-main'),
				mainOffset = main.offset(),
				section = l.closest('.section'),
				lang = section.attr('lang'),
				morphologyType = lang == 'heb' || lang == 'he' ? 'Hebrew' : lang == 'el' || lang == 'grc' || lang == 'gre' ? 'Greek' : ''
				morphInfo = (typeof morph == 'undefined' || morphologyType == '') ? '' : bible.morphology[morphologyType].format(morph);

			if (morphInfo != null && morphInfo != '') {
				lemmaInfo.html( morphInfo );

				lemmaInfo.show();

				lemmaInfo.css({
							left: mainOffset.left + 15 + 'px',
							top: (mainOffset.top + main.outerHeight() - lemmaInfo.outerHeight() - 10) + 'px'
							});
			}


		}).on('mouseout','l', function(e) {
			lemmaInfo.hide();
		});
	}
};

sofia.plugins.push('LemmaInfoPlugin');

sofia.config = $.extend(sofia.config, {

	enableLemmaMatchPlugin: true

});

var LemmaMatchPlugin = function(app) {

	if (!sofia.config.enableLemmaMatchPlugin) {
		return;
	}

	if (!Detection.hasTouch) {

		$('.windows-main').on('mouseover','l', function(e) {

			//console.log('over');

			var l = $(this),
				s = l.attr('s');

			if (!s) {
				return;
			}

			var
				strongs = l.attr('s').replace('G','').replace('H',''),
				verse = l.closest('.verse, .v'),
				verseid = verse.attr('data-id'),
				bookid = (verseid) ? verseid.substring(0,2) : '';
				langPrefix = (bookid != '' && bible.OT_BOOKS.indexOf(bookid) > -1) ? 'H' : 'G';


			var strongParts = strongs.split(' ');

			for (var i=0, il=strongParts.length; i<il; i++) {
				var strong = strongParts[i];


				// ignore Greek article with second word
				if (strong == '3588' && il > 1) {
					continue;
				}


				if (verseid) {
					$('.' + verseid ).find('l[s*="' + strong + '"],l[s*="' + langPrefix + strong + '"]').addClass('lemma-highlight');
				} else {
					$('l[s*="' + strong + '"],l[s*="' + langPrefix + strong + '"]').addClass('lemma-highlight');

				}

			}



		}).on('mouseout','l', function(e) {
			$('.lemma-highlight').removeClass('lemma-highlight');
		});
	}
};

sofia.plugins.push('LemmaMatchPlugin');

sofia.config = $.extend(sofia.config, {

	enableLemmaPopupPlugin: true

});


var LemmaPopupPlugin = function(app) {

	if (!sofia.config.enableLemmaPopupPlugin) {
		return;
	}

	var lemmaPopup = new InfoWindow('lemma-popup'),
		timer = new Timer(hidePopup, 500);


	function hidePopup() {
		lemmaPopup.hide();
	}

	lemmaPopup.on('hide', function() {
		$('.selected-lemma').removeClass('selected-lemma');
	});

	lemmaPopup.container
		.on('click', '.lemma-findall', function(e) {
			var link = $(this),
				lemma = link.attr('data-lemma'),
				textid = link.attr('data-textid');

			console.log(lemma, textid);

			sofia.app.windowManager.add('SearchWindow', {searchtext: lemma, textid: textid});

			lemmaPopup.hide();
		});


	$('.windows-main').on('click','.BibleWindow l', function(e) {

		var l = $(this);

		if (lemmaPopup.container.is(':visible')) {
			lemmaPopup.hide();
			if (lemmaPopup.currentWord == this) {
				lemmaPopup.currentWord == null;
				l.removeClass('selected-lemma');
				return;
			}
		}

		lemmaPopup.currentWord = this;

		$('.selected-lemma').removeClass('selected-lemma');
		l.addClass('selected-lemma');

		var
			// get attribute
			morph = l.attr('m'),
			// split into array
			morphs = (morph && morph != null) ? morph.split(' ') : [],

			// get attribute
			strong = l.attr('s'),
			// split into array
			strongs = (strong && strong != null) ? strong.replace(/H/gi,'').replace(/G/gi,'').split(' ') : [],

			// normal elements stuff
			main = l.closest('.scroller-main'),
			verse = l.closest('.verse, .v')
			verse_code = verse.attr('data-id'),
			book_id = verse_code.substring(0,2),
			chapter = l.closest('.chapter'),
			sectionid = chapter.attr('data-id'),
			textid = chapter.attr('data-textid'),
			langPrefix = 'G',
			langCode = 'el',
			morphType = 'Greek',
			dir = 'ltr';

		// make strong's into ints
		for (var i=0; i<strongs.length; i++) {
			strongs[i] = parseInt(strongs[i], 10);
		}


		// check for language (greek or hebrew, noting LXX is greek)
		var sectionLang = l.closest('.section').attr('lang');

		if (sectionLang == 'el' ||
			sectionLang == 'gr' ||
			sectionLang == 'grc' ||
			sectionLang == 'grk' ||
			sectionLang == 'el' ||
			bible.NT_BOOKS.indexOf(book_id) > -1 ||
			bible.AP_BOOKS.indexOf(book_id) > -1
			) {
				langPrefix = 'G';
				langCode = 'el';
				dir = 'ltr';
				morphType = 'Greek';

		} else if (
			sectionLang == 'he' ||
			sectionLang == 'heb' ||
			bible.OT_BOOKS.indexOf(book_id) > -1){
				langPrefix = 'H';
				langCode = 'he';
				dir = 'rtl';
				morphType = 'Hebrew';

		}

		// remove G3588 and H853 (the) when there is more than two
		if (strongs.length > 0) {
			var articleIndex = -1;

			for (var i=0; i<strongs.length; i++) {
				if ((strongs[i] == 3588 && langPrefix == 'G') || (strongs[i] == 853 && langPrefix == 'H')) {
					articleIndex = i;
					break;
				}
			}

			if (articleIndex > -1) {
				strongs.splice(articleIndex, 1);

				if (morphs.length > articleIndex) {
					morphs.splice(articleIndex, 1);
				}
			}
		}

		//console.warn(strongs);

		// record
		if (sofia.analytics) {
			sofia.analytics.record('lemma', langPrefix + strongs, l.html());
		}


		// show popup
		lemmaPopup.setClickTargets([lemmaPopup.container, l]);
		lemmaPopup.show();
		lemmaPopup.position(l);

		lemmaPopup.body.html('Loading...');

		if (strongs.length > 0) {

			lemmaPopup.body.html('');
			lemmaPopup.body.addClass('loading-indicator');

			for (var i=0, il=strongs.length; i<il; i++) {

				loadStrongsData(textid, strongs[i], i < morphs.length ? morphs[i] : '', morphType, langPrefix, langCode, l);

			}
		}
	});


	function loadStrongsData(textid, strongsNumber, morphKey, morphType, langPrefix, langCode, l) {
		sofia.ajax({
			dataType: 'json',
			url: 'content/lexicons/strongs/entries/' + langPrefix + strongsNumber + '.json',
			success: function(data) {

				var html = '<div class="lemma-word">' +
								'<span lang="' + iso2iana.convert(langCode) + '" dir="' + dir + '">' + data.lemma + '</span>' +
								' ' +
								'<span class="lemma-strongs" dir="ltr"> (' + strongsNumber + ')</span>' +
							'</div>';



				if (morphKey != '') {
					html += '<span class="lemma-morphology">' + bible.morphology[morphType].format( morphKey ) + '</span>';
				}

				html += '<span class="lemma-findall" data-lemma="' + langPrefix + strongsNumber + '" data-textid="' + textid + '">' +
					i18n.t('plugins.lemmapopup.findalloccurrences', {count: data.frequency}) +
				'</span>';

				html += '<div class="lemma-outline">' + data.outline + '</div>';

				lemmaPopup.body.removeClass('loading-indicator');

				lemmaPopup.body.append( html );

				lemmaPopup.position(l);

			},
			error: function() {
				lemmaPopup.body.html('Error loading ... ' + langPrefix + strongs[0] );
			}


		});
	}


};

sofia.plugins.push('LemmaPopupPlugin');

sofia.config = $.extend(sofia.config, {

	enableVerseMatchPlugin: true

});

var VerseMatchPlugin = function(app) {

	if (!sofia.config.enableVerseMatchPlugin) {
		return;
	}


	if (!Detection.hasTouch) {

		$('.windows-main').on('mouseover','.BibleWindow .verse, .BibleWindow .v', function(e) {

			var verse = $(this),
				verseid = verse.attr('data-id');

			$('.BibleWindow .' + verseid).addClass('selected-verse');

		}).on('mouseout','.BibleWindow .verse, .BibleWindow .v', function(e) {
			var verse = $(this),
				verseid = verse.attr('data-id');

			$('.BibleWindow  .' + verseid).removeClass('selected-verse');
		});
	}
};

sofia.plugins.push('VerseMatchPlugin');

sofia.config = $.extend(sofia.config, {

	enableEng2pPlugin: true,

	// enables all possible English options (false = just color 'you')
	eng2pEnableAll: true,

	eng2pDefaultSetting: 'none',

	eng2pShowWindowAtStartup: false
});


/**
 * Highlights words based on morphological data
 *
 * @author John Dyer (http://j.hn/)
 */
var Eng2pPlugin = function(node) {


	if (!sofia.config.enableEng2pPlugin) {
		return;
	}

	var
		engWindow = new MovableWindow(550,290),

		configBlock =
		$('<div class="config-options" id="config-eng2p">' +
			//'<h3>English Second Person Plural</h3>' +
'<p class="i18n" data-i18n="[html]plugins.eng2p.description"></p>' +
'<table>' +
	'<tbody>' +
		'<tr>' +
			'<th>' +
				'<input type="radio" name="eng2p-option" id="eng2p-option-none" value="none" />' +
				'<label for="eng2p-option-none">None</label>' +
			'</th>' +
			'<td>You</td>' +
			'<td>Your</td>' +
			'<td>Yours</td>' +
			'<td>Yourselves</td>' +
		'</tr>' +
		'<tr>' +
			'<th>' +
				'<input type="radio" name="eng2p-option" id="eng2p-option-highlight" value="highlight" />' +
				'<label for="eng2p-option-highlight">Highlight</label>' +
			'</th>' +
			'<td><span class="eng2p-highlight-demo">You</span></td>' +
			'<td><span class="eng2p-highlight-demo">Your</span></td>' +
			'<td><span class="eng2p-highlight-demo">Yours</span></td>' +
			'<td><span class="eng2p-highlight-demo">Yourselves</span></td>' +
		'</tr>' +

		(typeof sofia.config["eng2pEnableAll"] != 'undefined' && sofia.config["eng2pEnableAll"] == true ?
		'<tr>' +
			'<th>' +
				'<input type="radio" name="eng2p-option" id="eng2p-option-youall" value="youall"  />' +
				'<label for="eng2p-option-youall">General US</label>' +
			'</th>' +
			'<td>You all</td>' +
			'<td>You all\'s</td>' +
			'<td>You all\'s</td>' +
			'<td>You allselves</td>' +
		'</tr>' +
		'<tr>' +
			'<th>' +
				'<input type="radio" name="eng2p-option" id="eng2p-option-yall" value="yall" />' +
				'<label for="eng2p-option-yall">Southern US</label>' +
			'</th>' +
			'<td>Y\'all</td>' +
			'<td>Y\'all\'s</td>' +
			'<td>Y\'all\'s</td>' +
			'<td>Y\'allselves</td>' +
		'</tr>' +
		'<tr>' +
			'<th>' +
				'<input type="radio" name="eng2p-option" id="eng2p-option-youguys"  value="youguys" />' +
				'<label for="eng2p-option-youguys">Western US</label>' +
			'</th>' +
			'<td>You guys</td>' +
			'<td>Your guys\'s</td>' +
			'<td>Your guys\'s</td>' +
			'<td>Your guys selves</td>' +
		'</tr>' +
		'<tr>' +
			'<th>' +
				'<input type="radio" name="eng2p-option" id="eng2p-option-youseguys" value="youseguys" />' +
				'<label for="eng2p-option-youseguys">NYC/Chicago</label>' +
			'</th>' +
			'<td>Youse guys</td>' +
			'<td>Youse guys\'s</td>' +
			'<td>Youse guys\'s</td>' +
			'<td>Youse guys selves</td>' +
		'</tr>' +
		'<tr>' +
			'<th>' +
				'<input type="radio" name="eng2p-option" id="eng2p-option-yinz" value="yinz" />' +
				'<label for="eng2p-option-yinz">Pittsburgh</label>' +
			'</th>' +
			'<td>Yinz</td>' +
			'<td>Yinz\'s</td>' +
			'<td>Yinz\'s</td>' +
			'<td>Yinzselves</td>' +
		'</tr>' +
		'<tr>' +
			'<th>' +
				'<input type="radio" name="eng2p-option" id="eng2p-option-youlot" value="youlot" />' +
				'<label for="eng2p-option-youlot">United Kingdom</label>' +
			'</th>' +
			'<td>You lot</td>' +
			'<td>You lot\'s</td>' +
			'<td>You lot\'s</td>' +
			'<td>Yourlot\'s</td>' +
		'</tr>' +
		'<tr>' +
			'<th>' +
				'<input type="radio" name="eng2p-option" id="eng2p-option-ye" value="ye" />' +
				'<label for="eng2p-option-ye">Old English</label>' +
			'</th>' +
			'<td>Ye</td>' +
			'<td>Ye\'s</td>' +
			'<td>Ye\'s</td>' +
			'<td>Yeselves</td>' +
		'</tr>'
		:'') +
	'</tbody>' +
'</table>' +
			'</div>')
			.appendTo( engWindow.body ),
			button = $('<span class="config-button i18n" data-i18n="[html]plugins.eng2p.title" id="config-eng2p-button"></span>')
						.appendTo( $('#config-tools .config-body') );


	//engWindow.title.html('English Second Person Plural');
	engWindow.title
				.addClass('i18n')
				.attr('data-i18n','[html]plugins.eng2p.title')

	button.on('click', function() {

		engWindow.show().center();

		button.closest('.window-overlay').hide();

	});

	// SET DEFAULT

	// setting from localStorage
	var eng2pSetting = AppSettings.getValue('docs-config-eng2p-setting', {'eng2p': sofia.config.eng2pDefaultSetting });

	// override with querysring
	var queryString = window.location.search && window.location.search.length > 0 ? window.location.search.substring(1) : '',
		params = stringUtility.parseQuerystring( queryString );


	// if it's in the querystring, try to use it
	if (typeof params['eng2p'] != 'undefined') {
		var tempEng2pSetting = params['eng2p'];

		// see if there is a matching value
		if ($('#eng2p-option-' + tempEng2pSetting).length > 0) {
			eng2pSetting.eng2p = tempEng2pSetting;

		}
	}

	if (typeof params['eng2pshow'] != 'undefined' || sofia.config.eng2pShowWindowAtStartup === true) {
		engWindow.show();
		engWindow.container.css({left: $(window).width() - engWindow.container.outerWidth(true) - 10});
	}

	// now set the value from either localStorage or querysring
	$('#eng2p-option-' + eng2pSetting.eng2p).prop('checked',true);
	getPluralValues();

	// create updates
	$('input[name="eng2p-option"]').on('click',function() {
		// update the setting value
		eng2pSetting = {eng2p: $(this).val() };

		// store value
		AppSettings.setValue('docs-config-eng2p-setting', eng2pSetting);

		// values
		getPluralValues();

		// re-run
		$('div.chapter[lang="en"],div.chapter[lang="eng"]').each(function() {
			var chapter = $(this);

			removePluralTransforms(chapter);
			runPluralTransforms(chapter);
		});
	});


	function getPluralValues() {

		var selectedRow = $('#eng2p-option-' + eng2pSetting.eng2p).closest('tr');

		bible.eng2p.youPluralSubject = selectedRow.find('td:eq(0)').html();
		bible.eng2p.youPluralPossessiveDeterminer = selectedRow.find('td:eq(1)').html();
		bible.eng2p.youPluralPossessivePronoun = selectedRow.find('td:eq(2)').html();
		bible.eng2p.youPluralReflexive = selectedRow.find('td:eq(3)').html();
	}

	function removePluralTransforms(node) {
		bible.eng2p.removePluralTransforms(node);
	}

	function runPluralTransforms(node) {
		node.find('.verse, .v').each(function(index, el) {
			var verse = $(this),
				verseid = verse.attr('data-id');

			if (bible.eng2p.secondPersonPlurals.indexOf(verseid) > -1) {
				var html = verse.html();

				if (eng2pSetting.eng2p == 'highlight') {
					html = bible.eng2p.highlightPlurals( html );
				} else if (eng2pSetting.eng2p != 'none') {
					html = bible.eng2p.replacePlurals( html );
				}

				verse.html( html );

			};
		});
	}

	// run transforms
	var ext = {
		sendMessage: function() {}
	};
	ext = $.extend(true, ext, EventEmitter);


	ext.on('message', function(e) {
		if (e.data.messagetype == 'textload' && e.data.type == 'bible') {

			var lang = e.data.content.attr('lang').toLowerCase();
			
			if ((lang == 'en-gb' || lang == 'en-us' || lang == 'en' || lang == 'eng') && eng2pSetting.eng2p != 'none') {
				//console.log('Eng2P', e.data.content.attr('data-id'));

				runPluralTransforms(e.data.content);
			}


		}

	});


	return ext;
}

sofia.plugins.push('Eng2pPlugin');


bible.eng2p = {

	youPluralRegExp:  /\b([yY])(ou(r|rs|rselves)|e)?\b/g,

	youPluralSubject: "Y'all",
	youPluralPossessiveDeterminer: "Y'all's",
	youPluralPossessivePronoun: "Y'all's",
	youPluralReflexive: "Y'allselves",

	removePluralTransforms: function(node) {
		// remove the changed words
		node.find('.eng2p-corrected').remove();

		// remove the surrounding spans
		node.find('.eng2p-highlight').each(function() {
			var span = this;

			this.parentNode.replaceChild(document.createTextNode(span.textContent), this);
		});

		// remove the surrounding spans
		node.find('.eng2p-original').each(function() {
			var span = this;

			this.parentNode.replaceChild(document.createTextNode(span.textContent), this);
		});
	},

	highlightPlurals: function(input) {
		var output = input.replace(bible.eng2p.youPluralRegExp, function(match, $1, $2, offset, originalString) {

			// return the greatness
			return '<span class="eng2p-highlight">' + match + '</span>';
		});

		return output;
	},

	replacePlurals: function(input) {

		var output = input.replace(bible.eng2p.youPluralRegExp, function(match, $1, $2, offset, originalString) {
			var replacement = '';

			// you, your, yours checker
			switch (match.toLowerCase()) {
				case 'ye':
				case 'you':
					replacement = bible.eng2p.youPluralSubject;
					break;
				case 'your':
					replacement = bible.eng2p.youPluralPossessiveDeterminer;
					break;
				case 'yours':
					replacement = bible.eng2p.youPluralPossessivePronoun;
					break;
				case 'yourselves':
					replacement = bible.eng2p.youPluralReflexive;
					break;
				default:
					replacement = match; // 'UNKNOWN [' + match + ',' + $1 + ']';
					break;

			}

			// You vs. you
			if ($1 === $1.toUpperCase()) {
				replacement = replacement.substring(0,1).toUpperCase() + replacement.substring(1);
			} else {
				replacement = replacement.substring(0,1).toLowerCase() + replacement.substring(1);
			}

			// replace standard ' with ’
			replacement = replacement.replace(/'/gi,'&rsquo;');


			// return the greatness
			return '<span class="eng2p-original">' + match + '</span><span class="eng2p-corrected">' + replacement + '</span>';
		});

		return output;
	},


	secondPersonPlurals: [
// Logos @R?2?P on ESV Reverse Interlinear
"GN1_22","GN1_28","GN3_1","GN3_3","GN3_4","GN3_5","GN4_23","GN9_1","GN9_4","GN9_7","GN17_10","GN17_11","GN18_4","GN18_5","GN19_2","GN19_7","GN19_8","GN19_14","GN22_5","GN23_4","GN23_8","GN24_49","GN24_54","GN24_56","GN26_27","GN29_5","GN29_7","GN31_6","GN31_46","GN32_4","GN32_16","GN32_19","GN32_20","GN34_8","GN34_9","GN34_10","GN34_11","GN34_12","GN34_15","GN34_17","GN34_30","GN35_2","GN37_6","GN37_20","GN37_22","GN37_27","GN38_24","GN39_14","GN40_8","GN41_55","GN42_1","GN42_2","GN42_7","GN42_9","GN42_12","GN42_15","GN42_16","GN42_18","GN42_19","GN42_20","GN42_22","GN42_33","GN42_34","GN42_36","GN42_38","GN43_2","GN43_3","GN43_5","GN43_6","GN43_7","GN43_11","GN43_12","GN43_13","GN43_23","GN43_27","GN43_29","GN43_31","GN44_4","GN44_5","GN44_10","GN44_15","GN44_17","GN44_21","GN44_23","GN44_25","GN44_27","GN44_29","GN45_1","GN45_4","GN45_5","GN45_8","GN45_9","GN45_13","GN45_17","GN45_18","GN45_19","GN45_24","GN46_34","GN47_16","GN47_23","GN47_24","GN49_1","GN49_2","GN49_29","GN50_4","GN50_17","GN50_19","GN50_20","GN50_21","GN50_25",
"EX1_16","EX1_18","EX1_22","EX2_18","EX2_20","EX3_12","EX3_18","EX3_21","EX3_22","EX4_15","EX5_4","EX5_5","EX5_7","EX5_8","EX5_11","EX5_13","EX5_14","EX5_16","EX5_18","EX5_19","EX5_21","EX6_7","EX6_26","EX7_9","EX8_8","EX8_25","EX8_28","EX9_8","EX9_28","EX9_30","EX10_2","EX10_8","EX10_10","EX10_11","EX10_17","EX10_24","EX11_7","EX12_3","EX12_4","EX12_5","EX12_9","EX12_10","EX12_11","EX12_14","EX12_15","EX12_17","EX12_18","EX12_20","EX12_21","EX12_22","EX12_24","EX12_25","EX12_27","EX12_31","EX12_32","EX12_46","EX13_3","EX13_19","EX14_2","EX14_13","EX14_14","EX15_21","EX16_3","EX16_6","EX16_7","EX16_9","EX16_12","EX16_16","EX16_23","EX16_25","EX16_26","EX16_28","EX16_29","EX17_2","EX19_4","EX19_5","EX19_6","EX19_12","EX19_15","EX20_20","EX20_22","EX20_23","EX22_21","EX22_22","EX22_25","EX22_31","EX23_9","EX23_13","EX23_25","EX24_1","EX24_14","EX25_2","EX25_3","EX25_9","EX25_19","EX30_9","EX30_32","EX30_37","EX31_13","EX31_14","EX32_2","EX32_24","EX32_27","EX32_29","EX32_30","EX34_13","EX35_3","EX35_5","EX35_30",
"LV1_2","LV2_11","LV2_12","LV3_17","LV7_23","LV7_24","LV7_26","LV7_32","LV8_31","LV8_32","LV8_33","LV8_35","LV9_3","LV9_6","LV10_4","LV10_6","LV10_7","LV10_9","LV10_12","LV10_13","LV10_14","LV10_17","LV10_18","LV11_2","LV11_3","LV11_4","LV11_8","LV11_9","LV11_11","LV11_13","LV11_21","LV11_22","LV11_24","LV11_33","LV11_42","LV11_43","LV11_44","LV11_45","LV14_34","LV15_2","LV15_31","LV16_29","LV16_30","LV16_31","LV17_14","LV18_3","LV18_4","LV18_5","LV18_6","LV18_24","LV18_26","LV18_30","LV19_2","LV19_3","LV19_4","LV19_5","LV19_11","LV19_12","LV19_15","LV19_19","LV19_23","LV19_25","LV19_26","LV19_27","LV19_28","LV19_30","LV19_31","LV19_33","LV19_34","LV19_35","LV19_37","LV20_7","LV20_8","LV20_15","LV20_22","LV20_23","LV20_24","LV20_25","LV20_26","LV22_20","LV22_22","LV22_24","LV22_25","LV22_28","LV22_29","LV22_30","LV22_31","LV22_32","LV23_2","LV23_3","LV23_4","LV23_6","LV23_7","LV23_8","LV23_10","LV23_12","LV23_14","LV23_15","LV23_16","LV23_17","LV23_18","LV23_19","LV23_21","LV23_25","LV23_27","LV23_28","LV23_31","LV23_32","LV23_35","LV23_36","LV23_37","LV23_38","LV23_39","LV23_40","LV23_41","LV23_42","LV25_2","LV25_9","LV25_10","LV25_11","LV25_12","LV25_13","LV25_14","LV25_17","LV25_18","LV25_19","LV25_20","LV25_22","LV25_24","LV25_44","LV25_45","LV25_46","LV26_1","LV26_2","LV26_3","LV26_5","LV26_6","LV26_7","LV26_10","LV26_12","LV26_14","LV26_15","LV26_16","LV26_17","LV26_18","LV26_21","LV26_23","LV26_25","LV26_26","LV26_27","LV26_29","LV26_38",
"NU1_2","NU1_3","NU4_18","NU4_19","NU4_27","NU4_32","NU5_3","NU6_23","NU9_3","NU9_8","NU10_5","NU10_6","NU10_7","NU10_9","NU10_10","NU11_18","NU11_19","NU11_20","NU12_4","NU12_6","NU12_8","NU13_2","NU13_17","NU13_18","NU13_20","NU14_9","NU14_25","NU14_28","NU14_29","NU14_30","NU14_31","NU14_34","NU14_42","NU14_43","NU15_2","NU15_3","NU15_12","NU15_14","NU15_19","NU15_20","NU15_21","NU15_22","NU15_39","NU15_40","NU16_3","NU16_6","NU16_7","NU16_8","NU16_10","NU16_11","NU16_16","NU16_17","NU16_21","NU16_24","NU16_26","NU16_28","NU16_30","NU16_38","NU16_41","NU16_45","NU18_1","NU18_5","NU18_7","NU18_26","NU18_28","NU18_29","NU18_31","NU18_32","NU19_3","NU20_4","NU20_5","NU20_8","NU20_10","NU20_12","NU20_24","NU21_5","NU21_17","NU21_27","NU22_8","NU22_13","NU22_19","NU25_5","NU25_17","NU26_2","NU27_8","NU27_9","NU27_10","NU27_11","NU27_14","NU28_2","NU28_3","NU28_11","NU28_18","NU28_19","NU28_20","NU28_23","NU28_24","NU28_25","NU28_26","NU28_27","NU28_31","NU29_1","NU29_2","NU29_7","NU29_8","NU29_12","NU29_13","NU29_35","NU29_36","NU29_39","NU31_3","NU31_4","NU31_15","NU31_17","NU31_18","NU31_19","NU31_20","NU31_23","NU31_24","NU31_29","NU32_6","NU32_7","NU32_14","NU32_15","NU32_20","NU32_22","NU32_23","NU32_24","NU32_29","NU33_52","NU33_53","NU33_54","NU33_55","NU34_7","NU34_8","NU34_10","NU34_13","NU34_18","NU35_2","NU35_4","NU35_5","NU35_6","NU35_7","NU35_8","NU35_11","NU35_13","NU35_14","NU35_31","NU35_32","NU35_33",
"DT1_7","DT1_8","DT1_13","DT1_14","DT1_16","DT1_17","DT1_18","DT1_19","DT1_20","DT1_22","DT1_26","DT1_27","DT1_29","DT1_31","DT1_33","DT1_39","DT1_40","DT1_41","DT1_42","DT1_43","DT1_45","DT1_46","DT2_3","DT2_4","DT2_5","DT2_6","DT2_13","DT2_24","DT3_18","DT3_20","DT3_22","DT4_1","DT4_2","DT4_6","DT4_11","DT4_15","DT4_16","DT4_22","DT4_23","DT4_25","DT4_26","DT4_27","DT4_28","DT4_29","DT5_1","DT5_5","DT5_23","DT5_24","DT5_30","DT5_32","DT5_33","DT6_3","DT6_14","DT6_16","DT6_17","DT7_5","DT7_12","DT7_25","DT8_1","DT8_19","DT8_20","DT9_7","DT9_8","DT9_16","DT9_18","DT9_21","DT9_22","DT9_23","DT9_24","DT10_16","DT10_19","DT11_2","DT11_8","DT11_9","DT11_10","DT11_13","DT11_16","DT11_17","DT11_18","DT11_19","DT11_22","DT11_23","DT11_25","DT11_27","DT11_28","DT11_31","DT11_32","DT12_1","DT12_2","DT12_3","DT12_4","DT12_5","DT12_6","DT12_7","DT12_8","DT12_9","DT12_10","DT12_11","DT12_12","DT12_16","DT12_32","DT13_4","DT13_13","DT14_1","DT14_4","DT14_6","DT14_7","DT14_8","DT14_9","DT14_10","DT14_11","DT14_12","DT14_20","DT14_21","DT17_16","DT18_15","DT19_19","DT20_3","DT20_18","DT22_24","DT24_8","DT27_2","DT27_4","DT28_62","DT28_63","DT28_68","DT29_2","DT29_6","DT29_7","DT29_9","DT29_16","DT29_17","DT30_18","DT31_5","DT31_6","DT31_14","DT31_19","DT31_26","DT31_27","DT31_28","DT31_29","DT32_1","DT32_3","DT32_6","DT32_7","DT32_39","DT32_43","DT32_46","DT32_47","DT32_51","DT33_16",
"JS1_11","JS1_14","JS1_15","JS2_1","JS2_5","JS2_10","JS2_12","JS2_13","JS2_14","JS2_16","JS3_3","JS3_4","JS3_5","JS3_6","JS3_8","JS3_9","JS3_10","JS3_12","JS4_2","JS4_3","JS4_5","JS4_7","JS4_17","JS4_22","JS4_24","JS6_3","JS6_4","JS6_6","JS6_7","JS6_10","JS6_16","JS6_18","JS6_22","JS7_2","JS7_12","JS7_13","JS7_14","JS8_2","JS8_4","JS8_7","JS8_8","JS9_6","JS9_8","JS9_11","JS9_22","JS10_4","JS10_18","JS10_19","JS10_22","JS10_24","JS10_25","JS18_4","JS18_6","JS18_8","JS20_2","JS22_2","JS22_3","JS22_4","JS22_5","JS22_8","JS22_16","JS22_18","JS22_19","JS22_28","JS22_31","JS23_3","JS23_4","JS23_5","JS23_6","JS23_7","JS23_8","JS23_11","JS23_12","JS23_13","JS23_14","JS23_16","JS24_6","JS24_7","JS24_8","JS24_11","JS24_13","JS24_14","JS24_15","JS24_19","JS24_20","JS24_22","JS24_23","JS24_27",
"JG2_2","JG3_28","JG5_2","JG5_3","JG5_9","JG5_10","JG5_23","JG6_10","JG6_31","JG7_15","JG7_17","JG7_18","JG7_24","JG8_5","JG8_15","JG8_18","JG8_19","JG8_24","JG9_2","JG9_7","JG9_15","JG9_16","JG9_18","JG9_19","JG9_28","JG9_48","JG10_12","JG10_13","JG10_14","JG11_7","JG11_26","JG12_2","JG12_3","JG14_2","JG14_12","JG14_13","JG14_15","JG14_18","JG15_7","JG15_10","JG15_12","JG16_18","JG16_25","JG18_2","JG18_6","JG18_9","JG18_10","JG18_14","JG18_24","JG19_5","JG19_9","JG19_23","JG19_24","JG19_30","JG20_3","JG20_7","JG20_13","JG20_23","JG20_28","JG21_10","JG21_11","JG21_20","JG21_21","JG21_22",
"RT1_8","RT1_9","RT1_11","RT1_12","RT1_13","RT1_20","RT1_21","RT2_15","RT2_16","RT4_2",
"S12_3","S12_23","S12_29","S14_9","S15_11","S16_2","S16_3","S16_5","S16_6","S16_7","S16_8","S16_9","S16_21","S17_3","S17_5","S18_17","S18_18","S18_22","S19_9","S19_13","S19_19","S110_14","S110_19","S110_24","S111_9","S111_10","S111_12","S111_14","S112_1","S112_3","S112_5","S112_7","S112_11","S112_12","S112_13","S112_14","S112_15","S112_16","S112_17","S112_20","S112_21","S112_24","S112_25","S113_9","S114_9","S114_10","S114_12","S114_17","S114_27","S114_29","S114_33","S114_34","S114_38","S114_40","S114_42","S115_3","S115_6","S115_32","S116_5","S116_17","S117_8","S117_9","S117_10","S117_25","S118_22","S118_25","S119_15","S121_14","S121_15","S122_7","S122_8","S122_13","S122_17","S123_21","S123_22","S123_23","S125_5","S125_6","S125_13","S125_19","S126_16","S127_10","S128_7","S129_10","S130_23",
"S21_20","S21_24","S22_5","S22_6","S22_7","S23_17","S23_18","S23_31","S23_38","S27_7","S210_5","S211_15","S211_20","S211_21","S213_9","S213_17","S213_28","S214_30","S215_10","S215_14","S215_28","S215_36","S216_11","S216_20","S217_16","S217_21","S218_12","S219_11","S219_12","S219_13","S219_22","S219_29","S220_16","S220_21","S221_3","S224_2",
"K11_28","K11_32","K11_33","K11_34","K11_35","K11_45","K13_24","K13_25","K13_26","K13_27","K19_6","K111_2","K112_5","K112_12","K112_24","K113_4","K113_13","K113_27","K113_31","K118_21","K118_24","K118_25","K118_27","K118_30","K118_33","K118_34","K118_40","K120_7","K120_9","K120_11","K120_12","K120_18","K120_28","K120_33","K121_9","K121_10","K122_3","K122_27","K122_28","K122_31",
"K21_2","K21_5","K21_6","K22_3","K22_5","K22_16","K22_17","K22_18","K22_20","K23_15","K23_17","K23_19","K24_41","K25_7","K26_2","K26_11","K26_13","K26_19","K26_32","K27_1","K27_4","K27_9","K27_14","K29_11","K29_27","K29_33","K29_34","K210_3","K210_6","K210_8","K210_10","K210_14","K210_19","K210_20","K210_23","K210_25","K211_5","K211_6","K211_8","K211_15","K212_7","K217_12","K217_13","K217_27","K217_35","K217_36","K217_37","K217_38","K217_39","K218_19","K218_22","K218_28","K218_31","K218_32","K218_36","K219_6","K219_10","K219_29","K220_7","K222_13","K222_15","K222_18","K223_18","K223_21","K225_24",
"R112_17","R115_12","R116_8","R116_9","R116_10","R116_11","R116_12","R116_15","R116_22","R116_23","R116_24","R116_28","R116_29","R116_30","R116_34","R116_35","R117_6","R119_5","R121_2","R122_19","R128_2","R128_8","R129_20",
"R27_19","R210_5","R210_12","R211_4","R212_5","R213_4","R213_9","R213_11","R213_12","R215_2","R215_7","R218_14","R218_18","R218_25","R218_26","R218_27","R218_30","R219_6","R219_7","R219_9","R219_10","R219_11","R220_15","R220_16","R220_17","R220_20","R220_21","R223_4","R223_7","R223_14","R224_5","R224_20","R228_9","R228_11","R228_13","R229_5","R229_11","R229_31","R230_6","R230_7","R230_8","R230_9","R232_7","R232_12","R232_13","R232_15","R234_21","R234_23","R234_26","R235_3","R235_4","R235_5","R235_6","R235_23",
"ER8_29","ER9_12","ER10_10","ER10_11",
"NH1_8","NH1_9","NH2_17","NH4_12","NH4_14","NH4_20","NH5_8","NH5_9","NH5_11","NH7_3","NH8_9","NH8_10","NH8_11","NH8_15","NH9_5","NH13_21","NH13_25",
"ET4_14","ET4_16","ET5_5","ET7_10","ET8_8",
"JB6_21","JB6_22","JB6_23","JB6_24","JB6_26","JB6_27","JB6_28","JB6_29","JB13_5","JB13_6","JB13_7","JB13_8","JB13_9","JB13_10","JB13_13","JB13_17","JB17_10","JB18_2","JB19_2","JB19_3","JB19_5","JB19_6","JB19_15","JB19_21","JB19_22","JB19_28","JB19_29","JB21_2","JB21_3","JB21_5","JB21_27","JB21_28","JB21_29","JB21_34","JB27_12","JB32_11","JB32_13","JB34_2","JB34_10","JB37_2","JB42_7","JB42_8",
"PS2_10","PS2_11","PS2_12","PS4_2","PS4_3","PS4_4","PS4_5","PS6_8","PS9_11","PS11_1","PS14_6","PS22_23","PS24_7","PS24_9","PS27_8","PS29_1","PS29_2","PS30_4","PS31_23","PS31_24","PS32_9","PS32_11","PS33_1","PS33_2","PS33_3","PS34_3","PS34_8","PS34_9","PS34_11","PS46_8","PS46_10","PS47_1","PS47_6","PS47_7","PS48_12","PS48_13","PS49_1","PS50_5","PS50_22","PS58_1","PS58_2","PS62_3","PS62_8","PS62_10","PS66_1","PS66_2","PS66_3","PS66_5","PS66_8","PS66_16","PS68_4","PS68_13","PS68_16","PS68_26","PS68_32","PS68_34","PS71_11","PS75_4","PS75_5","PS76_11","PS78_1","PS81_1","PS81_2","PS81_3","PS82_2","PS82_3","PS82_4","PS82_7","PS83_4","PS90_3","PS94_8","PS95_1","PS95_6","PS95_7","PS95_8","PS96_1","PS96_2","PS96_3","PS96_7","PS96_8","PS96_9","PS96_10","PS97_7","PS97_10","PS97_12","PS98_1","PS98_4","PS98_5","PS98_6","PS99_5","PS99_9","PS100_1","PS100_2","PS100_3","PS100_4","PS103_20","PS103_21","PS103_22","PS105_1","PS105_2","PS105_3","PS105_4","PS105_5","PS105_15","PS106_1","PS107_1","PS113_1","PS114_6","PS115_10","PS115_11","PS117_1","PS118_1","PS118_19","PS118_27","PS118_29","PS119_115","PS122_6","PS134_1","PS134_2","PS135_1","PS135_3","PS135_19","PS135_20","PS136_1","PS136_2","PS136_3","PS136_26","PS137_3","PS137_7","PS139_19","PS146_3","PS147_7","PS148_1","PS148_2","PS148_3","PS148_4","PS148_7","PS149_1","PS150_1","PS150_2","PS150_3","PS150_4","PS150_5",
"PR1_22","PR1_23","PR1_24","PR1_25","PR4_1","PR4_2","PR5_7","PR7_24","PR8_5","PR8_6","PR8_10","PR8_32","PR8_33","PR9_5","PR9_6","PR31_6","PR31_31",
"SS1_6","SS2_5","SS2_7","SS2_15","SS3_3","SS3_5","SS3_11","SS5_1","SS5_8","SS6_13","SS8_4",
"IS1_2","IS1_5","IS1_10","IS1_12","IS1_13","IS1_15","IS1_16","IS1_17","IS1_18","IS1_19","IS1_20","IS1_29","IS1_30","IS2_3","IS2_5","IS2_22","IS3_7","IS3_10","IS3_14","IS3_15","IS5_3","IS5_8","IS6_9","IS7_9","IS7_13","IS8_9","IS8_10","IS8_12","IS8_13","IS8_19","IS10_3","IS12_3","IS12_4","IS12_5","IS13_2","IS13_6","IS14_21","IS16_1","IS16_3","IS16_7","IS18_2","IS18_3","IS19_11","IS21_5","IS21_12","IS21_13","IS21_14","IS22_4","IS22_9","IS22_10","IS22_11","IS22_14","IS23_1","IS23_2","IS23_6","IS23_13","IS23_14","IS24_15","IS26_2","IS26_4","IS26_19","IS27_2","IS27_12","IS28_12","IS28_14","IS28_15","IS28_18","IS28_22","IS28_23","IS29_1","IS29_9","IS30_10","IS30_11","IS30_12","IS30_15","IS30_16","IS30_17","IS30_21","IS30_22","IS31_6","IS32_9","IS32_10","IS32_11","IS33_11","IS33_13","IS34_1","IS34_16","IS35_3","IS35_4","IS36_4","IS36_7","IS36_13","IS36_16","IS36_21","IS37_6","IS37_10","IS37_30","IS40_1","IS40_2","IS40_3","IS40_18","IS40_21","IS40_25","IS40_26","IS41_1","IS41_21","IS41_22","IS41_23","IS42_10","IS42_18","IS43_10","IS43_18","IS43_19","IS44_8","IS44_23","IS45_8","IS45_11","IS45_17","IS45_19","IS45_20","IS45_21","IS45_22","IS46_3","IS46_5","IS46_8","IS46_9","IS46_12","IS48_1","IS48_6","IS48_14","IS48_16","IS48_20","IS49_1","IS49_9","IS49_13","IS50_1","IS50_11","IS51_1","IS51_2","IS51_4","IS51_6","IS51_7","IS52_2","IS52_3","IS52_9","IS52_11","IS52_12","IS55_1","IS55_2","IS55_3","IS55_6","IS55_12","IS56_1","IS56_9","IS56_12","IS57_3","IS57_4","IS57_14","IS58_3","IS58_4","IS58_6","IS61_6","IS62_7","IS62_10","IS62_11","IS65_12","IS65_13","IS65_14","IS65_15","IS65_18","IS66_1","IS66_5","IS66_10","IS66_11","IS66_12","IS66_13","IS66_14",
"JR2_4","JR2_7","JR2_10","JR2_12","JR2_19","JR2_29","JR2_31","JR3_13","JR3_14","JR3_16","JR3_19","JR3_20","JR3_22","JR4_3","JR4_4","JR4_5","JR4_6","JR4_8","JR4_16","JR5_1","JR5_10","JR5_19","JR5_20","JR5_21","JR5_22","JR5_31","JR6_1","JR6_4","JR6_5","JR6_6","JR6_16","JR6_17","JR6_18","JR7_2","JR7_3","JR7_4","JR7_5","JR7_6","JR7_9","JR7_10","JR7_12","JR7_13","JR7_21","JR7_23","JR8_8","JR8_14","JR9_4","JR9_17","JR9_20","JR10_1","JR10_2","JR10_5","JR11_2","JR11_4","JR11_6","JR11_7","JR11_13","JR12_9","JR12_13","JR13_15","JR13_16","JR13_17","JR13_18","JR13_23","JR14_13","JR16_12","JR16_13","JR17_4","JR17_20","JR17_21","JR17_22","JR17_24","JR17_27","JR18_11","JR18_13","JR18_18","JR19_3","JR20_6","JR20_10","JR20_13","JR21_3","JR21_11","JR21_12","JR22_3","JR22_4","JR22_5","JR22_10","JR22_26","JR22_30","JR23_2","JR23_16","JR23_20","JR23_35","JR23_36","JR23_38","JR25_3","JR25_4","JR25_5","JR25_6","JR25_7","JR25_8","JR25_27","JR25_28","JR25_29","JR25_34","JR26_4","JR26_5","JR26_11","JR26_12","JR26_13","JR26_14","JR26_15","JR27_4","JR27_9","JR27_10","JR27_12","JR27_13","JR27_14","JR27_15","JR27_16","JR27_17","JR29_5","JR29_6","JR29_7","JR29_8","JR29_12","JR29_13","JR29_15","JR29_19","JR29_20","JR29_28","JR30_6","JR30_22","JR30_24","JR31_6","JR31_7","JR31_10","JR31_34","JR32_5","JR33_11","JR33_20","JR34_14","JR34_15","JR34_16","JR34_17","JR35_5","JR35_6","JR35_7","JR35_11","JR35_13","JR35_14","JR35_15","JR35_18","JR37_7","JR37_9","JR37_10","JR37_18","JR40_3","JR40_9","JR40_10","JR41_6","JR42_9","JR42_10","JR42_11","JR42_15","JR42_16","JR42_18","JR42_19","JR42_20","JR42_21","JR42_22","JR43_2","JR44_2","JR44_4","JR44_9","JR44_21","JR44_22","JR44_23","JR44_24","JR44_25","JR44_26","JR44_29","JR46_3","JR46_4","JR46_9","JR46_14","JR48_2","JR48_6","JR48_9","JR48_14","JR48_17","JR48_20","JR48_26","JR48_28","JR49_3","JR49_5","JR49_8","JR49_11","JR49_14","JR49_20","JR49_28","JR49_30","JR49_31","JR50_2","JR50_5","JR50_8","JR50_14","JR50_15","JR50_16","JR50_26","JR50_27","JR50_29","JR50_45","JR51_3","JR51_6","JR51_8","JR51_9","JR51_10","JR51_11","JR51_12","JR51_27","JR51_28","JR51_45","JR51_46","JR51_50",
"LM1_12","LM1_18","LM4_15",
"EK5_7","EK6_3","EK6_6","EK6_7","EK6_13","EK7_4","EK7_9","EK9_1","EK9_5","EK9_6","EK9_7","EK11_5","EK11_6","EK11_7","EK11_8","EK11_10","EK11_11","EK11_12","EK11_15","EK11_17","EK12_20","EK13_2","EK13_5","EK13_7","EK13_8","EK13_9","EK13_11","EK13_12","EK13_14","EK13_18","EK13_19","EK13_21","EK13_23","EK14_6","EK14_8","EK14_22","EK14_23","EK15_7","EK17_12","EK17_21","EK18_19","EK18_25","EK18_30","EK18_31","EK18_32","EK20_7","EK20_18","EK20_19","EK20_20","EK20_34","EK20_38","EK20_39","EK20_41","EK20_42","EK20_43","EK20_44","EK21_24","EK22_21","EK22_22","EK23_49","EK24_21","EK24_22","EK24_23","EK24_24","EK25_3","EK25_5","EK30_2","EK32_20","EK33_10","EK33_11","EK33_20","EK33_25","EK33_26","EK33_30","EK34_3","EK34_4","EK34_7","EK34_9","EK34_18","EK34_21","EK35_9","EK35_13","EK36_1","EK36_3","EK36_4","EK36_6","EK36_8","EK36_9","EK36_11","EK36_22","EK36_23","EK36_25","EK36_27","EK36_28","EK36_30","EK36_31","EK36_32","EK37_4","EK37_5","EK37_6","EK37_7","EK37_13","EK37_14","EK39_17","EK39_18","EK39_19","EK39_20","EK44_8","EK44_28","EK44_30","EK45_1","EK45_6","EK45_9","EK45_13","EK45_20","EK47_13","EK47_14","EK47_18","EK47_21","EK47_22","EK47_23","EK48_8","EK48_9","EK48_20","EK48_29",
"DN1_10",
"HS2_1","HS2_2","HS4_1","HS4_15","HS4_18","HS5_1","HS5_8","HS6_1","HS9_5","HS10_8","HS10_12","HS10_13","HS14_2",
"JL1_2","JL1_3","JL1_5","JL1_13","JL1_14","JL2_1","JL2_12","JL2_13","JL2_15","JL2_16","JL2_19","JL2_22","JL2_23","JL2_26","JL2_27","JL3_5","JL3_6","JL3_7","JL3_9","JL3_10","JL3_11","JL3_13","JL3_17",
"AM2_12","AM3_1","AM3_9","AM3_13","AM4_1","AM4_3","AM4_4","AM4_5","AM4_6","AM4_8","AM4_9","AM4_10","AM4_11","AM5_1","AM5_4","AM5_5","AM5_6","AM5_11","AM5_14","AM5_15","AM5_22","AM5_25","AM5_26","AM6_2","AM6_3","AM6_12","AM8_4",
"OB1_undefined","OB13_undefined","OB16_undefined",
"JH1_7","JH1_12",
"MC1_2","MC1_10","MC2_3","MC2_6","MC2_8","MC2_9","MC2_10","MC3_1","MC3_9","MC4_2","MC6_1","MC6_2","MC6_9","MC6_16","MC7_5",
"NM1_9","NM2_8","NM2_9",
"HK1_5",
"ZP1_11","ZP2_1","ZP2_3","ZP3_8","ZP3_14",
"HG1_5","HG1_6","HG1_7","HG1_8","HG1_9","HG2_4","HG2_5","HG2_15","HG2_18",
"ZC1_3","ZC1_4","ZC2_6","ZC2_9","ZC3_4","ZC3_10","ZC6_7","ZC6_15","ZC7_5","ZC7_6","ZC7_9","ZC7_10","ZC8_13","ZC8_15","ZC8_16","ZC8_17","ZC8_19","ZC9_12","ZC10_1","ZC11_2","ZC11_12","ZC14_5",
"ML1_2","ML1_5","ML1_6","ML1_7","ML1_8","ML1_9","ML1_10","ML1_13","ML2_2","ML2_4","ML2_8","ML2_13","ML2_14","ML2_15","ML2_16","ML2_17","ML3_6","ML3_7","ML3_8","ML3_10","ML3_12","ML3_13","ML3_14","ML3_18","ML4_2","ML4_3","ML4_4",
"GN1_29","GN9_2","GN9_3","GN9_5","GN9_9","GN9_10","GN9_11","GN9_12","GN9_15","GN17_12","GN17_13","GN23_9","GN27_45","GN29_4","GN31_5","GN31_7","GN31_9","GN31_29","GN34_16","GN37_7","GN40_7","GN42_14","GN43_14","GN44_19","GN45_7","GN45_12","GN45_20","GN46_33","GN47_3","GN48_21","GN50_24",
"EX3_13","EX3_14","EX3_15","EX3_16","EX3_17","EX3_19","EX3_20","EX5_10","EX5_17","EX6_6","EX6_8","EX7_4","EX10_5","EX10_16","EX11_1","EX11_9","EX12_2","EX12_6","EX12_13","EX12_16","EX12_19","EX12_23","EX12_26","EX12_49","EX13_4","EX16_4","EX16_8","EX16_15","EX16_32","EX16_33","EX18_10","EX22_24","EX23_21","EX23_31","EX24_8","EX26_33","EX29_42","EX30_8","EX30_10","EX30_15","EX30_16","EX30_31","EX30_36","EX32_13","EX33_5","EX35_2","EX35_10",
"LV6_18","LV8_34","LV9_4","LV11_5","LV11_6","LV11_7","LV11_10","LV11_12","LV11_20","LV11_23","LV11_26","LV11_27","LV11_28","LV11_29","LV11_31","LV11_35","LV11_38","LV11_39","LV16_34","LV17_11","LV17_12","LV18_2","LV18_27","LV18_28","LV19_6","LV19_9","LV19_10","LV19_36","LV20_14","LV21_8","LV22_3","LV22_19","LV22_33","LV23_11","LV23_22","LV23_24","LV23_43","LV24_3","LV24_22","LV25_6","LV25_21","LV25_23","LV25_38","LV25_55","LV26_4","LV26_8","LV26_9","LV26_11","LV26_13","LV26_19","LV26_20","LV26_22","LV26_24","LV26_28","LV26_30","LV26_31","LV26_32","LV26_33","LV26_34","LV26_35","LV26_36","LV26_37","LV26_39",
"NU1_4","NU1_5","NU9_10","NU9_14","NU10_8","NU10_29","NU14_32","NU14_33","NU14_41","NU15_15","NU15_16","NU15_18","NU15_23","NU15_29","NU15_41","NU16_9","NU17_4","NU17_5","NU18_3","NU18_4","NU18_6","NU18_23","NU18_27","NU18_30","NU25_18","NU28_22","NU28_30","NU29_5","NU32_8","NU32_21","NU32_30","NU33_51","NU33_56","NU34_2","NU34_3","NU34_4","NU34_6","NU34_9","NU34_12","NU34_17","NU35_10","NU35_12","NU35_29","NU35_34",
"DT1_6","DT1_9","DT1_10","DT1_11","DT1_12","DT1_15","DT1_23","DT1_30","DT1_32","DT1_34","DT1_35","DT1_37","DT1_44","DT3_19","DT3_21","DT3_26","DT4_3","DT4_4","DT4_5","DT4_8","DT4_12","DT4_13","DT4_14","DT4_20","DT4_21","DT4_34","DT5_4","DT5_22","DT5_28","DT6_1","DT6_20","DT7_4","DT7_7","DT7_8","DT9_9","DT9_10","DT9_17","DT9_19","DT9_25","DT10_4","DT10_15","DT10_17","DT11_4","DT11_5","DT11_7","DT11_11","DT11_14","DT11_21","DT11_24","DT11_26","DT13_3","DT13_5","DT13_7","DT14_19","DT20_2","DT20_4","DT23_4","DT24_9","DT25_17","DT27_1","DT27_12","DT28_14","DT29_4","DT29_5","DT29_10","DT29_11","DT29_14","DT29_18","DT29_22","DT30_19","DT31_12","DT31_13","DT32_17","DT32_38",
"JS1_3","JS1_4","JS1_13","JS2_9","JS2_11","JS2_21","JS3_11","JS4_6","JS4_21","JS4_23","JS5_9","JS6_5","JS9_12","JS9_23","JS9_24","JS15_4","JS18_3","JS18_7","JS20_3","JS22_24","JS22_25","JS22_27","JS23_9","JS23_10","JS23_15","JS24_2","JS24_3","JS24_5","JS24_9","JS24_10","JS24_12",
"JG2_1","JG2_3","JG6_8","JG6_9","JG7_7","JG8_2","JG8_3","JG8_7","JG8_23","JG9_17","JG11_9","JG12_4","JG18_8","JG18_18","JG18_25","JG20_12",
"RT2_4","RT4_9","RT4_10",
"S16_4","S18_11","S18_13","S18_14","S18_15","S18_16","S110_2","S110_15","S110_18","S111_2","S112_2","S112_6","S112_8","S112_22","S112_23","S117_47","S118_23","S122_3","S130_24","S130_26",
"S21_21","S24_11","S27_23","S215_27","S216_10","S218_2","S218_4","S219_10","S221_4",
"K18_61","K112_6","K112_9","K112_11","K112_14","K112_28","K118_18",
"K21_3","K21_7","K23_18","K27_12","K29_15","K210_2","K210_9","K210_13","K210_24","K211_7","K218_27","K218_29","K218_30",
"R113_2","R115_13","R116_18","R116_19","R122_18",
"R210_6","R210_9","R210_11","R210_14","R213_5","R213_8","R228_10","R229_8","R232_10","R232_11","R232_14","R233_8","R236_23",
"ER1_3","ER4_2","ER4_3","ER8_28","ER9_11",
"NH2_19","NH2_20","NH5_7","NH6_3","NH13_17","NH13_18","NH13_27",
"JB6_25","JB12_2","JB12_3","JB13_2","JB13_4","JB13_11","JB13_12","JB16_2","JB16_4","JB16_5","JB18_3","JB27_5","JB27_11","JB32_6","JB32_12","JB32_14",
"PS22_26","PS58_9","PS69_32","PS82_6","PS95_9","PS105_11","PS115_14","PS115_15","PS118_26","PS127_2","PS129_8",
"PR1_26","PR1_27","PR8_4",
"IS1_7","IS1_11","IS1_14","IS5_5","IS7_14","IS21_10","IS23_7","IS28_19","IS29_10","IS29_11","IS29_16","IS30_3","IS30_13","IS30_18","IS30_20","IS30_29","IS31_7","IS32_20","IS33_4","IS36_12","IS36_14","IS36_15","IS36_17","IS36_18","IS40_9","IS41_24","IS41_26","IS42_9","IS42_17","IS42_23","IS43_12","IS43_14","IS43_15","IS46_1","IS50_10","IS51_12","IS55_8","IS55_9","IS59_2","IS59_3","IS61_5","IS61_7","IS62_6","IS65_7","IS65_11","IS66_20","IS66_22",
"JR2_5","JR2_9","JR2_30","JR3_12","JR3_15","JR3_18","JR4_10","JR5_14","JR5_15","JR5_18","JR5_25","JR6_20","JR7_7","JR7_8","JR7_11","JR7_14","JR7_15","JR7_22","JR7_25","JR8_17","JR11_5","JR13_20","JR14_14","JR15_14","JR16_9","JR16_11","JR17_1","JR18_6","JR21_4","JR21_5","JR21_8","JR21_9","JR21_14","JR23_17","JR23_33","JR23_39","JR23_40","JR29_9","JR29_10","JR29_11","JR29_14","JR29_16","JR29_21","JR29_27","JR29_31","JR32_36","JR32_43","JR33_10","JR34_13","JR34_21","JR36_19","JR37_19","JR38_5","JR42_4","JR42_12","JR42_13","JR44_3","JR44_7","JR44_8","JR44_10","JR44_11","JR50_12","JR51_24",
"EK5_16","EK5_17","EK6_4","EK6_5","EK6_8","EK6_9","EK11_9","EK11_19","EK12_11","EK12_22","EK12_25","EK13_15","EK13_20","EK16_45","EK16_55","EK18_2","EK18_3","EK18_29","EK20_3","EK20_5","EK20_27","EK20_29","EK20_30","EK20_31","EK20_32","EK20_33","EK20_35","EK20_36","EK20_37","EK20_40","EK22_19","EK22_20","EK23_48","EK34_17","EK34_19","EK34_31","EK36_2","EK36_7","EK36_10","EK36_12","EK36_13","EK36_24","EK36_26","EK36_29","EK36_33","EK36_36","EK37_12","EK37_25","EK43_27","EK44_6","EK44_7","EK45_10","EK45_12","EK45_21",
"DN10_21",
"HS1_9","HS1_10","HS4_13","HS4_14","HS5_13","HS6_4","HS9_10","HS10_15",
"JL2_14","JL2_20","JL2_25","JL2_28","JL3_4","JL3_8",
"AM2_10","AM2_11","AM2_13","AM3_2","AM4_2","AM4_7","AM5_12","AM5_18","AM5_21","AM5_27","AM6_14","AM8_10","AM9_7",
"MC1_11","MC2_4","MC3_6","MC3_12",
"ZP2_2","ZP2_5","ZP2_12","ZP3_20",
"HG1_4","HG1_10","HG1_13","HG2_3","HG2_17",
"ZC1_2","ZC1_5","ZC1_6","ZC2_8","ZC4_9","ZC8_9","ZC8_14","ZC8_23","ZC11_9",
"ML1_12","ML2_1","ML2_3","ML2_9","ML3_1","ML3_5","ML3_9","ML3_11","ML4_5",
"MT2_8","MT3_2","MT3_3","MT3_7","MT3_8","MT3_9","MT3_11","MT4_17","MT4_19","MT5_11","MT5_12","MT5_13","MT5_14","MT5_16","MT5_17","MT5_18","MT5_20","MT5_21","MT5_22","MT5_27","MT5_28","MT5_32","MT5_33","MT5_34","MT5_37","MT5_38","MT5_39","MT5_43","MT5_44","MT5_45","MT5_46","MT5_47","MT5_48","MT6_1","MT6_2","MT6_5","MT6_7","MT6_8","MT6_9","MT6_14","MT6_15","MT6_16","MT6_19","MT6_20","MT6_24","MT6_25","MT6_26","MT6_27","MT6_28","MT6_29","MT6_30","MT6_31","MT6_32","MT6_33","MT6_34","MT7_1","MT7_2","MT7_6","MT7_7","MT7_9","MT7_11","MT7_12","MT7_13","MT7_15","MT7_16","MT7_20","MT7_23","MT8_10","MT8_11","MT8_26","MT8_32","MT9_4","MT9_6","MT9_11","MT9_13","MT9_24","MT9_28","MT9_29","MT9_30","MT9_38","MT10_5","MT10_6","MT10_7","MT10_8","MT10_9","MT10_11","MT10_12","MT10_13","MT10_14","MT10_15","MT10_16","MT10_17","MT10_18","MT10_19","MT10_20","MT10_22","MT10_23","MT10_26","MT10_27","MT10_28","MT10_29","MT10_30","MT10_31","MT10_34","MT10_40","MT10_42","MT11_4","MT11_7","MT11_8","MT11_9","MT11_11","MT11_14","MT11_17","MT11_21","MT11_22","MT11_24","MT11_28","MT11_29","MT12_3","MT12_5","MT12_6","MT12_7","MT12_11","MT12_27","MT12_28","MT12_31","MT12_33","MT12_34","MT12_36","MT13_11","MT13_14","MT13_16","MT13_17","MT13_18","MT13_29","MT13_30","MT13_51","MT14_16","MT14_18","MT14_27","MT15_3","MT15_5","MT15_6","MT15_7","MT15_10","MT15_14","MT15_16","MT15_17","MT15_34","MT16_2","MT16_3","MT16_6","MT16_8","MT16_9","MT16_10","MT16_11","MT16_15","MT16_28","MT17_5","MT17_7","MT17_9","MT17_12","MT17_17","MT17_20","MT17_24","MT18_3","MT18_10","MT18_12","MT18_13","MT18_14","MT18_18","MT18_19","MT18_35","MT19_4","MT19_8","MT19_9","MT19_14","MT19_23","MT19_24","MT19_28","MT20_4","MT20_6","MT20_7","MT20_22","MT20_23","MT20_25","MT20_26","MT20_27","MT20_32","MT21_2","MT21_3","MT21_5","MT21_13","MT21_16","MT21_21","MT21_22","MT21_24","MT21_25","MT21_27","MT21_28","MT21_31","MT21_32","MT21_33","MT21_42","MT21_43","MT22_4","MT22_9","MT22_13","MT22_18","MT22_19","MT22_21","MT22_29","MT22_31","MT22_42","MT23_3","MT23_8","MT23_9","MT23_10","MT23_11","MT23_13","MT23_15","MT23_16","MT23_23","MT23_25","MT23_27","MT23_28","MT23_29","MT23_30","MT23_31","MT23_32","MT23_33","MT23_34","MT23_35","MT23_36","MT23_37","MT23_38","MT23_39","MT24_2","MT24_4","MT24_6","MT24_9","MT24_15","MT24_20","MT24_23","MT24_25","MT24_26","MT24_32","MT24_33","MT24_34","MT24_42","MT24_43","MT24_44","MT24_47","MT25_6","MT25_8","MT25_9","MT25_12","MT25_13","MT25_28","MT25_30","MT25_34","MT25_35","MT25_36","MT25_40","MT25_41","MT25_42","MT25_43","MT25_45","MT26_2","MT26_10","MT26_11","MT26_13","MT26_15","MT26_18","MT26_21","MT26_26","MT26_27","MT26_29","MT26_31","MT26_32","MT26_36","MT26_38","MT26_40","MT26_41","MT26_45","MT26_46","MT26_48","MT26_55","MT26_64","MT26_65","MT26_66","MT27_17","MT27_21","MT27_24","MT27_65","MT28_5","MT28_6","MT28_7","MT28_9","MT28_10","MT28_13","MT28_14","MT28_19","MT28_20",
"MK1_3","MK1_8","MK1_15","MK1_17","MK2_8","MK2_10","MK2_25","MK3_28","MK4_3","MK4_11","MK4_13","MK4_24","MK4_40","MK5_39","MK6_9","MK6_10","MK6_11","MK6_31","MK6_37","MK6_38","MK6_50","MK7_6","MK7_8","MK7_9","MK7_11","MK7_12","MK7_13","MK7_14","MK7_18","MK8_5","MK8_12","MK8_15","MK8_17","MK8_18","MK8_19","MK8_20","MK8_21","MK8_29","MK9_1","MK9_7","MK9_13","MK9_16","MK9_19","MK9_33","MK9_39","MK9_41","MK9_50","MK10_3","MK10_5","MK10_14","MK10_15","MK10_29","MK10_36","MK10_38","MK10_39","MK10_42","MK10_43","MK10_44","MK10_49","MK11_2","MK11_3","MK11_5","MK11_17","MK11_22","MK11_23","MK11_24","MK11_25","MK11_29","MK11_30","MK11_31","MK11_33","MK12_10","MK12_15","MK12_17","MK12_24","MK12_26","MK12_27","MK12_38","MK12_43","MK13_5","MK13_7","MK13_9","MK13_11","MK13_13","MK13_14","MK13_18","MK13_21","MK13_23","MK13_28","MK13_29","MK13_30","MK13_33","MK13_35","MK13_36","MK13_37","MK14_6","MK14_7","MK14_9","MK14_13","MK14_14","MK14_15","MK14_18","MK14_22","MK14_25","MK14_27","MK14_28","MK14_32","MK14_34","MK14_38","MK14_41","MK14_42","MK14_44","MK14_48","MK14_49","MK14_62","MK14_64","MK14_71","MK15_9","MK15_12","MK15_36","MK16_6","MK16_7","MK16_15",
"LK2_10","LK2_11","LK2_12","LK2_49","LK3_4","LK3_7","LK3_8","LK3_13","LK3_14","LK3_16","LK4_21","LK4_23","LK4_24","LK4_25","LK5_4","LK5_22","LK5_24","LK5_30","LK5_34","LK6_2","LK6_3","LK6_9","LK6_21","LK6_22","LK6_23","LK6_24","LK6_25","LK6_26","LK6_27","LK6_28","LK6_31","LK6_32","LK6_33","LK6_34","LK6_35","LK6_36","LK6_37","LK6_38","LK6_46","LK6_47","LK7_9","LK7_22","LK7_24","LK7_25","LK7_26","LK7_28","LK7_32","LK7_33","LK7_34","LK8_10","LK8_18","LK8_25","LK8_52","LK9_3","LK9_4","LK9_5","LK9_13","LK9_14","LK9_20","LK9_27","LK9_35","LK9_41","LK9_44","LK9_48","LK9_50","LK10_2","LK10_3","LK10_4","LK10_5","LK10_6","LK10_7","LK10_8","LK10_9","LK10_10","LK10_11","LK10_12","LK10_13","LK10_14","LK10_16","LK10_19","LK10_20","LK10_23","LK10_24","LK11_2","LK11_5","LK11_8","LK11_9","LK11_11","LK11_13","LK11_18","LK11_19","LK11_20","LK11_39","LK11_41","LK11_42","LK11_43","LK11_44","LK11_46","LK11_47","LK11_48","LK11_51","LK11_52","LK12_1","LK12_3","LK12_4","LK12_5","LK12_7","LK12_8","LK12_11","LK12_12","LK12_14","LK12_15","LK12_22","LK12_24","LK12_25","LK12_26","LK12_27","LK12_28","LK12_29","LK12_30","LK12_31","LK12_32","LK12_33","LK12_34","LK12_35","LK12_36","LK12_37","LK12_39","LK12_40","LK12_44","LK12_51","LK12_54","LK12_55","LK12_56","LK12_57","LK13_2","LK13_3","LK13_4","LK13_5","LK13_14","LK13_15","LK13_24","LK13_25","LK13_26","LK13_27","LK13_28","LK13_32","LK13_34","LK13_35","LK14_5","LK14_17","LK14_24","LK14_28","LK14_33","LK15_4","LK15_6","LK15_7","LK15_9","LK15_10","LK15_22","LK15_23","LK16_9","LK16_11","LK16_12","LK16_13","LK16_15","LK16_26","LK17_3","LK17_6","LK17_7","LK17_10","LK17_14","LK17_21","LK17_22","LK17_23","LK17_32","LK17_34","LK18_6","LK18_8","LK18_14","LK18_16","LK18_17","LK18_29","LK19_13","LK19_24","LK19_26","LK19_27","LK19_30","LK19_31","LK19_33","LK19_40","LK19_46","LK20_3","LK20_5","LK20_8","LK20_24","LK20_25","LK20_46","LK21_3","LK21_6","LK21_8","LK21_9","LK21_12","LK21_13","LK21_14","LK21_15","LK21_16","LK21_17","LK21_18","LK21_19","LK21_20","LK21_28","LK21_29","LK21_30","LK21_31","LK21_32","LK21_34","LK21_36","LK22_8","LK22_10","LK22_11","LK22_12","LK22_15","LK22_16","LK22_17","LK22_18","LK22_19","LK22_20","LK22_26","LK22_27","LK22_28","LK22_29","LK22_30","LK22_31","LK22_35","LK22_37","LK22_40","LK22_46","LK22_51","LK22_52","LK22_53","LK22_67","LK22_68","LK22_70","LK23_14","LK23_28","LK23_30","LK24_5","LK24_6","LK24_17","LK24_38","LK24_39","LK24_41","LK24_44","LK24_48","LK24_49",
"JN1_23","JN1_26","JN1_38","JN1_39","JN1_51","JN2_5","JN2_7","JN2_8","JN2_16","JN2_19","JN3_7","JN3_11","JN3_12","JN3_28","JN4_20","JN4_21","JN4_22","JN4_29","JN4_32","JN4_35","JN4_38","JN4_48","JN5_19","JN5_20","JN5_24","JN5_25","JN5_28","JN5_33","JN5_34","JN5_35","JN5_37","JN5_38","JN5_39","JN5_40","JN5_42","JN5_43","JN5_44","JN5_45","JN5_46","JN5_47","JN6_10","JN6_12","JN6_20","JN6_26","JN6_27","JN6_29","JN6_32","JN6_36","JN6_43","JN6_47","JN6_49","JN6_53","JN6_61","JN6_62","JN6_63","JN6_64","JN6_65","JN6_67","JN6_70","JN7_7","JN7_8","JN7_19","JN7_21","JN7_22","JN7_23","JN7_24","JN7_28","JN7_33","JN7_34","JN7_36","JN7_45","JN7_47","JN8_14","JN8_15","JN8_19","JN8_21","JN8_22","JN8_23","JN8_24","JN8_25","JN8_26","JN8_28","JN8_31","JN8_32","JN8_33","JN8_34","JN8_36","JN8_37","JN8_38","JN8_39","JN8_40","JN8_41","JN8_42","JN8_43","JN8_44","JN8_45","JN8_46","JN8_47","JN8_49","JN8_51","JN8_54","JN8_55","JN8_56","JN8_58","JN9_19","JN9_21","JN9_23","JN9_27","JN9_30","JN9_41","JN10_1","JN10_7","JN10_20","JN10_25","JN10_26","JN10_32","JN10_34","JN10_36","JN10_37","JN10_38","JN11_15","JN11_34","JN11_39","JN11_44","JN11_49","JN11_50","JN11_56","JN12_8","JN12_19","JN12_24","JN12_30","JN12_35","JN12_36","JN13_10","JN13_11","JN13_12","JN13_13","JN13_14","JN13_15","JN13_16","JN13_17","JN13_18","JN13_19","JN13_20","JN13_21","JN13_33","JN13_34","JN13_35","JN14_1","JN14_2","JN14_3","JN14_4","JN14_7","JN14_9","JN14_10","JN14_11","JN14_12","JN14_13","JN14_14","JN14_15","JN14_16","JN14_17","JN14_18","JN14_19","JN14_20","JN14_24","JN14_25","JN14_26","JN14_27","JN14_28","JN14_29","JN14_30","JN14_31","JN15_3","JN15_4","JN15_5","JN15_7","JN15_8","JN15_9","JN15_10","JN15_11","JN15_12","JN15_14","JN15_15","JN15_16","JN15_17","JN15_18","JN15_19","JN15_20","JN15_21","JN15_26","JN15_27","JN16_1","JN16_2","JN16_4","JN16_5","JN16_6","JN16_7","JN16_10","JN16_12","JN16_13","JN16_14","JN16_15","JN16_16","JN16_17","JN16_19","JN16_20","JN16_22","JN16_23","JN16_24","JN16_25","JN16_26","JN16_27","JN16_31","JN16_32","JN16_33","JN18_4","JN18_7","JN18_8","JN18_29","JN18_31","JN18_39","JN19_4","JN19_6","JN19_14","JN19_15","JN19_35","JN20_17","JN20_19","JN20_21","JN20_22","JN20_23","JN20_26","JN20_31","JN21_5","JN21_6","JN21_10","JN21_12",
"AC1_4","AC1_5","AC1_7","AC1_8","AC1_11","AC2_14","AC2_15","AC2_17","AC2_22","AC2_23","AC2_29","AC2_33","AC2_36","AC2_38","AC2_39","AC2_40","AC3_12","AC3_13","AC3_14","AC3_15","AC3_16","AC3_17","AC3_19","AC3_20","AC3_22","AC3_25","AC3_26","AC4_7","AC4_10","AC4_11","AC4_19","AC5_8","AC5_9","AC5_20","AC5_25","AC5_28","AC5_30","AC5_35","AC5_38","AC5_39","AC6_3","AC7_2","AC7_4","AC7_26","AC7_37","AC7_42","AC7_43","AC7_49","AC7_51","AC7_52","AC7_53","AC8_19","AC8_24","AC10_21","AC10_28","AC10_29","AC10_37","AC11_16","AC12_17","AC13_2","AC13_15","AC13_16","AC13_25","AC13_26","AC13_32","AC13_34","AC13_38","AC13_40","AC13_41","AC13_46","AC14_15","AC14_17","AC15_1","AC15_7","AC15_10","AC15_13","AC15_24","AC15_25","AC15_28","AC15_29","AC16_15","AC16_17","AC16_36","AC17_3","AC17_22","AC17_23","AC17_28","AC18_6","AC18_14","AC18_15","AC18_21","AC19_2","AC19_3","AC19_13","AC19_15","AC19_25","AC19_26","AC19_36","AC19_37","AC19_39","AC20_10","AC20_18","AC20_20","AC20_25","AC20_26","AC20_27","AC20_28","AC20_29","AC20_30","AC20_31","AC20_32","AC20_34","AC20_35","AC21_13","AC21_28","AC22_1","AC22_3","AC22_25","AC23_15","AC23_23","AC24_21","AC24_22","AC25_5","AC25_24","AC25_26","AC26_8","AC27_22","AC27_25","AC27_31","AC27_33","AC27_34","AC28_20","AC28_25","AC28_26","AC28_28",
"RM1_6","RM1_7","RM1_8","RM1_9","RM1_10","RM1_11","RM1_12","RM1_13","RM1_15","RM2_24","RM6_3","RM6_11","RM6_12","RM6_13","RM6_14","RM6_16","RM6_17","RM6_18","RM6_19","RM6_20","RM6_21","RM6_22","RM7_1","RM7_4","RM8_9","RM8_10","RM8_11","RM8_13","RM8_15","RM9_26","RM10_19","RM11_2","RM11_13","RM11_25","RM11_28","RM11_30","RM12_1","RM12_2","RM12_3","RM12_14","RM12_16","RM12_18","RM12_19","RM13_6","RM13_7","RM13_8","RM13_11","RM13_14","RM14_1","RM14_13","RM14_16","RM15_5","RM15_6","RM15_7","RM15_10","RM15_11","RM15_13","RM15_14","RM15_15","RM15_22","RM15_23","RM15_24","RM15_28","RM15_29","RM15_30","RM15_32","RM15_33","RM16_1","RM16_2","RM16_3","RM16_5","RM16_6","RM16_7","RM16_8","RM16_9","RM16_10","RM16_11","RM16_12","RM16_13","RM16_14","RM16_15","RM16_16","RM16_17","RM16_19","RM16_20","RM16_21","RM16_22","RM16_23","RM16_24",
"C11_3","C11_4","C11_5","C11_6","C11_7","C11_8","C11_9","C11_10","C11_11","C11_12","C11_13","C11_14","C11_15","C11_26","C11_30","C12_1","C12_2","C12_3","C12_5","C13_1","C13_2","C13_3","C13_4","C13_5","C13_9","C13_16","C13_17","C13_18","C13_21","C13_22","C13_23","C14_3","C14_5","C14_6","C14_8","C14_10","C14_14","C14_15","C14_16","C14_17","C14_18","C14_19","C14_21","C15_1","C15_2","C15_4","C15_6","C15_7","C15_9","C15_10","C15_11","C15_12","C15_13","C16_1","C16_2","C16_3","C16_4","C16_5","C16_7","C16_8","C16_9","C16_11","C16_15","C16_16","C16_18","C16_19","C16_20","C17_1","C17_5","C17_14","C17_23","C17_28","C17_32","C17_35","C18_9","C18_12","C19_1","C19_2","C19_11","C19_12","C19_13","C19_24","C110_1","C110_7","C110_10","C110_13","C110_14","C110_15","C110_18","C110_20","C110_21","C110_25","C110_27","C110_28","C110_31","C110_32","C111_1","C111_2","C111_3","C111_13","C111_14","C111_17","C111_18","C111_19","C111_20","C111_22","C111_23","C111_24","C111_25","C111_26","C111_30","C111_33","C111_34","C112_1","C112_2","C112_3","C112_21","C112_27","C112_31","C114_1","C114_5","C114_6","C114_9","C114_12","C114_18","C114_20","C114_23","C114_25","C114_26","C114_31","C114_36","C114_37","C114_39","C115_1","C115_2","C115_3","C115_11","C115_12","C115_14","C115_17","C115_33","C115_34","C115_51","C115_58","C116_1","C116_2","C116_3","C116_5","C116_6","C116_7","C116_10","C116_11","C116_12","C116_13","C116_14","C116_15","C116_16","C116_18","C116_19","C116_20","C116_23","C116_24",
"C21_2","C21_6","C21_7","C21_8","C21_11","C21_12","C21_13","C21_14","C21_15","C21_16","C21_18","C21_19","C21_21","C21_23","C21_24","C22_1","C22_2","C22_3","C22_4","C22_5","C22_7","C22_8","C22_9","C22_10","C23_1","C23_2","C23_3","C24_5","C24_12","C24_14","C24_15","C25_11","C25_12","C25_13","C25_20","C26_1","C26_11","C26_12","C26_13","C26_14","C26_17","C26_18","C27_2","C27_3","C27_4","C27_7","C27_8","C27_9","C27_11","C27_12","C27_13","C27_14","C27_15","C27_16","C28_1","C28_6","C28_7","C28_9","C28_10","C28_11","C28_13","C28_14","C28_16","C28_17","C28_22","C28_23","C28_24","C29_1","C29_2","C29_3","C29_4","C29_5","C29_8","C29_10","C29_13","C29_14","C210_1","C210_6","C210_7","C210_8","C210_9","C210_13","C210_14","C210_15","C210_16","C211_1","C211_2","C211_3","C211_4","C211_6","C211_7","C211_8","C211_9","C211_11","C211_16","C211_19","C211_20","C212_11","C212_12","C212_13","C212_14","C212_15","C212_16","C212_17","C212_18","C212_19","C212_20","C212_21","C213_1","C213_3","C213_4","C213_5","C213_6","C213_7","C213_9","C213_11","C213_12","C213_13",
"GL1_3","GL1_6","GL1_7","GL1_8","GL1_9","GL1_11","GL1_13","GL1_20","GL2_5","GL3_1","GL3_2","GL3_3","GL3_4","GL3_5","GL3_7","GL3_26","GL3_27","GL3_28","GL3_29","GL4_6","GL4_8","GL4_9","GL4_10","GL4_11","GL4_12","GL4_13","GL4_14","GL4_15","GL4_16","GL4_17","GL4_18","GL4_19","GL4_20","GL4_21","GL4_28","GL5_1","GL5_2","GL5_4","GL5_7","GL5_8","GL5_10","GL5_12","GL5_13","GL5_15","GL5_16","GL5_17","GL5_18","GL5_21","GL6_1","GL6_2","GL6_7","GL6_11","GL6_12","GL6_13","GL6_18",
"EP1_2","EP1_13","EP1_15","EP1_16","EP1_17","EP1_18","EP2_1","EP2_2","EP2_5","EP2_8","EP2_11","EP2_12","EP2_13","EP2_17","EP2_19","EP2_22","EP3_1","EP3_2","EP3_4","EP3_13","EP3_16","EP3_17","EP3_18","EP3_19","EP4_1","EP4_4","EP4_17","EP4_20","EP4_21","EP4_22","EP4_23","EP4_25","EP4_26","EP4_27","EP4_29","EP4_30","EP4_31","EP4_32","EP5_1","EP5_2","EP5_3","EP5_5","EP5_6","EP5_7","EP5_8","EP5_11","EP5_15","EP5_17","EP5_18","EP5_19","EP5_25","EP5_33","EP6_1","EP6_4","EP6_5","EP6_9","EP6_10","EP6_11","EP6_13","EP6_14","EP6_16","EP6_17","EP6_21","EP6_22",
"PP1_2","PP1_3","PP1_4","PP1_5","PP1_6","PP1_7","PP1_8","PP1_9","PP1_10","PP1_12","PP1_19","PP1_24","PP1_25","PP1_26","PP1_27","PP1_28","PP1_29","PP1_30","PP2_2","PP2_5","PP2_12","PP2_13","PP2_14","PP2_15","PP2_17","PP2_18","PP2_19","PP2_20","PP2_22","PP2_25","PP2_26","PP2_28","PP2_29","PP2_30","PP3_1","PP3_2","PP3_15","PP3_17","PP3_18","PP4_1","PP4_4","PP4_5","PP4_6","PP4_7","PP4_8","PP4_9","PP4_10","PP4_14","PP4_15","PP4_16","PP4_17","PP4_18","PP4_19","PP4_21","PP4_22","PP4_23",
"CL1_2","CL1_3","CL1_4","CL1_5","CL1_6","CL1_7","CL1_8","CL1_9","CL1_12","CL1_21","CL1_22","CL1_23","CL1_24","CL1_25","CL1_27","CL2_1","CL2_4","CL2_5","CL2_6","CL2_7","CL2_8","CL2_10","CL2_11","CL2_12","CL2_13","CL2_16","CL2_18","CL2_20","CL3_1","CL3_2","CL3_3","CL3_4","CL3_5","CL3_7","CL3_8","CL3_9","CL3_12","CL3_13","CL3_15","CL3_16","CL3_17","CL3_18","CL3_19","CL3_20","CL3_21","CL3_22","CL3_23","CL3_24","CL4_1","CL4_2","CL4_5","CL4_6","CL4_7","CL4_8","CL4_9","CL4_10","CL4_12","CL4_13","CL4_14","CL4_15","CL4_16","CL4_17","CL4_18",
"H11_1","H11_2","H11_3","H11_4","H11_5","H11_6","H11_7","H11_8","H11_9","H12_1","H12_2","H12_5","H12_6","H12_7","H12_8","H12_9","H12_10","H12_11","H12_12","H12_13","H12_14","H12_17","H12_18","H12_19","H12_20","H13_2","H13_3","H13_4","H13_5","H13_6","H13_7","H13_8","H13_9","H13_10","H13_11","H13_12","H13_13","H14_1","H14_2","H14_3","H14_4","H14_6","H14_8","H14_9","H14_10","H14_11","H14_12","H14_13","H14_15","H14_18","H15_1","H15_2","H15_4","H15_5","H15_11","H15_12","H15_13","H15_14","H15_15","H15_16","H15_17","H15_18","H15_19","H15_20","H15_21","H15_22","H15_23","H15_24","H15_25","H15_26","H15_27","H15_28",
"H21_2","H21_3","H21_4","H21_5","H21_6","H21_7","H21_10","H21_11","H21_12","H22_1","H22_2","H22_3","H22_5","H22_6","H22_13","H22_14","H22_15","H22_17","H23_1","H23_3","H23_4","H23_5","H23_6","H23_7","H23_8","H23_9","H23_10","H23_11","H23_13","H23_14","H23_15","H23_16","H23_18",
"T16_21",
"T24_22",
"TT3_15",
"PM1_3","PM1_22","PM1_25",
"HB3_1","HB3_7","HB3_8","HB3_9","HB3_12","HB3_13","HB3_15","HB4_1","HB4_7","HB5_11","HB5_12","HB6_9","HB6_10","HB6_11","HB6_12","HB7_4","HB9_20","HB10_25","HB10_29","HB10_32","HB10_34","HB10_35","HB10_36","HB12_3","HB12_4","HB12_5","HB12_7","HB12_8","HB12_12","HB12_13","HB12_14","HB12_17","HB12_18","HB12_22","HB12_25","HB13_2","HB13_3","HB13_7","HB13_9","HB13_16","HB13_17","HB13_18","HB13_19","HB13_21","HB13_22","HB13_23","HB13_24","HB13_25",
"JM1_2","JM1_3","JM1_4","JM1_5","JM1_16","JM1_19","JM1_21","JM1_22","JM2_1","JM2_2","JM2_3","JM2_4","JM2_5","JM2_6","JM2_7","JM2_8","JM2_9","JM2_12","JM2_16","JM2_24","JM3_1","JM3_13","JM3_14","JM4_1","JM4_2","JM4_3","JM4_4","JM4_5","JM4_7","JM4_8","JM4_9","JM4_10","JM4_11","JM4_14","JM4_15","JM4_16","JM5_1","JM5_2","JM5_3","JM5_4","JM5_5","JM5_6","JM5_7","JM5_8","JM5_9","JM5_10","JM5_11","JM5_12","JM5_13","JM5_14","JM5_16","JM5_19",
"P11_2","P11_4","P11_6","P11_7","P11_8","P11_9","P11_10","P11_12","P11_13","P11_14","P11_15","P11_16","P11_17","P11_18","P11_20","P11_21","P11_22","P11_25","P12_2","P12_3","P12_5","P12_7","P12_9","P12_12","P12_13","P12_17","P12_20","P12_21","P12_24","P12_25","P13_2","P13_6","P13_7","P13_9","P13_13","P13_14","P13_15","P13_16","P13_18","P13_21","P14_1","P14_4","P14_7","P14_12","P14_13","P14_14","P14_15","P15_1","P15_2","P15_4","P15_5","P15_6","P15_7","P15_8","P15_9","P15_10","P15_12","P15_13","P15_14",
"P21_2","P21_4","P21_5","P21_8","P21_10","P21_11","P21_12","P21_13","P21_15","P21_16","P21_19","P22_1","P22_3","P22_13","P23_1","P23_2","P23_8","P23_9","P23_11","P23_14","P23_15","P23_17","P23_18",
"J11_2","J11_3","J11_5","J12_1","J12_7","J12_8","J12_12","J12_13","J12_14","J12_15","J12_18","J12_20","J12_21","J12_24","J12_26","J12_27","J12_28","J12_29","J13_1","J13_5","J13_7","J13_11","J13_13","J13_15","J14_1","J14_2","J14_3","J14_4","J15_13","J15_21",
"J21_6","J21_8","J21_10","J21_12",
"JD1_2","JD1_3","JD1_5","JD1_12","JD1_17","JD1_18","JD1_20","JD1_21","JD1_22","JD1_23","JD1_24",
"RV1_4","RV1_9","RV2_10","RV2_13","RV2_23","RV2_24","RV2_25","RV6_16","RV7_3","RV11_12","RV12_12","RV14_7","RV16_1","RV18_4","RV18_6","RV18_7","RV18_20","RV19_5","RV19_17","RV19_18","RV22_16"	]
};

/*
x click off dropdowns
x hebrew morphology
- multi-select morphology
- Strong's selector
- TYPE: [Any Text, Greek, Hebrew]
*/

sofia.config = $.extend(sofia.config, {

	enableVisualFilters: true

});



/**
 * Highlights words based on morphological data
 *
 * @author John Dyer (http://j.hn/)
 */

var VisualFilters = function(node) {

	if (!sofia.config.enableVisualFilters) {
		return;
	}


	var
		settingsKey = 'docs-config-visualfilters',

		filtersWindow = new MovableWindow(550,290).hide(),

		defaultSettings = {
			transforms: [

				// underline Jesus in red
				{
					active: false,
					strongs: 'G2424',
					morphType: '',
					morph: '',
					styleLabel: 'Red Underline',
					style: 'border-bottom: solid 1px #ff3333'
				},

				// aorist verbs in blue
				{
					active: false,
					strongs: '',
					morphType: 'robinson',
					morph: 'V-A',
					styleLabel: 'Blue Text',
					style: 'color: #3333cc'
				},

				// proper names in gray
				{
					active: false,
					strongs: '',
					morphType: 'morphbh',
					morph: 'Np',
					styleLabel: 'Gray Text',
					style: 'color: #999999'
				}

			]
		},
		visualSettings = AppSettings.getValue(settingsKey, defaultSettings),

		visualNode = $('<div id="visualfilters-config">' +

							'<input type="button" value="New Filter" />' +

							'<table>' +
								'<thead>' +
									'<tr>' +
										'<th class="visualfilters-active"></th>' +
										'<th class="visualfilters-strongs i18n" data-i18n="[html]plugins.visualfilters.strongsnumber"></th>' +
										'<th class="visualfilters-morph i18n" data-i18n="[html]plugins.visualfilters.morphology">Morphology</th>' +
										'<th class="visualfilters-style i18n" data-i18n="[html]plugins.visualfilters.style">Style</th>' +
										'<th class="visualfilters-example"></th>' +
										'<th class="visualfilters-remove"></th>' +
									'</tr>' +
								'</thead>' +
								'<tbody>' +
								'</tbody>' +
							'</table>' +

						'</div>')
						.appendTo( filtersWindow.body ),

		stylesSelector = new StylesSelector(),

		morphSelector = new MorphologySelector(),

		tbody = visualNode.find('tbody'),

		addRowButton = visualNode.find('input')
									.on('click', function() {
										var row = createRow();
										tbody.append(row);
									}),

		openVisualizationsButton = $('<span class="config-button i18n" data-i18n="[html]plugins.visualfilters.button" id="config-visualfilters-button"></span>')
						.appendTo( $('#config-tools .config-body') );

	//console.log('LOADED VIZ',visualSettings);

	// Attach to Config pane

	//filtersWindow.title.html('Visual Filters');
	filtersWindow.title
				.addClass('i18n')
				.attr('data-i18n','[html]plugins.visualfilters.title')

	openVisualizationsButton.on('click', function() {

		filtersWindow.show().center();

		openVisualizationsButton.closest('.window-overlay').hide();

	});

	// ROWS
	tbody.on('click', '.visualfilters-remove', function() {

		// remove row

		$(this).closest("tr").remove();

		saveTransforms();

		VisualTransformer.resetTransforms(visualSettings);
	});

	tbody.on('change keyup', '.visualfilters-active input, .visualfilters-morph select, .visualfilters-strongs input, .visualfilters-morph input', function() {
		//updateExamples();

		saveTransforms();

		VisualTransformer.resetTransforms(visualSettings);
	});

	// STYLE
	var activeSpan = null;
	filtersWindow.body.on('click', '.visualfilters-style span', function(e) {
		e.preventDefault();
		morphSelector.hide();

		if (stylesSelector.is(':visible') && activeSpan != null && activeSpan[0] == $(this)[0]) {
			stylesSelector.hide();
			return;
		}

		activeSpan = $(this);

		stylesSelector
			.css({scrollTop: 0, top: activeSpan.offset().top + activeSpan.outerHeight(true), left: activeSpan.offset().left  })
			.show();

		return false;
	});

	stylesSelector.on('click', 'div', function() {


		var div = $(this);

		stylesSelector.hide();

		if (activeSpan != null) {

			var newStyle = div.find('span'),
				newStyleParams = newStyle.attr('data-style'),
				newStyleLabel = newStyle.html();

			console.log('new style', newStyleParams);

			// add to data
			activeSpan
				.attr('data-style', newStyleParams)
				.html(newStyleLabel);

			// actually style it
			activeSpan.attr('style','');
			VisualTransformer.applyStyle(activeSpan, newStyleParams);


			saveTransforms();

			VisualTransformer.resetTransforms(visualSettings);
		}

		return false;

	});

	filtersWindow.container.find('.close-button').on('click', function() {
		stylesSelector.hide();
		morphSelector.hide();
	});


	// morph
	filtersWindow.body.on('click', '.visualfilters-morph input', function(e) {
		e.preventDefault();
		stylesSelector.hide();

		//morphSelector.attach( $(this) );
		var input = $(this);


		if (morphSelector.is(':visible') && morphSelector.currentInput != null && morphSelector.currentInput[0] == input[0]) {
			morphSelector.hide();
			return false;
		}

		morphSelector.css({
			top: input.offset().top + input.outerHeight(),
			left: input.offset().left
		});

		morphSelector.show();

		morphSelector.currentInput = input;
		morphSelector.setMorphology( input.siblings('select').val() );
		morphSelector.updateMorphSelector( input.val() );



		return false;
	});

	morphSelector.on('update', function(value) {
		saveTransforms();

		VisualTransformer.resetTransforms(visualSettings);
	});

	// this will be cancelled if the user clicks in an input
	filtersWindow.body.on('click', function(e) {

		if (morphSelector.is(':visible')) {
			morphSelector.hide();
		}

		if (stylesSelector.is(':visible')) {
			stylesSelector.hide();
		}
	});



	// DRAW!

	function drawTransforms() {
		tbody.empty();

		for (var i=0, il=visualSettings.transforms.length; i<il; i++) {
			var row = createRow(),
				transform = visualSettings.transforms[i];

			row.find('.visualfilters-active input').prop('checked', transform.active);
			row.find('.visualfilters-strongs input').val(transform.strongs);
			row.find('.visualfilters-morph input').val(transform.morph);
			row.find('.visualfilters-morph select').val(transform.morphType);
			row.find('.visualfilters-style span')
						.html(transform.styleLabel)
						.attr('data-style', transform.style);

			VisualTransformer.applyStyle( row.find('.visualfilters-style span'), transform.style);

			tbody.append(row);
		}
	}


	function createRow() {

		return $(
			'<tr>' +
				'<td class="visualfilters-active">' +
					'<input type="checkbox" checked />' +
				'</td>' +
				'<td class="visualfilters-strongs">' +
					'<input type="text" placeholder="G2424, H234" />' +
				'</td>' +
				'<td class="visualfilters-morph">' +
					'<select>' +
						'<option value="morphhb">Hebrew</option>' +
						'<option value="robinson">Greek</option>' +
					'</select>' +
					'<input type="text" placeholder="V-A?" />' +
				'</td>' +
				'<td class="visualfilters-style">' +
					'<span>Choose...</span>' +
				'</td>' +
				'<td class="visualfilters-remove">' +
					'<span class="close-button"></span>' +
				'</td>' +
			 '</tr>');
	}

	function saveTransforms() {

		// clear
		visualSettings.transforms = [];

		tbody.find('tr').each(function() {
			var row = $(this),
				transform = {};

			transform.active = row.find('.visualfilters-active input').is(':checked');
			transform.strongs = row.find('.visualfilters-strongs input').val();
			transform.morph = row.find('.visualfilters-morph input').val();
			transform.morphType = row.find('.visualfilters-morph select').val();
			transform.style = row.find('.visualfilters-style span').attr('data-style');
			transform.styleLabel = row.find('.visualfilters-style span').html();

			//console.log('saving', transform.style, row.find('.visualfilters-style span').prop('data-style'));


			if (transform.morph != '') {

				if (transform.morphType == 'robinson') {
					transform.morphRegExp = new RegExp('^' + transform.morph.replace(/\?/gi,'.{1}'), 'gi');
				} else if (transform.morphType == 'morphhb') {
					transform.morphRegExp = new RegExp(
								'(^H' + transform.morph.replace(/\?/gi,'.{1}') + ')|'+
								'(/' + transform.morph.replace(/\?/gi,'.{1}') + ')', 'gi');
				}
			} else {
				transform.morphRegExp = null;
			}

			visualSettings.transforms.push(transform);
		});

		//console.log('saving', visualSettings);

		// store for next load
		AppSettings.setValue(settingsKey, visualSettings);
	}




	// global object
	var ext = {
		sendMessage: function() {}
	};
	ext = $.extend(true, ext, EventEmitter);


	ext.on('message', function(e) {
		if (e.data.messagetype == 'textload') {

			var lang = e.data.content.attr('lang'),
				validLangs = ['heb','gre','grc', 'eng'];

			if (validLangs.indexOf(lang) > -1) {

				VisualTransformer.runTransforms(e.data.content, visualSettings);
			}
		}
	});

	// START UP
	drawTransforms();
	saveTransforms();


	return ext;
}

sofia.plugins.push('VisualFilters');


var VisualTransformer = (function() {


	function resetTransforms(visualSettings) {
		// remove all inline styles
		$('l').attr('style','');

		// re-run on existing chapters
		$('.section').each(function() {
			runTransforms( $(this), visualSettings);
		});
	}

	function runTransforms(sectionNode, visualSettings) {
		if (visualSettings.transforms.length === 0)
			return;

		var sectionLang = sectionNode.attr('lang');

		sectionNode.find('l').each(function(index, node) {

			var word = $(this);

			for (var i=0, il=visualSettings.transforms.length; i<il; i++) {
				var transform = visualSettings.transforms[i],
					isMatch = false;

				if (!transform.active) {
					continue;
				}



				// strongs number
				if (transform.strongs != '') {

					if (word.attr('s') == transform.strongs) {
						//applyStyle(word, transform.style);

						isMatch = true;

					} else {

						continue;
					}
				}

				// morphology
				if (transform.morph != '') {

					// sectionLang == transform.morphType &&
					if (transform.morphRegExp && transform.morphRegExp != null) {
						var wordMorphData = word.attr('m');

						if (wordMorphData != null && transform.morphRegExp.test(wordMorphData)) {
							//applyStyle(word, transform.style);

							isMatch = true;
						} else {

							continue;
						}
					}
				}

				if (isMatch) {
					applyStyle(word, transform.style);
				}


				/*
						break;
					case 'frequency':

						if (transform.data  > 0) {
							var strongs = w.attr('data-lemma');

							if (strongs != null ) {

								// run all possible strongs on this word or phrase
								strongs = strongs.split(' ');
								for (var j=0, jl=strongs.length; j<jl; j++) {
									var freq = (typeof strongsGreekFrequencies != 'undefined') ? strongsGreekFrequencies[ strongs[j] ] : 0;

									if (freq > 0 && freq <= transform.data) {
										applyStyle(w, transform.style);
									}
								}
							}
						}


						break;
					*/

			}

		});
	}

	function applyStyle(node, css) {

		if (typeof css == 'undefined' || css == null || css == '') {
			return;
		}


		var props = css.split(';');

		for (var i=0, il=props.length; i<il; i++) {

			var parts = props[i].split(':');

			if (parts.length === 2) {
				node.css(parts[0], parts[1]);
			}
		}
	}


	return {
		resetTransforms: resetTransforms,
		runTransforms: runTransforms,
		applyStyle: applyStyle
	};

})();




var MorphologySelector = function(parent) {
	// morph selector
	var currentMorphologyKey = 'robinson',

		robinsonElements = {

		"nounCase": {
					breakBefore: true,
					declension : 'Case',
					parts :  [
						{
							letter : 'N',
							type : 'Nominative'
						},
						{
							letter : 'A',
							type : 'Accusative'
						},
						{
							letter : 'D',
							type : 'Dative'
						},
						{
							letter : 'G',
							type : 'Genative'
						},
						{
							letter : 'V',
							type : 'Vocative'
						}
					]
				},

		"number": {
					declension : 'Number',
					parts :  [
						{
							letter : 'P',
							type : 'Plural'
						},
						{
							letter : 'S',
							type : 'Singular'
						}
					]
				},
		"gender":{
					declension : 'Gender',
					parts :  [
						{
							letter : 'F',
							type : 'Feminine'
						},
						{
							letter : 'M',
							type : 'Masculine'
						},
						{
							letter : 'N',
							type : 'Nueter'
						}
					]
				},


		"verbTense": {
					breakBefore: true,
					declension : 'Tense',
					parts :  [
						{
							letter : 'A',
							type : 'Aorist'
						},
						{
							letter : 'F',
							type : 'Future'
						},
						{
							letter : 'I',
							type : 'Imperfect'
						},
						{
							letter : 'R',
							type : 'Perfect'
						},
						{
							letter : 'L',
							type : 'Pluperfect'
						},
						{
							letter : 'P',
							type : 'Present'
						}
					]
				},
		"verbVoice":		{
					declension : 'Voice',
					parts :  [
						{
							letter : 'A',
							type : 'Active'
						},
						{
							letter : 'M',
							type : 'Middle'
						},
						{
							letter : 'P',
							type : 'Passive'
						}
					]
				},
		"verbMood":		{
					declension : 'Mood',
					parts :  [
						{
							letter : 'I',
							type : 'Indicative'
						},
						{
							letter : 'S',
							type : 'Subjunctive'
						},
						{
							letter : 'O',
							type : 'Optative'
						},
						{
							letter : 'M',
							type : 'Imperative'
						},
						{
							letter : 'N',
							type : 'Infinitive'
						},
						{
							letter : 'P',
							type : 'Participle'
						}
					]
				}
				,
		"person": {
					declension : 'Person',
					breakBefore: true,
					parts :  [
						{
							letter : '1',
							type : '1st Person'
						},
						{
							letter : '2',
							type : '2nd Person'
						},
						{
							letter : '3',
							type : '3rd Person'
						}
					]
				}

		},

		morphhbElements = {
			"nounTypes":{
					declension : 'Type',
					parts :  [
						{
							letter : 'c',
							type : 'Common'
						},
						{
							letter : 'g',
							type : 'Gentilic'
						},
						{
							letter : 'p',
							type : 'Proper name'
						}
					]
				},

			"person": {
					declension : 'Person',
					breakBefore: true,
					parts :  [
						{
							letter : '1',
							type : '1st Person'
						},
						{
							letter : '2',
							type : '2nd Person'
						},
						{
							letter : '3',
							type : '3rd Person'
						}
					]
				},
			"number": {
					declension : 'Number',
					parts :  [
						{
							letter : 'p',
							type : 'Plural'
						},
						{
							letter : 's',
							type : 'Singular'
						}
						,
						{
							letter : 'd',
							type : 'Dual'
						}
					]
				},
			"state":{
					declension : 'State',
					parts :  [
						{
							letter : 'a',
							type : 'Absolute'
						},
						{
							letter : 'c',
							type : 'Construct'
						},
						{
							letter : 'd',
							type : 'Determined'
						}
					]
				},
			"nounGender":{
					declension : 'Gender',
					parts :  [
						{
							letter : 'f',
							type : 'Feminine'
						},
						{
							letter : 'm',
							type : 'Masculine'
						},
						{
							letter : 'b',
							type : 'Both'
						}
					]
				},
			"verbGender":{
					declension : 'Gender',
					parts :  [
						{
							letter : 'f',
							type : 'Feminine'
						},
						{
							letter : 'm',
							type : 'Masculine'
						},
						{
							letter : 'c',
							type : 'Common'
						}
					]
				},

			verbStem: {
				declension : 'Stem',
				parts :  [
					{
						letter: 'q',
						type: 'qal',
					},
					{
						letter: 'N',
						type: 'niphal',
					},
					{
						letter: 'p',
						type: 'piel',
					},
					{
						letter: 'P',
						type: 'pual',
					},
					{
						letter: 'h',
						type: 'hiphil',
					},
					{
						letter: 'H',
						type: 'hophal',
					},
					{
						letter: 't',
						type: 'hithpael',
					},
					{
						letter: 'o',
						type: 'polel',
					},
					{
						letter: 'O',
						type: 'polal',
					},
					{
						letter: 'r',
						type: 'hithpolel',
					},
					{
						letter: 'm',
						type: 'poel',
					},
					{
						letter: 'M',
						type: 'poal',
					},
					{
						letter: 'k',
						type: 'palel',
					},
					{
						letter: 'K',
						type: 'pulal',

					},
					{
						letter: 'Q',
						type: 'qal passive',
					},
					{
						letter: 'l',
						type: 'pilpel',
					},
					{
						letter: 'L',
						type: 'polpal',
					},
					{
						letter: 'f',
						type: 'hithpalpel',
					},
					{
						letter: 'D',
						type: 'nithpael',
					},
					{
						letter: 'j',
						type: 'pealal',
					},
					{
						letter: 'i',
						type: 'pilel',
					},
					{
						letter: 'u',
						type: 'hothpaal',
					},
					{
						letter: 'c',
						type: 'tiphil',
					},
					{
						letter: 'v',
						type: 'hishtaphel',
					},
					{
						letter: 'w',
						type: 'nithpalel',
					},
					{
						letter: 'y',
						type: 'nithpoel',
					},
					{
						letter: 'z',
						type: 'hithpoel'
					}
				]
			},

			verbType: {
				declension : 'Type',
				parts :  [
					{
						letter: 'p',
						type: 'perfect (qatal)',
					},
					{
						letter: 'q',
						type: 'sequential perfect (weqatal)',
					},
					{
						letter: 'i',
						type: 'imperfect (yiqtol)',
					},
					{
						letter: 'w',
						type: 'sequential imperfect (wayyiqtol)',
					},
					{
						letter: 'h',
						type: 'cohortative',
					},
					{
						letter: 'j',
						type: 'jussive',
					},
					{
						letter: 'v',
						type: 'imperative',
					},
					{
						letter: 'r',
						type: 'participle active',
					},
					{
						letter: 's',
						type: 'participle passive',
					},
					{
						letter: 'a',
						type: 'infinitive absolute',
					},
					{
						letter: 'c',
						type: 'infinitive construct'
					}
					]
			},

			verbVoices: {
					declension : 'Voice',
					parts :  [
						{
							letter: 'A',
							type: 'active'
						},
						{
							letter: 'M',
							type: 'middle'
						},
						{
							letter: 'P',
							type: 'passive'
						},
						{
							letter: 'E',
							type: 'middle or passive'
						},
						{
							letter: 'D',
							type: 'middle deponent'
						},
						{
							letter: 'O',
							type: 'passive deponent'
						},
						{
							letter: 'N',
							type: 'middle or passive deponent'
						},
						{
							letter: 'Q',
							type: 'impersonal active'
						},
						{
							letter: 'X',
							type: 'no voice'
						}
					]
			},

			verbMoods: {
				declension : 'Mood',
				parts :  [
					{
						letter: 'I',
						type: 'indicative'
					},
					{
						letter: 'S',
						type: 'subjunctive'
					},
					{
						letter: 'O',
						type: 'optative'
					},
					{
						letter: 'M',
						type: 'imperative'
					},
					{
						letter: 'N',
						type: 'infinitive'
					},
					{
						letter: 'P',
						type: 'participle'
					},
					{
						letter: 'R',
						type: 'imperative participle'
					}
				]
			}
		},


		morphologies = {
			"robinson":
			[
				{
					letter : 'N',
					type : 'Noun',
					declensions : [
						robinsonElements.nounCase,
						robinsonElements.number,
						robinsonElements.gender
					]
				},
				{
					letter : 'V',
					type : 'Verb',
					declensions : [
						robinsonElements.verbTense,
						robinsonElements.verbVoice,
						robinsonElements.verbMood,
						robinsonElements.person,
						robinsonElements.number
					]
				}
			],
			"morphhb": [
				{
					letter : 'N',
					type : 'Noun',
					declensions : [
						morphhbElements.nounTypes,
						morphhbElements.nounGender,
						morphhbElements.number,
						morphhbElements.state
					]
				},
				{
					letter : 'V',
					type : 'Verb',
					declensions : [
						morphhbElements.verbStem,
						morphhbElements.verbType,
						morphhbElements.person,
						morphhbElements.number,
						morphhbElements.verbGender,
						morphhbElements.state
					]
				}
			]
		},
		currentMorphology = morphologies[currentMorphologyKey];


	var
		morphSelector = $('<div class="morph-selector"><table>' +
			'<thead>' +
				'<tr><th>Part of Speech</th></tr>' +
			'</thead>' +
			'<tbody>' +
				'<tr></tr>' +
			'</tbody>' +
			'</table></div>')
				.appendTo( $(document.body) )
				.hide(),

		morphSelectorTimer = null,

		startMorphSelectorTimer = function() {
			stopMorphSelectorTimer();

			morphSelectorTimer = setTimeout(function() {
				morphSelector.hide();
			}, 1000);
		},
		stopMorphSelectorTimer = function() {
			if (morphSelectorTimer != null) {
				clearTimeout(morphSelectorTimer);
				morphSelectorTimer = null;
			}
		};
	/*
	morphSelector
		.on('mouseleave', function() {
			startMorphSelectorTimer();
		})
		.on('mouseover', function() {
			stopMorphSelectorTimer();
		});
	*/


	// find table parts
	var morphSelectorHeaderRow = morphSelector.find('thead tr'),
		morphSelectorMainRow = morphSelector.find('tbody tr'),
		morphSelectorPOS = $('<td class="morph-pos"></td>').appendTo(morphSelectorMainRow);



	function setMorphology(value) {
		currentMorphologyKey = value;
		currentMorphology = morphologies[currentMorphologyKey];

		drawPartsOfSpeech();
	}

	function drawPartsOfSpeech() {

		//console.log('drawing', currentMorphology);

		morphSelectorPOS.empty();

		// add parts of speech
		for (var i=0, il=currentMorphology.length; i<il; i++) {
			morphSelectorPOS.append(
				$('<span data-value="' + currentMorphology[i].letter + '">' + currentMorphology[i].type + '</span>')
			);
		}

		drawSelectedPartOfSpeech();

	}
	// do first one
	drawPartsOfSpeech();

	function updateMorphSelector(value) {

		if (value.length == 0) {
			morphSelector.find('span').removeClass('selected');
			drawSelectedPartOfSpeech();
			return;
		}

		var firstChar = value.substring(0,1);

		// select it
		var partOfSpeechSpan = morphSelectorPOS.find('span[data-value="' + firstChar + '"]');

		if (partOfSpeechSpan.length > 0) {
			partOfSpeechSpan.addClass('selected')
				.siblings()
					.removeClass('selected');

			drawSelectedPartOfSpeech();

			// do the rest of the characters one by one
			if (value.length > 1) {
				var remainder = value.substr(1);
				if (remainder.substr(0,1) == '-') {
					remainder = remainder.substr(1);
				}

				for (var i=0, il=remainder.length; i<il; i++) {
					var letter = remainder[i];

					morphSelectorMainRow
						.find('td:nth-child(' + (i+2) + ')')
						.find('span[data-value="' + letter + '"]')
							.addClass('selected');
				}
			}
		}
	}

	function drawSelectedPartOfSpeech() {

		// clear out headers
		morphSelectorHeaderRow.find('th').first()
			.siblings()
			.remove();

		// clear out the main declensions
		morphSelectorMainRow.find('td').first()
			.siblings()
			.remove();

		// find whatever is selected
		var selectedSpan = morphSelectorPOS.find('.selected'),
			selectedValue = selectedSpan.attr('data-value');

		if (selectedSpan.length == 0) {
			return;
		}

		// find part of speech
		var partOfSpeech = null;
		for (var i=0, il=currentMorphology.length; i<il; i++) {
			if (currentMorphology[i].letter === selectedValue) {
				partOfSpeech = currentMorphology[i];
				break;
			}
		}

		// now make the new siblings
		for (var i=0, il=partOfSpeech.declensions.length; i<il; i++) {
			// create td
			//var td = $('<td />').appendTo( selectedSpan.closest('tr') );
			var declension = partOfSpeech.declensions[i],
				td = $('<th>' + declension.declension + '</th>').appendTo( morphSelectorHeaderRow );
				td = $('<td />').appendTo( selectedSpan.closest('tr') );

			for (var j=0, jl=declension.parts.length; j<jl; j++) {
				$('<span data-value="' + declension.parts[j].letter + '"' + (declension.breakBefore ? ' data-breakbefore="true"' : '') + '>' + declension.parts[j].type + '</span>')
					.appendTo(td);
			}
		}

		morphSelector.height( morphSelector.find('table').height() );
	}

	// selecting a span
	morphSelector.on('click', 'span', function() {
		var selectedSpan = $(this),
			selectedValue = selectedSpan.attr('data-value');


		// select or delect a class
		if (selectedSpan.hasClass('selected')) {

			selectedSpan
				.removeClass('selected')

		} else {

			selectedSpan
				.addClass('selected')
				.siblings()
					.removeClass('selected');

		}

		// redraw the parts if needed
		if (selectedSpan.closest('td').hasClass('morph-pos')) {
			drawSelectedPartOfSpeech();
		}


		// push new value to input
		var selector = '',
			lastPartOfSpeechWithSelection = -1;

		// first see what the last position with a selected value is
		// [Verb] [ ] [ ] [Subjunctive] == 3
		selectedSpan.closest('tr').find('td').each(function(index, node) {
			var td = $(this),
				selectedDeclension = td.find('span.selected');

			// if something is selected then mark it
			if (selectedDeclension.length > 0) {
				lastPartOfSpeechWithSelection = index;
			}
		});

		// construct the text input from the selected positions
		selectedSpan.closest('tr').find('td').each(function(index, node) {

			var td = $(this),
				selectedDeclension = td.find('span.selected'),
				includeBreak = td.find('span').first().attr('data-breakbefore') == "true";

			// if nothing selected add ? but only if there is something after it
			if (selectedDeclension.length == 0) {
				if (index <= lastPartOfSpeechWithSelection) {
					selector += (includeBreak ? '-' : '') + '?';
				}
			} else {
				selector += (includeBreak ? '-' : '') + selectedDeclension.attr('data-value');
			}
		});


		if (morphSelector.currentInput != null) {
			morphSelector.currentInput.val(selector);
		}

		//saveTransforms();
		//resetTransforms();

		morphSelector.trigger('update', selector);
	});

	morphSelector.updateMorphSelector = updateMorphSelector;
	morphSelector.setMorphology = setMorphology;
	morphSelector.currentInput = null;

	return morphSelector;
};


var StylesSelector = function() {
	var selector = $('<div id="visualfilters-styles"></div>')
					.appendTo( $(document.body) )
					.hide();


	// STYLES GUIDE
	// create styles
	var
		textColors = 			['#999999', '#ff3333',	'#33cc33',	'#3333cc"',	'#ffcc33',	'#ff33ff',	'#33ffff'],
		textColorNames = 		['Gray', 	'Red',		'Green',	'Blue',		'Orange', 	'Magenta',	'Cyan'],
		backgroundColors = 		['#ccccccc','#ff9999',	'#99ff99',	'#9999ff"',	'#ffcc33',	'#ffff33',	'#ff99ff',	'#99ffff'],
		backgroundColorNames = 	['Gray', 	'Red',		'Green',	'Blue',		'Orange', 	'Yellow',	'Magenta',	'Cyan'],

		styleCss = [],
		styleNames = []
		;


	// text
	for (var i=0, il=textColors.length; i<il; i++) {
		styleCss.push('color: ' + textColors[i] + ';');
		styleNames.push(textColorNames[i] + ' Text');
	}

	// highlight
	for (var i=0, il=backgroundColors.length; i<il; i++) {
		styleCss.push('background-color: ' + backgroundColors[i] + ';');
		styleNames.push(backgroundColorNames[i] + ' Highlight');
	}

	// underline
	for (var i=0, il=textColors.length; i<il; i++) {
		styleCss.push('border-bottom: solid 1px ' + textColors[i] + ';');
		styleNames.push(textColorNames[i] + ' Underline');
	}

	// custom
	styleCss.push('color:red;text-shadow:yellow 0 0 2px;');
	styleNames.push('Fire');

	styleCss.push('text-shadow:0 0 1px gray;');
	styleNames.push('Shadow');

	styleCss.push('font-weight: bold;');
	styleNames.push('Bold');

	styleCss.push('border: 2px dashed #333;');
	styleNames.push('Dashed Box');

	styleCss.push('text-transform: uppercase;');
	styleNames.push('Capitalize');

	styleCss.push('font-variant: small-caps;');
	styleNames.push('Small Caps');


	// draw styles
	for (var i=0, il=styleCss.length; i<il; i++) {
		selector.append(
			$('<div><span data-style="' + styleCss[i] + '" style="' + styleCss[i] + '">' + styleNames[i] + '</span></div>')
		);
	}

	return selector;
}



var CrossReferencePopupPlugin = function(app) {

	if (!sofia.config.enableNotesPopupPlugin) {
		return;
	}

	var referencePopup = new InfoWindow('CrossReferencePopup');

	referencePopup.container.css({zIndex: 1000});

	function getFragmentidFromNode(node) {
		var possibleTexts = [node.attr('data-id'), node.attr('title'), node.html()],
			fragmentid = null;

		for (var i=0, il=possibleTexts.length; i<il; i++) {
			var text = possibleTexts[i];

			if (typeof text != 'undefined' && text != null) {
				var bref = new bible.Reference(text.split(';')[0].trim());
				if (typeof bref.toSection != 'undefined') {
					fragmentid = bref.toSection();

					break;
				}
			}

		}

		return fragmentid;
	}

	sofia.globals.handleBibleRefClick = function(e) {
		var link = $(this),
			newfragmentid = getFragmentidFromNode(link);

		// where are we?
		var currentLocationData = PlaceKeeper.getFirstLocation();

		// store the current one
		TextNavigation.locationChange(currentLocationData.fragmentid);


		if (newfragmentid != null && newfragmentid != '') {

			TextNavigation.locationChange(newfragmentid);

			ext.trigger('globalmessage', {
								type: 'globalmessage',
								target: this,
								data: {
									messagetype:'nav',
									type: 'bible',
									locationInfo: {
										fragmentid: newfragmentid,
										sectionid: newfragmentid.split('_')[0],
										offset: 0
									}
								}
							});
		}
	};


	sofia.globals.handleBibleRefMouseover = function(e, textid) {
		var link = $(this),
			fragmentid = getFragmentidFromNode(link);

		if (fragmentid != null) {

			var sectionid = fragmentid.split('_')[0];

			if (typeof textid == 'undefined') {

				if (link.closest('.section').hasClass('commentary')) {

					textid = $('.BibleWindow:first .section:first').attr('data-textid');

				} else {
					textid = link.closest('.section').attr('data-textid');
				}
			}


			console.log('hover', textid, sectionid, fragmentid);

			TextLoader.getText(textid, function(textInfo) {

				TextLoader.loadSection(textInfo, sectionid, function(contentNode) {

					var verse = contentNode.find('.' + fragmentid),
						html = '';

					verse.find('.note').remove();

					verse.each(function() {
						html += $(this).html();
					});


					referencePopup.body.html( html );
					referencePopup.show();
					referencePopup.position(link);

				});
			});

		}
	}

	sofia.globals.handleBibleRefMouseout = function(e) {

		referencePopup.hide();
	}


	$('.windows-main').on('click','.bibleref, .xt', sofia.globals.handleBibleRefClick);

	if (!Detection.hasTouch) {
		$('.windows-main').on('mouseover','.bibleref, .xt', sofia.globals.handleBibleRefMouseover);
		$('.windows-main').on('mouseout','.bibleref, .xt', sofia.globals.handleBibleRefMouseout);
	}


	var ext = {
		getData: function() {
			return null;
		}
	};
	ext = $.extend(true, ext, EventEmitter);

	return ext;
};

sofia.plugins.push('CrossReferencePopupPlugin');

sofia.config = $.extend(sofia.config, {

	enableNotesPopupPlugin: true

});

var NotesPopupPlugin = function(app) {

	if (!sofia.config.enableNotesPopupPlugin) {
		return;
	}

	var notesPopup = new InfoWindow('NotesPopup');

	notesPopup.body.on('click', '.bibleref, .xt', function(e) {

		sofia.globals.handleBibleRefClick.call(this, e);

		notesPopup.hide();

	});


	if (!Detection.hasTouch) {
		notesPopup.body.on('mouseover', '.bibleref, .xt', function(e) {
			sofia.globals.handleBibleRefMouseover.call(this, e, $(notesPopup.currentWord).closest('.section').attr('data-textid') );
		});

		notesPopup.body.on('mouseout', '.bibleref, .xt', function(e) {
			sofia.globals.handleBibleRefMouseout.call(this, e);
		});
	}

	$('.windows-main').on('click','.note .key, .cf .key', function(e) {

		e.preventDefault();

		console.log('notes');

		var key = $(this);


		// hide if second click
		if (notesPopup.container.is(':visible') && notesPopup.currentWord == this) {
			notesPopup.hide();
			notesPopup.currentWord == null;
			return;
		}
		notesPopup.currentWord = this;

		// clone and attach content
		var content = key.parent().find('.text').clone();

		notesPopup.body
					.html('')
					.append(content);

		// show popup
		notesPopup.show();
		notesPopup.position(key);

		return false;
	});



	var ext = {
		getData: function() {
			return null;
		}
	};
	ext = $.extend(true, ext, EventEmitter);

	return ext;
};

sofia.plugins.push('NotesPopupPlugin');

sofia.config = $.extend(sofia.config, {
	// Google Analytics key
	gaKey: '',

	// Google URL
	gaUrl: ''
});


var GoogleAnalyticsPlugin = function(app) {

	/*
	(function(i,s,o,g,r,a,m){

		i['GoogleAnalyticsObject']=r;
		i[r]= i[r]|| function(){
			(i[r].q = i[r].q || [] ).push(arguments)
		},
		i[r].l=1*new Date();

		a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];

		a.async=1;
		a.src=g;
		m.parentNode.insertBefore(a,m)
	})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

	ga('create', 'UA-3734687-19', 'inscript.org');
	ga('send', 'pageview');
	*/

	if (sofia.config.enableOnlineSources && sofia.config.gaKey && sofia.config.gaKey != '')	{
		loadGoogleAnalytics();
	}

	function loadGoogleAnalytics() {

		window['GoogleAnalyticsObject'] = 'ga';
		window['ga'] = window['ga'] || function() {
			(window['ga'].q = window['ga'].q || [] ).push(arguments)
		}
		window['ga'].l = 1*new Date();

		var script = document.createElement('script');
		var lastScript = document.getElementsByTagName('script')[0];

		script.async = true;
		script.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'www.google-analytics.com/analytics.js';
		lastScript.parentNode.insertBefore(script, lastScript);

		ga('create', sofia.config.gaKey, (sofia.config.gaUrl) ? sofia.config.gaUrl : '');
		ga('send', 'pageview');
	}


	// EVENT MODEL

	/*
	var ext = {
		sendMessage: function() {}
	};
	ext = $.extend(true, ext, EventEmitter);

	// listen for times when the user changes location
	ext.on('globalmessage', function(e) {

		console.log('GOOGLE', e.data);

		if (e.data.messagetype == 'usernav') {



			if (ga) {
				//ga('send', 'event', 'usernav', 'click', 'nav buttons', 4);
			}

		}

	});

	return ext;
	*/

	// DIRECT MODEL

	var analytics = {

		record: function(category, action, label, value) {

			//console.log('GOOGLE', arguments);

			if (sofia.config.enableOnlineSources && typeof ga != 'undefined') {
				ga('send', 'event', category, action, label, value);
			}

		}

	}

	sofia.analytics = analytics;

};

sofia.plugins.push('GoogleAnalyticsPlugin');

sofia.config = $.extend(sofia.config, {

	enableMediaLibraryPlugin: true

});

var MediaLibraryPlugin = function(app) {

	if (!sofia.config.enableMediaLibraryPlugin) {
		return;
	}

	var mediaLibraries = null,
		mediaPopup = new InfoWindow('mediapopup'),
		contentToProcess = [];

	//console.log('MediaLibraryPlugin startup', MediaLibrary.getMediaLibraries);

	MediaLibrary.getMediaLibraries(function(data) {
		mediaLibraries = data;

		setupMediaEvents();

		addMedia();
	});

	function setupMediaEvents() {

		// handle clicks
		$('.windows-main').on('click', '.mediathumb', function(e) {

			// determine what kind of media this is
			var
				icon = $(this),
				mediaFolder = icon.attr('data-mediafolder'),
				verse = icon.closest('.verse, .v'),
				verseid = verse.attr('data-id'),
				reference = new bible.Reference(verseid).toString(),
				mediaLibrary = null,
				mediaForVerse = null;

			// find library
			for (var i=0, il=mediaLibraries.length; i<il; i++ ) {
				var ml = mediaLibraries[i]

				if (ml.folder == mediaFolder) {
					mediaLibrary = ml;
					break;
				}

			}

			console.log('media click', mediaLibrary);


			mediaForVerse = mediaLibrary.data[verseid];

			switch (mediaLibrary.type) {

				case 'image':
					// clear it out!
					mediaPopup.body.html('');

					var html = '';
					for (var i=0, il=mediaForVerse.length; i<il; i++ ) {
						var mediaInfo = mediaForVerse[i],
							fullUrl = sofia.config.baseContentUrl + 'content/' + 'media/' + mediaLibrary.folder  + '/' + mediaInfo.filename + '.' + mediaInfo.exts[0],
							thumbUrl = fullUrl.replace('.jpg', '-thumb.jpg');

						html += '<li>' +
									'<a href="' + fullUrl + '" target="_blank">' +
										'<img src="' + thumbUrl + '" />' +
									'</a>' +
								'</li>';
					}

					mediaPopup.body.append('<strong>' + reference.toString() + '</strong>');
					mediaPopup.body.append($('<ul class="inline-image-library-thumbs">' + html + '</ul>'));


					//mediaPopup.center().show();
					mediaPopup.setClickTargets( [icon] );
					mediaPopup.position( icon ).show();

					break;

				case 'video':
					var mediaInfo = mediaForVerse[0],
						videoUrl = sofia.config.baseContentUrl + 'content/' + 'media/' + mediaLibrary.folder + '/' + mediaInfo.filename + '.' + mediaInfo.exts[0];

					sofia.globals.showVideo(videoUrl, mediaInfo.name);

					break;

				case 'jfm':

					var lang = icon.closest('.section').attr('data-lang3'),
						mediaInfo = mediaForVerse[0],
						videoUrl = JesusFilmMediaApi.getPlayer(lang, mediaInfo.filename, function(iframeUrl, iframeLang) {

							if (iframeUrl != null) {
								sofia.globals.showIframe(iframeUrl, mediaInfo.name + ' (' + iframeLang + (lang != iframeLang ? '/' + lang : '') + ')');
							}

						});

					break;

			}
		});

	}

	// process chapters, add image icon to verses
	function addMedia() {

		//console.log('addMedia',mediaLibraries);

		if (mediaLibraries == null) {
			return;
		}

		while (contentToProcess.length > 0) {
			var content = contentToProcess.pop();

			if (content.data('has-media') != undefined) {
				continue;
			}

			// add images to verses
			content.find('.verse, .v').each(function() {
				var verse = $(this),
					verseid = verse.attr('data-id');

				// make sure we're just doing the first verse
				verse = verse.closest('.section').find('.' + verseid).first();

				if (verseid == 'LK1_1') {
					// //console.log('check');
				}

				if (!verse.hasClass('has-media')) {
					// check all libraries
					for (var i=0, il=mediaLibraries.length; i<il; i++) {
						var mediaLibrary = mediaLibraries[i],
							iconClassName = mediaLibrary.iconClassName,
							mediaForVerse = mediaLibrary.data ? mediaLibrary.data[verseid] : undefined;

						// add media
						if (typeof mediaForVerse != 'undefined') {

							// check if it's already been added
							//if (verse.closest('.chapter').find('.' + verseid).find('.' + iconClassName).length == 0) {

								var icon = $('<span class="inline-icon ' + iconClassName + ' mediathumb" data-mediafolder="' + mediaLibrary.folder + '"></span>'),
									verseNumber = verse.find('.verse-num, v-num');

								if (verseNumber.length > 0) {
									verseNumber.after(icon);
								} else {
									icon.prependTo(verse);
								}
							//}
						}
					} // libraries loop


					verse.closest('.section').find('.' + verseid).addClass('has-media');

				}

			}); // verse loop



			content.data('has-media', true);

		} // while

	}

	mediaPopup.body.on('click', '.inline-image-library-thumbs a', sofia.globals.mediaImageClick);
	mediaPopup.body.on('click', '.inline-video-library-thumbs a', sofia.globals.mediaVideoClick);


	var ext = {};
	ext = $.extend(true, ext, EventEmitter);
	ext.on('message', function(e) {
		if (e.data.messagetype == 'textload' && e.data.type == 'bible') {
			//store
			contentToProcess.push(e.data.content);
			// run
			addMedia();
		}
	});

	return ext;
}

sofia.plugins.push('MediaLibraryPlugin');


var TextWindow = function(id, parent, init_data, text_type) {


	// detect backflip
	var
		ua = window.navigator.userAgent.toLowerCase(),
		supports3d = !(ua.indexOf('unix') > -1
						|| ua.indexOf('linux') > -1
						|| ua.indexOf('opera') > -1
						//|| ua.indexOf('msie') > -1
						//|| ua.indexOf('trident') > -1
						//|| ua.indexOf('explorer')  > -1
						);


	var
		container =
			$('<div class="scroller-container' + (supports3d ? ' supports-3d' : '') + '">'+
				'<div class="window-header scroller-header">'+
					'<div class="scroller-header-inner">'+
						//(Detection.hasTouch ? '<span class="header-input text-nav" ></span>' : '<input type="text" class="header-input text-nav" />') +
						'<input type="text" class="app-input text-nav" />' +
						'<div class="app-list text-list"></div>'+
						'<span class="header-icon info-button"></span>'+
						'<span class="header-icon audio-button"></span>'+
					'</div>'+
				'</div>'+
				'<div class="scroller-flipper">' +
					'<div class="scroller-main">' +
						'<div class="scroller-text-wrapper reading-text"><div class="loading-indicator" style="height:' + parent.node.height() + 'px;"></div></div>' +
					'</div>'+
					'<div class="scroller-info">Text info</div>' +
				'</div>' +
			'</div>').appendTo(parent.node),

		// dom nodes
		flipper = container.find('.scroller-flipper'),
		header = container.find('.scroller-header'),
		main = container.find('.scroller-main'),
		info = container.find('.scroller-info'),
		infoBtn = container.find('.info-button'),
		wrapper = container.find('.scroller-text-wrapper'),
		navui = header.find('.text-nav'),
		textlistui = header.find('.text-list'),

		// objects
		textChooser = sofia.globalTextChooser,
		textNavigator = sofia.globalTextNavigator,
		scroller = new Scroller(main),

		audioui = container.find('.audio-button'),
		audioController = new AudioController(id, container, audioui, scroller),

		// settings
		currentTextInfo = null,
		currentLocationInfo = null,
		hasFocus = false,
		isInitialized = false;


	/*
	if (Detection.hasTouch) {
		navui.prop('disabled',true);
	}
	*/



	infoBtn.on('click', function() {

		textChooser.hide();
		textNavigator.hide();

		flipper.toggleClass('showinfo');

		if (flipper.hasClass('showinfo')) {

			if (typeof currentTextInfo.aboutHtml != 'undefined') {

				var aboutDoc = $(currentTextInfo.aboutHtml);

				info.html('');
				info.append( aboutDoc );

			} else {

				sofia.ajax({
					dataType: 'text',
					url: 'content/texts/' + currentTextInfo.id + '/about.html',
					success: function(htmlString) {

						var breakTag = '<body',
							fixedHtml = htmlString.indexOf(breakTag) > -1 ?
												breakTag + htmlString.split(breakTag)[1] :
												'',
							aboutDoc = $(fixedHtml);

						info.html('');
						info.append( aboutDoc );

						// store for next time
						currentTextInfo.aboutHtml = fixedHtml;
					}
				});
			}
		}
	});


	textlistui
		.on('click', function(e) {

			//console.log('clicked');

			if (flipper.hasClass('showinfo')) {
				flipper.removeClass('showinfo')
			}

			// if this is selected, then toggle
			if (textChooser.getTarget() == textlistui) {
				textChooser.toggle();
			} else {
				textChooser.setTarget(container, textlistui, text_type);
				textChooser.setTextInfo(currentTextInfo);
				textChooser.show();
			}
		});

	navui
		.on('click', function(e) {

			if (Detection.hasTouch) {
				this.blur();
			}

			if (flipper.hasClass('showinfo')) {
				flipper.removeClass('showinfo')
			}

			if (textNavigator.getTarget() == navui) {
				textNavigator.toggle();
			} else {
				textNavigator.setTarget(container, navui);
				textNavigator.setTextInfo(currentTextInfo);
				textNavigator.show();
			}
		})
		.on('keypress', function(e) {
			if (e.keyCode == 13) {
				var
					userinput = navui.val(),
					bibleref = new bible.Reference(userinput),
					fragmentid = (bibleref.toSection) ? bibleref.toSection() : '',
					sectionid = fragmentid.split('_')[0];

				if (sectionid != '') {

					if (sofia.analytics) {
						sofia.analytics.record('usernav', 'input', sectionid + ':' + currentTextInfo.id);
					}

					TextNavigation.locationChange(fragmentid);

					scroller.load('text', sectionid, fragmentid);
					textNavigator.hide();

					navui.val(bibleref.toString())
					navui[0].blur();
				}
			}
		});

	textNavigator.on('change', function (e) {
		//console.log('scrollerapp:navigator:change', e);

		if (e.data.target != navui) {
			return;
		}

		if (sofia.analytics) {
			sofia.analytics.record('usernav', 'menu', e.data + ':' + currentTextInfo.id);
		}

		TextNavigation.locationChange(e.data.sectionid);

		// load new content
		scroller.load('text', e.data.sectionid);
	});

	textChooser.on('change', function (e) {

		if (e.data.target != textlistui) {
			return;
		}

		var newTextInfo = e.data.textInfo;

		// ALWAYS UPDATE: for first load
		// update version name
		//textlistui.html( newTextInfo.abbr );

		setTextInfoUI(newTextInfo);

		parent.tab.find('span').html( newTextInfo.abbr );

		// update the navigator with the latest header
		textNavigator.setTextInfo(newTextInfo);

		audioController.setTextInfo(newTextInfo);

		// if it has *changed* then we need to reload the text in the scroller
		if (currentTextInfo == null || newTextInfo.id != currentTextInfo.id) {

			// store
			currentTextInfo = newTextInfo;

			var oldLocationInfo = scroller.getLocationInfo(),
				nearestSectionId = oldLocationInfo != null ? oldLocationInfo.sectionid : currentTextInfo.sections[0];

			// load new text
			wrapper.html('');
			scroller.setTextInfo(currentTextInfo);
			scroller.load( 'text', nearestSectionId);
		}

	});

	scroller.on('scroll', update_textnav);
	scroller.on('locationchange', update_textnav);
	scroller.on('load', update_textnav);
	scroller.on('globalmessage', function(e) {
		if ((e.data.messagetype == 'nav' && hasFocus) || e.data.messagetype != 'nav') {

			//console.log('sending global');
			if (ext) {
				ext.trigger('globalmessage', {type: e.type, target: ext, data: e.data});
			}
		}
	});

	// show the current position to the user
	function update_textnav(e) {

		var newLocationInfo = scroller.getLocationInfo();

		// found a fragment
		if (newLocationInfo != null) {

			currentLocationInfo = newLocationInfo;
			navui
				.html(  currentLocationInfo.label )
				.val(  currentLocationInfo.label );

			ext.trigger('settingschange', {type: 'settingschange', target: this, data: getData() });
		}


	}

	// START UP

	function init() {

		// TEMP
		navui.html('Reference').val('Reference');
		textlistui.html('Version');

		console.log('textsindow init', init_data, isInitialized, text_type);

		if (init_data == null) {
			return;
		}

		if (typeof init_data.textid == 'undefined' || init_data.textid == '') {
			init_data.textid = sofia.config.newBibleWindowVersion;
		}

		// load the text specified by the init data
		TextLoader.getText(init_data.textid,

			// success
			function(loadedTextInfo) {

				// store this setting
				currentTextInfo = loadedTextInfo;

				isInitialized = true;

				startup();
			},

			// error handler
			function() {

				console.log('ERROR', init_data.textid, 'doesnt exist');

				// load all possible versions
				TextLoader.loadTexts(function(textInfoData) {

					// find a text with the same language
					// REMOVED b/c the ids no longer use the lang_version syntax
					/*
					var newTextInfo = null,
						lang = init_data.textid.toString().split('-')[0].split('_')[0];		

					for (var i=0, il=textInfoData.length; i<il; i++) {
						var textInfo = textInfoData[i];

						if (textInfo.type == text_type && (textInfo.lang == lang || textInfo.id.substring(0, lang.length) == lang)) {
							newTextInfo = textInfo;
							break;
						}
					}
					*/
					var textsWithType = textInfoData.filter(function(ti) { return ti.type == text_type; });
					
					if (textsWithType.lenght > 0) {
						newTextInfo = textsWithType[0];
					}

					// still nothing
					if (newTextInfo == null) {
						newTextInfo = textInfoData[0];
					}

					// let's try again with first one
					TextLoader.getText(newTextInfo.id, function(loadedTextInfo) {
						// store this setting
						currentTextInfo = loadedTextInfo;

						isInitialized = true;

						startup();

					});

				});

		});
	}

	function setTextInfoUI(textinfo) {


		switch (textinfo.type ) {
			default:
				textlistui.removeClass('app-list-image');
				textlistui.html( textinfo.abbr );
				break;
			case 'deafbible':
				textlistui.addClass('app-list-image');
				textlistui.html( '<img src="content/texts/' + textinfo.id + '/' + textinfo.id + '.png" />' );
				break;

		}

	}

	function startup() {

		// send to objects
		textChooser.setTextInfo(currentTextInfo);
		setTextInfoUI(currentTextInfo);
		parent.tab.find('span').html( currentTextInfo.abbr );
		textNavigator.setTextInfo(currentTextInfo);
		audioController.setTextInfo(currentTextInfo);

		scroller.setTextInfo(currentTextInfo);

		if (!init_data.sectionid && init_data.fragmentid) {
			init_data.sectionid = init_data.fragmentid.split('_')[0];
		}

		scroller.load('text', init_data.sectionid, init_data.fragmentid);

	}

	init();

	function size(width, height) {

		//console.log('winsize',id,width,height);

		container
			.outerWidth(width)
			.outerHeight(height);

		flipper
			.outerWidth(width)
			.outerHeight( container.height() - header.outerHeight(true));

		main
			.outerWidth(width)
			.outerHeight( container.height() - header.outerHeight(true));

		info
			.outerWidth(width)
			.outerHeight( container.height() - header.outerHeight(true));

		textChooser.size(width, height);
		textNavigator.size(width, height);
	}

	function getData() {
		// get data
		if (currentTextInfo == null) {
			currentTextInfo = textChooser.getTextInfo();
		}
		if (currentLocationInfo == null) {
			currentLocationInfo = scroller.getLocationInfo();
		}

		// if not ready, then kill it
		if (currentTextInfo == null || currentLocationInfo == null) {
			return null;
		}

		var data = {
			// textinfo
			textid: currentTextInfo.providerid,
			abbr: currentTextInfo.abbr,

			// location info
			sectionid: currentLocationInfo.sectionid,
			fragmentid: currentLocationInfo.fragmentid,
			label: currentLocationInfo.label,
			labelTab: currentTextInfo.abbr,
			labelLong: currentLocationInfo.labelLong,
			hasFocus: hasFocus,
			params: {
				'win': text_type,
				'textid': currentTextInfo.providerid,
				'fragmentid': currentLocationInfo.fragmentid
			}
		};

		return data;
	}


	function close() {

		textChooser.close();
		textNavigator.close();
		audioController.close();

		ext.clearListeners();
	}

	var ext = {
		size: size,
		getData: getData,
		close: close
	}
	ext = $.extend(true, ext, EventEmitter);

	ext.on('focus', function() {
		hasFocus = true;
	});
	ext.on('blur', function() {
		hasFocus = false;
	});
	ext.on('message', function(e) {
		var data = e.data;

		if (data.messagetype == 'nav' && (data.type == 'bible' || data.type == 'commentary'|| data.type == 'videobible' || data.type == 'deafbible') && data.locationInfo != null) {
			//console.log(id, data.locationInfo.fragmentid, data.locationInfo.offset)
			scroller.scrollTo( data.locationInfo.fragmentid, data.locationInfo.offset);
		}
	});

	return ext;
};

var BibleWindow = function(id, node, init_data) {
	return new TextWindow(id, node, init_data, 'bible');
};

sofia.initMethods.push(function() {

	sofia.windowTypes.push( {
		className:'BibleWindow',
		param: 'bible',
		paramKeys: {
			'textid': 't',
			'fragmentid':'v'
		},
		init: {
			'textid':sofia.config.newBibleWindowVersion,
			'fragmentid':sofia.config.newBibleWindowVerse
		}
	});

});

var CommentaryWindow = function(id, node, init_data) {
	return new TextWindow(id, node, init_data, 'commentary');
};

sofia.initMethods.push(function() {

	if (typeof sofia.config.newCommentaryWindowTextId != 'undefined') {

		sofia.windowTypes.push({
			className:'CommentaryWindow',
			param: 'commentary',
			paramKeys: {
				'textid': 't',
				'fragmentid':'v'
			},
			init: {
				'textid':sofia.config.newCommentaryWindowTextId,
				'fragmentid':''
			}
		});
	}
});



// test/sample types
var SearchWindow = function(id, parent, init_data) {

	var header = $('<div class="window-header search-header" >' +

						'<input type="text" class="search-text app-input i18n" data-i18n="[placeholder]windows.search.placeholder" />' +
						'<div class="text-list app-list" style="">&nbsp;</div>' +

						'<div class="search-options-button header-icon" style=""></div>' +

						'<input type="button" value="Search" data-i18n="[value]windows.search.button" class="search-button header-button i18n" />' +

						//'<select class="search-list header-list" style="max-width: 100px; top: 22px; right: 5px; position: absolute;" ></select>' +
					'</div>').appendTo(parent.node),
		main = $('<div class="search-main"><div class="search-wrapper">' +
					'<div class="search-top">' +
						//'<h2></h2>' +
						'<div class="search-progress-bar">' +
							'<div class="search-progress-bar-inner"></div>' +
							'<span class="search-progress-bar-label"></span>' +
						'</div>' +
						'<div class="search-visual"></div>' +
						'<span class="search-visual-label"></span>' +
						'<div class="search-lemma-info"></div>' +
						'<div class="search-usage"></div>' +
					'</div>' +
					'<div class="search-results reading-text"></div>' +
				'</div></div>').appendTo(parent.node),
		footer = $('<div class="search-footer window-footer"></div>').appendTo(parent.node),

		topLemmaInfo = main.find('.search-lemma-info').hide(),
		topVisual = main.find('.search-visual').hide(),
		topVisualLabel = main.find('.search-visual-label'),
		topUsage = main.find('.search-usage'),
		topBlock = main.find('.search-top'),
		topBlockTitle = topBlock.find('h2'),
		searchProgressBar = topBlock.find('.search-progress-bar').hide(),
		searchProgressBarInner = topBlock.find('.search-progress-bar-inner'),
		searchProgressBarLabel = topBlock.find('.search-progress-bar-label'),

		resultsBlock = main.find('.search-results'),
		input = header.find('.search-text'),
		button = header.find('.search-button'),

		textlistui = header.find('.text-list'),
		//textChooser = new TextChooser(parent.node, textlistui, 'bible'),
		textChooser = sofia.globalTextChooser,
		textChooserFocused = false,

		searchOptionsButton = header.find('.search-options-button'),

		divisionChooser = $('<div class="search-division-chooser">' +
								'<div class="search-division-header">' + i18n.t('windows.search.options') + '</div>' +
								'<div class="search-division-main"></div>' +
							'</div>').appendTo($('body')),

		selectedTextInfo = null,

		// used for redrawing divisions
		previousTextInfo = null,

		currentResults = null,
		searchIndexesData = null,
		searchTermsRegExp = null,
		isLemmaSearch = false
		;

	header.find('.i18n').i18n();

	// EVENTS
	input.on('keypress', function(e) {
		if (e.which == 13) {
			doSearch();

			// record
			if (sofia.analytics) {
				sofia.analytics.record('search', input.val(), textChooser.getTextInfo().id );
			}
		}
	});

	button.on('click', function() {

		// record
		if (sofia.analytics) {
			sofia.analytics.record('search', input.val(), textChooser.getTextInfo().id );
		}

		doSearch() ;

	});

	textChooser.on('change', function(e) {

		if (e.data.target != textlistui) {
			return;
		}

		setTextInfo(e.data.textInfo, false);

		// reset UI
		clearResults();
	});

	textlistui.on('click', function(e) {

		if (textChooser.getTarget() == textlistui) {
			textChooser.toggle();
		} else {
			textChooser.setTarget(parent.node, textlistui, 'bible');
			textChooser.setTextInfo(selectedTextInfo);
			textChooser.show();
			textChooserFocused = true;
		}
	});

	searchOptionsButton.on('click', function(e) {

		if (divisionChooser.is(':visible')) {
			divisionChooser.hide();

		} else {
			divisionChooser.show();

			var uiPos = searchOptionsButton.offset(),
				top = uiPos.top + searchOptionsButton.outerHeight(true) + 10,
				left = uiPos.left,
				divWidth = divisionChooser.outerWidth(true),
				winWidth = $(window).width();

			if (left + divWidth > winWidth) {
				left = winWidth - divWidth - 10;
			}

			divisionChooser.css({
				top: top,
				left: left
			});

		}

		// $(document).on('click', docClick);
	});

	function drawDivisions() {

		// TODO: store the selected ones from this book to reselect on this one (unless it's a shorter one)

		var otListHtml = '',
			ntListHtml = '';

		for (var i=0, il=selectedTextInfo.divisions.length; i<il; i++) {

			var dbsBookCode = selectedTextInfo.divisions[i],
				bookName = selectedTextInfo.divisionNames[i],
				checkedStatus = ' checked',
				html = '<label class="division-name"><input type="checkbox" value="' + dbsBookCode + '"' + checkedStatus + ' />' + bookName + '</label>';

			if (bible.EXTRA_MATTER.indexOf(dbsBookCode) > -1 ) {
				continue;
			}

			if (bible.NT_BOOKS.indexOf(dbsBookCode) > -1 ) {
				ntListHtml += html;
			} else {
				otListHtml += html;
			}
		}

		var completeHtml =
					'<div class="division-list division-list-ot">' +
						'<label class="division-header">' +
							'<input type="checkbox" value="list-ot" checked />' + i18n.t('windows.bible.ot') + '</label>' +
						'</label>' +
						'<div class="division-list-items">' +
							otListHtml +
						'</div>' +
					'</div>' +
					'<div class="division-list division-list-nt">' +
						'<label class="division-header">' +
							'<input type="checkbox" value="list-nt" checked />' + i18n.t('windows.bible.nt') + '</label>' +
						'</label>' +
						'<div class="division-list-items">' +
							ntListHtml +
						'</div>' +
					'</div>';

		divisionChooser.attr('dir', selectedTextInfo.dir);
		divisionChooser.find('.search-division-main').html(completeHtml);

		// TODO: check for items then hide
		var hasOtBooks = divisionChooser.find('.division-list-ot .division-list-items input').length > 0,
			hasNtBooks = divisionChooser.find('.division-list-nt .division-list-items input').length > 0;

		if (!hasOtBooks) {
			divisionChooser.find('.division-list-ot').hide();
		}
		if (!hasNtBooks) {
			divisionChooser.find('.division-list-nt').hide();
		}
	}

	function setDivisions(divisions) {

		console.log('init divisions', divisions);
		if (typeof divisions == 'string') {
			divisions = divisions.split(',');
		}


		if (divisions && divisions.length > 0) {
			divisionChooser.find('.division-list input').prop('checked', false);

			for (var i=0, il = divisions.length; i<il; i++) {
				divisionChooser
					.find('.division-list input[value="' + divisions[i] + '"]')
					.prop('checked',true);
			}
		}

		// check headers
		checkDivisionHeader( divisionChooser.find('.division-list-ot') );
		checkDivisionHeader( divisionChooser.find('.division-list-nt') );

	}

	function checkDivisionHeader(divisionList) {
		var items = divisionList.find('.division-list-items input'),
			allChecked = true;

		items.each(function(i,el) {

			if (!$(el).is(':checked')) {
				allChecked = false;
				return false;
			}
		});

		divisionList.find('.division-header input').prop('checked', allChecked);
	}

	divisionChooser.on('click', '.division-header input', function() {
		var checkbox = $(this),
			setChildrenTo = checkbox.is(':checked');

		checkbox.closest('.division-list').find('.division-list-items input').prop('checked', setChildrenTo);
	});

	divisionChooser.on('click', '.division-list-items input', function() {
		var checkbox = $(this);

		checkDivisionHeader( checkbox.closest('.division-list') );
	});

	resultsBlock.on('click', 'tr', function(e) {

		var tr = $(this),
			fragmentid = tr.attr('data-fragmentid');



		// is there a bible window?
		var
			bibleWindows = sofia.app.windowManager.getWindows().filter(function(w) { return w.className == 'BibleWindow'});

console.log('search click', fragmentid, bibleWindows);

		if (bibleWindows.length == 0) {

			// open new window
			sofia.app.windowManager.add('BibleWindow', {
				textid: sofia.config.newBibleWindowVersion,
				fragmentid: fragmentid,
				sectionid: fragmentid.split('_')[0],
			});

		} else {


			ext.trigger('globalmessage', {
								type: 'globalmessage',
								target: this,
								data: {
									messagetype:'nav',
									type: 'bible',
									locationInfo: {
										fragmentid: fragmentid,
										sectionid: fragmentid.split('_')[0],
										offset: 0
									}
								}
							});
		}

	});

	function searchLoadHandler(e) {
		searchProgressBar.show();

		// give feedback!
		var reference = new bible.Reference(e.data.sectionid),
			label = e.data.sectionid,
			progress = (e.data.index+1) + ' / ' + e.data.total;

		if (bible.BOOK_DATA['GN'].names[textInfo.lang]) {
			reference.lang = textInfo.lang;
		}
		label = reference.toString();


		// show results in footer and bar
		footer.html('Loading: ' + progress + ' :: ' + label );
		searchProgressBarInner.css({'width': ((e.data.index+1) / e.data.total * 100) + '%'  });
		searchProgressBarLabel.html(label);

		// move label into place
		var progressWidth = searchProgressBarInner.outerWidth(true),
			labelWidth = searchProgressBarLabel.outerWidth(true);

		if (labelWidth > progressWidth) {

			searchProgressBarLabel
				.css({left: progressWidth + 'px', margin: '' })
				.addClass('search-progress-bar-label-outside');


		} else {
			searchProgressBarLabel
				.css({left: (progressWidth-labelWidth) + 'px', margin: '' })
				.removeClass('search-progress-bar-label-outside');
		}
	}

	function searchIndexCompleteHandler(e) {
		var results = e.data.results;
		//console.log('searcher:indexcomplete', e.data);


		footer.html(i18n.t('windows.search.results') + e.data.searchIndexesData.length );
	}

	function searchCompleteHandler(e) {

		// store results
		currentResults = e.data.results;
		searchIndexesData = e.data.searchIndexesData;
		searchTermsRegExp = e.data.searchTermsRegExp;
		isLemmaSearch = e.data.isLemmaSearch;

		//console.log('searcher:complete'); // , e.data.results);

		var results = e.data.results,
			html = //'<h2>Results: ' + results.length + '</h2>' +
					'<table>';

		searchProgressBarInner.css({'width': '100%'  });
		setFinalResultsCount(e.data.results ? e.data.results.length : 0);
		resultsBlock.removeClass('loading-indicator');

		if (results && results.length > 0) {

			// create visual array
			var divisionCount = {},
				bookList = null;


			if (isLemmaSearch) {
				var text = input.val();

				if (text.substr(0,1) == 'G') {
					bookList = bible.NT_BOOKS;
				} else if (text.substr(0,1) == 'H') {
					bookList = bible.OT_BOOKS;
				}
			} else {
				bookList = textInfo.divisions;
			}

			for (var i=0, il=bookList.length; i<il; i++) {
				divisionCount[ bookList[i] ] = 0;
			}



			for (var i=0, il=results.length; i<il; i++) {
				var result = results[i],
					label = '',
					fragmentid = result.fragmentid,
					dbsBookCode = fragmentid.substr(0,2);

				divisionCount[dbsBookCode]++;

				if (textInfo.type.toLowerCase() == 'bible') {
					var br = new bible.Reference(result.fragmentid);

					////console.log(br, br.toString(), bible.BOOK_DATA['GN'].names[textInfo.lang]);

					if (bible.BOOK_DATA['GN'].names[textInfo.lang]) {
						br.lang = textInfo.lang;
					}
					label = br.toString();
				} else {
					label = result.fragmentid;
				}

				html += '<tr data-fragmentid="' + result.fragmentid + '" class="divisionid-' + result.fragmentid.substr(0,2) + '"><th>' + label + '</th><td lang="' + iso2iana.convert(textInfo.lang) + '">' + result.html + '</td></tr>';
			}
			html += '</table>';


			resultsBlock
				.html( html )
				.find('.v-num').remove();

			// render book list
			renderResultsVisual(divisionCount, bookList);

			if (isLemmaSearch) {
				renderLemmaInfo();
				renderUsage();
			}
			
			// TEMP 
			var strongsUsage = {}; 
			resultsBlock.find('.highlight').each(function() { 
				var h = $(this), l = h.closest('l'); 
				if (l.length > 0) { 
					var strongs = l.attr('s').split(' ')[0]; 
					if (typeof strongsUsage[strongs] != 'undefined') {
						strongsUsage[strongs].count++;
					} else {
						strongsUsage[strongs] = { count: 1 };
					}
				} 
			});
			var strongsHtml = '';
			var strongsKeys = Object.keys(strongsUsage);
			for (var i=0, il=strongsKeys.length; i<il; i++) {
				strongsHtml += '<tr><td>' + strongsKeys[i] + '</td><td>' + strongsUsage[strongsKeys[i]].count + '</td></tr>';
			}
			topUsage
				.append( $('<table>' + strongsHtml + '</table>') )
				.show();
			
			

			createHighlights();
			
			//createLemmaUsage();
		} else {

			resultsBlock.html( "No results" );

		}

		ext.trigger('settingschange', {type: 'settingschange', target: this, data: null});

	}

	function renderLemmaInfo() {
		var text = input.val(),
			strongs = text.split(' ')[0],
			strongsNumber = strongs.substr(1),
			strongLang = strongs.substr(0,1),
			langCode = (strongLang == 'H' ? 'he' : 'el'),
			dir = langCode == 'he' ? 'ltr' : 'rtl';

		sofia.ajax({
			dataType: 'json',
			url: 'content/lexicons/strongs/entries/' + strongs + '.json',
			success: function(data) {

				var html = '<div class="lemma-word">' +
								'<span lang="' + iso2iana.convert(langCode) + '" dir="' + dir + '">' + data.lemma + '</span>' +
								'  <span class="lemma-strongs" dir="ltr"> [strongs:' + strongsNumber + ']</span>' +
							'</div>';

				//html += '<div class="lemma-outline">' + data.outline + '</div>';

				topLemmaInfo
					.html(html)
					.show();
			}
		});

	}

	function renderUsage() {
		var usages = {},
			usageArray = [];

		resultsBlock.find('tr').each(function() {
			var tr = $(this),
				fragmentid = tr.attr('data-fragmentid'),
				highlightedPhrase = tr.find('.highlight')[0].textContent;

			highlightedPhrase = highlightedPhrase.replace(/\b(with|or|and|if|a|the|in|a|by|of|for)\b/gi,'').trim();

			if (typeof usages[highlightedPhrase] == 'undefined') {
				usages[highlightedPhrase] = 0;
			}

			usages[highlightedPhrase]++;
		});

		// turn into array
		for (var usage in usages) {
			usageArray.push({usage: usage, count: usages[usage]});
		}

		// sort
		usageArray.sort(function(a, b) {
			if (a.count < b.count) {
				return 1;
			} else if (a.count > b.count) {
				return -1;
			} else {
				return 0;
			}

		});

		var html = '';
		for (var i=0, il=usageArray.length; i<il; i++) {
			html += (i > 0 ? ', ' : '') + usageArray[i].usage + ' (' + usageArray[i].count + ')';
		}

		topUsage
			.html(html)
			.show();
	}

	function renderResultsVisual(divisionCount, bookList) {
		var totalWidth = topVisual.outerWidth(),
			totalBooks = bookList.length,
			width = 1/totalBooks*100,
			html = '',
			maxCount = 0,
			baseHeight = 2;
			maxHeight = 38;

		for (var i=0, il=bookList.length; i<il; i++) {
			var count = divisionCount[ bookList[i] ];
			if (count > maxCount) {
				maxCount = count;
			}
		}


		for (var i=0, il=bookList.length; i<il; i++) {
			var dbsBookCode = bookList[i],
				count = divisionCount[dbsBookCode],
				height = maxHeight * count / maxCount + baseHeight,
				top = maxHeight + baseHeight - height;

			html += '<span class="search-result-book-bar ' + dbsBookCode + '" data-count="' + count + '" data-id="' + dbsBookCode + '" style="width:' + width + '%;"><span class="divisionid-' + dbsBookCode + '" style="height:' + height + 'px; margin-top: ' + top + 'px;"></span></span>';
		}

		topVisual.html(html).show();
	}

	topVisual.on('mouseover', '.search-result-book-bar', function() {

		var bookBar = $(this),
			count = bookBar.attr('data-count'),
			dbsBookCode = bookBar.attr('data-id'),
			bookInfo = bible.BOOK_DATA[dbsBookCode],
			win = bookBar.closest('.window'),
			winPos = win.offset(),
			winWidth = win.outerWidth(true),
			bookBarPos = bookBar.offset(),
			top = bookBarPos.top + bookBar.height() + 10 - winPos.top,
			left = bookBarPos.left - winPos.left;


		topVisualLabel
			.html(bookInfo.names[textInfo.lang][0] + ': ' + count)
			.css({top: top, left: left})
			.show();

		if (left + topVisualLabel.outerWidth() > winWidth) {
			left = winWidth - topVisualLabel.outerWidth() - 20;

			topVisualLabel
				.css({left: left});
		}


	}).on('mouseout', '.search-result-book-bar', function() {

		topVisualLabel
			.hide();
	}).on('click', '.search-result-book-bar', function() {

		var bookBar = $(this),
			dbsBookCode = bookBar.attr('data-id'),
			bookInfo = bible.BOOK_DATA[dbsBookCode];

		// find first result?
		resultsBlock.find('tr').each(function() {
			var tr = $(this),
				fragmentid = tr.attr('data-fragmentid');

			if (fragmentid.indexOf(dbsBookCode) == 0) {

				// scrollTo
				console.log('found', tr.offset());

				main.scrollTop( tr.offset().top - tr.outerHeight(true) - 50);

				return false;
			}

		});


	});

	function setFinalResultsCount(count) {

		footer.html(i18n.t('windows.search.results') + ': ' + count );

		// move to center
		searchProgressBarLabel.html(count + ' ' + i18n.t('windows.search.verses'));

		var progressWidth = searchProgressBarInner.outerWidth(true),
			labelWidth = searchProgressBarLabel.outerWidth(true),
			labelLeft = progressWidth/2 - labelWidth;

		searchProgressBarLabel
			//.css({left: labelLeft + 'px'});
			.css({left: '50%', marginLeft: '-' + (labelWidth/2) + 'px'});

	}

	function clearResults() {
		footer.html('');
		topBlockTitle.html('');
		resultsBlock.html('');
		topVisual.html('').hide();
		topLemmaInfo.html('').hide();
		topUsage.html('').hide();
		searchProgressBar.hide();
		searchProgressBarLabel.html('');
		searchProgressBarInner.width(0);
	}

	// ACTIONS
	function doSearch()	{

		disable();

		textInfo = textChooser.getTextInfo();

		var text = input.val().trim(),
			//textid = list.val(),
			textid = textInfo.id,

			divisions = getSelectedDivisions(),

			allDivisions = divisionChooser.find('.division-list-items input');

		parent.tab.find('span').html(text);

		// don't send the list if it's all books
		if (allDivisions.length == divisions.length) {
			divisions = [];
		}

		clearResults();

		topBlockTitle.html('[' + text + '] in [' + textInfo.name + ']');

		removeHighlights();

		resultsBlock.addClass('loading-indicator');

		enable();

		TextLoader.startSearch(textid, divisions, text, searchLoadHandler, searchIndexCompleteHandler, searchCompleteHandler);
	}

	function getSelectedDivisions() {

		var divisions = [],
			selectedBooks = divisionChooser.find('.division-list-items input:checked');

		selectedBooks.each(function() {
			divisions.push( $(this).val() );
		});

		return divisions;
	}

	function disable() {
		input.prop('disabled', true);
		button.prop('disabled', true);
	}
	function enable() {
		input.prop('disabled', false);
		button.prop('disabled', false);
	}


	function size(width, height) {

		header.outerWidth(width);
		footer.outerWidth(width);

		main.outerWidth(width)
			.outerHeight(height - header.outerHeight() - footer.outerHeight());
	}

	function setTextInfo(textInfo, sendToChooser) {

		// keep old one
		previousTextInfo = selectedTextInfo;

		// store new one
		selectedTextInfo = textInfo;

		textlistui.html(textInfo.abbr);

		// draw books
		drawDivisions();

		if (sendToChooser) {
			textChooser.setTextInfo(textInfo);
		}
	}

	// init
	function init() {

		if (init_data.textid) {
			TextLoader.getText(init_data.textid, function(data) {

				setTextInfo(data, true);

				if (init_data.divisions) {
					setDivisions(init_data.divisions);
				}

				if (init_data.searchtext && init_data.searchtext != '') {
					input.val(init_data.searchtext);

					doSearch();
				}

			});
		} else {
			console.log('SEARCH: no init textid');

			for (var index in TextLoader.textData) {

				setTextInfo(TextLoader.textData[index], true);
				break;
			}
		}
	}
	init();

	function removeHighlights() {
		$('.BibleWindow .highlight').each(function(i, el) {

			if (el.tagName.toLowerCase() == 'l') {
				// for Lemma tags, jsut remove hte hlight
				el.className = el.className.replace(/highlight/gi, '');
			} else {
				// if it's just <span class="highlight">, replace it with text
				var textFragment = document.createTextNode(el.textContent);
				if (el && el.parentNode) {
					el.parentNode.insertBefore(textFragment, el);
					el.parentNode.removeChild(el);
				}
			}

		});
	}

	function createHighlights() {

		if (currentResults == null) {
			return;
		}

		removeHighlights();

		// try to highlight!
		for (var i=0, il=currentResults.length; i<il; i++) {
			var result = currentResults[i];


			$('.' + result.fragmentid).each(function(i,el) {


				for (var j=0, jl=searchTermsRegExp.length; j<jl; j++) {

					searchTermsRegExp[j].lastIndex = 0;



					if (isLemmaSearch) {

						// add the 'highlight' class to the <l> node
						el.innerHTML = el.innerHTML.replace(searchTermsRegExp[j], function(match) {
							return match + ' class="highlight" ';
						});

					} else {

						// surround the word with a highlight
						el.innerHTML = el.innerHTML.replace(searchTermsRegExp[j], function(match) {
							return '<span class="highlight">' + match + '</span>';
						});

					}
				}

			});

		}

	}
	
	function createLemmaUsage() {
		var strongsUsage = {}; 
		
		$('.highlight').each(function() { 
		   var h = $(this), l = h.closest('l'); 
		   if (l.length > 0) { 
		      var strongs = l.attr('s').split(' ')[0]; 
		      if (typeof words[strongs] != 'undefined') {
		         strongsUsage[strongs]++;
		      } else {
		         strongsUsage[strongs] = 1;
		      }
		   } 
		});
		console.log(words);
		
	}

	function close() {
		removeHighlights();

		divisionChooser.remove();
		textChooser.close();

		ext.clearListeners();
		ext = null;
	}

	var ext = {
		size: size,
		getData: function() {

			var divisions = divisionChooser.find('.division-list-ot .division-header input').is(':checked') &&
							divisionChooser.find('.division-list-nt .division-header input').is(':checked') ?
								[] : getSelectedDivisions();

			return {
				searchtext: input.val().trim(),
				textid: (selectedTextInfo != null) ? selectedTextInfo.providerid : null,
				divisions: divisions,
				params: {
					'win': 'search',
					'textid': (selectedTextInfo != null) ? selectedTextInfo.providerid : null,
					'searchtext': input.val(),
					'divisions': divisions
				}
			}
		},
		close: close
	};
	ext = $.extend(true, ext, EventEmitter);

	ext.on('message', function(e) {

		if (e.data.messagetype == 'textload') {
			////console.log('search:textload', e.data.sectionid);

			createHighlights(e.data.content);

		}
	});

	return ext;

};

sofia.initMethods.push(function() {

	if (sofia.config.enableOnlineSources) {

		sofia.windowTypes.push( {
			className:'SearchWindow',
			param: 'search',
			paramKeys: {
				'textid': 't',
				'searchtext': 's',
				'divisions': 'd'
			},
			init: {
			}
		});
	}
});


var MapWindow = function(id, parent, data) {

	//parentNode.css({position: 'relative'});

	var now = new Date(),
		//id = 'maps_' + now.getYear() + '_' + (now.getMonth()+1) + '_' + now.getDate() + '_' + now.getHours() + '_' + now.getMinutes() + '_' + now.getSeconds(),
		loadMapFunctionName = 'loadMap_' + id,
		//header = $('<div id="map-header" style="height: 40px; background: #ddd; padding: 9px;"><input type="text" style="width:100%;" /</div>').appendTo(parentNode),


		inputMarginLeft = 10,
		inputMarginRight = 45,
		inputMarginTop = 10,
		mapSearchInput = $('<input placeholder="" type="text" class="i18n" data-i18n="[placeholder]windows.map.placeholder" style="height: 32px; background: #fff; border: solid 0px #333; padding: 7px; position: absolute; top: ' + inputMarginTop + 'px; left: ' + inputMarginLeft + 'px; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3); z-index: 2; font-size: 14px;" />').appendTo(parent.node),

		//mapSearchInput = header.find('input'),

		mapContainer = $('<div class="window-maps" id="' + id + '"></div>').appendTo(parent.node),
		map = null,
		geocoder = null,
		infowindow = null,
		locationData = null,
		locationDataByVerse = null;


	// bind init method to window object
	window[loadMapFunctionName] = function() {
		var mapOptions = {
			zoom: 8,
			disableDefaultUI: true,
			center: new google.maps.LatLng(data.latitude, data.longitude),
			//mapTypeId: google.maps.MapTypeId.ROADMAP,

			mapTypeId: google.maps.MapTypeId.HYBRID,
			mapTypeControl: false,
			mapTypeControlOptions: {
				style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
				position: google.maps.ControlPosition.BOTTOM_CENTER
			},
			panControl: false,
				panControlOptions: {
				position: google.maps.ControlPosition.TOP_RIGHT
			},
			zoomControl: true,
			zoomControlOptions: {
				style: google.maps.ZoomControlStyle.LARGE,
				position: google.maps.ControlPosition.LEFT_CENTER
			},
			scaleControl: false,
				scaleControlOptions: {
				position: google.maps.ControlPosition.TOP_LEFT
			},
			streetViewControl: false,
				streetViewControlOptions: {
				position: google.maps.ControlPosition.LEFT_TOP
			}
		};

		map = new google.maps.Map(document.getElementById(id), mapOptions);

		google.maps.event.addListener(map, 'center_changed', function() {

			var center = map.getCenter();

			ext.trigger('settingschange', {
						type:'settingschange',
						target: this,
						data: {
							latitude: center.lat(),
							longitude: center.lng(),
							label: 'Map: ' + center.lat().toFixed(3) +', ' + center.lng().toFixed(3)
						}
					});

		});


		geocoder = new google.maps.Geocoder();

		infowindow = new google.maps.InfoWindow({
			content: 'Empty for now'
		});


		loadPins();
	}

	mapSearchInput.on('keypress', function(e) {
		if (map != null && e.which == 13) {

			var search_value = mapSearchInput.val();


			// find a marker!
			findMarkerByText(search_value);

		}
	});

	function findMarkerByText(value) {
		for (var i=0, il=locationData.length; i<il; i++) {
			var location = locationData[i];

			//if (location.name.toLowerCase().indexOf(value.toLowerCase()) > -1) {
			if (location.name.toLowerCase() == value.toLowerCase()) {

				openLocation(location);

				break;
			}
		}
	}

	mapContainer.on('click', '.verse, .v', function() {
		var link = $(this),
			sectionid = link.attr('data-sectionid'),
			fragmentid = link.attr('data-fragmentid');

		ext.trigger('globalmessage', {
									type: 'globalmessage',
									target: this,
									data: {
										messagetype: 'nav',
										type: 'bible',
										locationInfo: {
											sectionid: sectionid,
											fragmentid: fragmentid
										}
									}
								});

		console.log('clicked', this);

	});

	// dynamically load map
	if (typeof window.google == 'undefined' ||
		typeof window.google.maps == 'undefined' ||
		typeof window.google.maps.Map == 'undefined') {

		var script = document.createElement('script');
		script.type = 'text/javascript';
		script.src = 'https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&callback=' + loadMapFunctionName;

		document.body.appendChild(script);
	} else {
		console.log('gogole is loaded');

		// load now!
		window[loadMapFunctionName]();
	}


	function loadPins() {

		console.log('MAP: loading pins');

		sofia.ajax({
			dataType: 'json',
			url: 'content/maps/maps.json',
			success: function(data) {

				// store data
				locationData = data.names;

				createPins();
				//setTimeout(createPins, 50);
			}
		});
	}


	function createPins() {

		locationDataByVerse = {};

		var before = new Date();
		for (var i=0, il=locationData.length; i<il; i++) {
			var location = locationData[i];

			// create pin
			(function(location) {

				var marker = new google.maps.Marker({
					position: new google.maps.LatLng(location.coordinates[1], location.coordinates[0]),
					map: map,
					title: location.name
				});

				location.marker = marker;

				google.maps.event.addListener(marker, 'click', function() {

					openLocation(location);

				});


			})(location);

			// create back link
			for (var j=0, jl=location.verses.length; j<jl; j++) {

				var verseid = location.verses[j],
					//bible_ref = new bible.Reference(verse),
					//verseid = bible_ref.bookid + bible_ref.chapter + '_' + bible_ref.verse,
					verseInfo = locationDataByVerse[verseid];

				if (typeof verseInfo == 'undefined')	{
					verseInfo = [];
					locationDataByVerse[verseid] = verseInfo;
				}

				verseInfo.push(location);
			}
		}
		var after = new Date();

		console.log('process time', after - before);


		// SO SLOW!

		// create locationDataByVerse

		/*var before = new Date();

		for (var i=0, il=locationData.length; i<il; i++) {
			var location = locationData[i];

			for (var j=0, jl=location.verses.length; j<jl; j++) {

				var verseid = location.verses[j],
					//bible_ref = new bible.Reference(verse),
					//verseid = bible_ref.bookid + bible_ref.chapter + '_' + bible_ref.verse,
					verseInfo = locationDataByVerse[verseid];

				if (typeof verseInfo == 'undefined')	{
					verseInfo = [];
					locationDataByVerse[verseid] = verseInfo;
				}

				verseInfo.push(location);
			}
		}
		var after = new Date();

		console.log('process time', after - before);
		*/

		//parentNode.html( JSON.stringify(locationDataByVerse) );
		//return;

		highlightStoredLocations();
	}

	function openLocation(location) {
		var verses_html = $.map(location.verses, function(a) {
			var bible_ref = new bible.Reference(a),
				sectionid = bible_ref.bookid + bible_ref.chapter,
				fragmentid = sectionid + '_' + bible_ref.verse1;

			return '<span class="verse" style="text-decoration:underline; cursor: pointer" data-sectionid="' + sectionid + '" data-fragmentid="' + fragmentid + '">' + bible_ref.toString() + '</span>';
		});

		infowindow.setContent(
							'<div style="width: 250px; height: 150px; overflow: auto;">' +
								'<h2>' + location.name + '</h2>' +
								'<p>' +
								verses_html.join('; ') +
								'</p>' +
							'</div>');
		infowindow.open(map, location.marker);

		map.setCenter(location.marker.getPosition());
	}

	function size(width, height) {

		mapSearchInput.outerWidth(width - (inputMarginLeft+inputMarginRight));

		mapContainer
				.width(width)
				.height(height); // - header.outerHeight());
	}

	function getData() {

		if (map == null) {
			return {
				params: {
					win: 'map'
				}
			};
		}

		var center = map.getCenter(),
			data = {
				latitude: center.lat(),
				longitude: center.lng(),
				params: {
					'win': 'map',
					'latitude': center.lat(),
					'longitude': center.lng()
				}
			};

		return data
	}

	var contentToHighlight = [];
	function highlightStoredLocations() {
		//removeHighlights();


		if (contentToHighlight.length > 0) {
			for (var i=0, il=contentToHighlight.length; i<il; i++) {
				highlightLocations(contentToHighlight[i]);
			}
			contentToHighlight = [];
		}
	}

	function highlightLocations(content) {

		content.find('.verse, .v').each(function() {
			var verse = $(this),
				verseid = verse.attr('data-id');
				verseLocations = locationDataByVerse[verseid],
				html = verse.html();

			//console.log(verseid, verseLocations);

			if (typeof verseLocations != 'undefined') {

				for (var i=0, il=verseLocations.length; i<il; i++) {
					var location = verseLocations[i],
						regexp = new RegExp('\\b' + location.name + '\\b', 'gi'),
					html = html.replace(regexp , '<span class="linked-location">' + location.name + '</span>');

					//location.marker.setIcon('http://maps.google.com/intl/en_us/mapfiles/ms/micons/purple-dot.png');
					location.marker.setIcon('http://mt.google.com/vt/icon?color=ff135C13&name=icons/spotlight/spotlight-waypoint-a.png');
				}
			}

			verse.html( html );

		});


		content.on('click', '.location', text_location_clicked);


		// highlight pins?


	}

	function removeHighlights() {
		$('.BibleWindow .linked-location').each(function(i, el) {

			if (el.tagName.toLowerCase() == 'l') {
				// for Lemma tags, just remove the class
				el.className = el.className.replace(/linked-location/gi, '');
			} else {
				// if it's just <span class="linked-location">, replace it with text
				var textFragment = document.createTextNode(el.textContent);
				el.parentNode.insertBefore(textFragment, el);
				el.parentNode.removeChild(el);
			}

		});
	}


	function close() {
		console.log('closing maps');

		geocoder = null;
		map = null;
		infowindow = null;

		ext.clearListeners();

		removeHighlights();
	}

	function text_location_clicked() {
		var element = $(this);

		findMarkerByText( element.html() );
	}

	var ext = {
		size: size,
		getData: getData,
		sendMessage: function() {},
		close: close
	};
	ext = $.extend(true, ext, EventEmitter);


	ext.on('message', function(e) {
		if (e.data.messagetype == 'textload') {
			//console.log('maps got text load', e.data.sectionid);

			// store until data is loaded
			if (locationDataByVerse == null) {
				contentToHighlight.push(e.data.content);
				return;
			} else {
				// are there ones left to do
				highlightStoredLocations();

				// do this one
				highlightLocations(e.data.content);
			}
		}
	});

	return ext;
};

//sofia.windowTypes.push('MapsWindow');



sofia.initMethods.push(function() {

	if (sofia.config.enableOnlineSources) {

		sofia.windowTypes.push( {
					className:'MapWindow',
					param: 'map',
					paramKeys: {
						'latitude': 'la',
						'longitude': 'ln',
					},
					init: {
						'latitude': 31.7833,
						'longitude': 35.2167
					}
		});
	}
});


var MediaWindow = function(id, parent, data) {

	var mediaLibraries = null,
		contentToProcess = null,
		currentSectionId = '';
		header = $('<div class="window-header"><span class="window-title i18n" data-i18n="[html]windows.media.label"></span></div>').appendTo(parent.node),
		main = $('<div class="window-main">' +
					'<div class="media-video"></div>' +
					'<div class="media-content"></div>' +
				'</div>').appendTo(parent.node),
		videoArea = main.find('media-video'),
		contentArea = main.find('media-content');

	header.find('.i18n').i18n();

	MediaLibrary.getMediaLibraries(function(data) {
		mediaLibraries = data;

		processContent();
	});

	function processContent() {
		if (mediaLibraries == null || contentToProcess == null) {
			return;
		}

		var sectionid = contentToProcess.attr('data-id');

		if (currentSectionId == sectionid) {
			return;
		}

		currentSectionId = sectionid;


		var bibleReference = new bible.Reference(sectionid);
		bibleReference.language = contentToProcess.attr('lang');


		// remove all previous checks
		$('.checked-media').removeClass('checked-media');

		main.html('');
		main.scrollTop(0);


		// vers images
		var node = $('<div class="media-library-verses">' +
						'<h2>' + bibleReference.toString() + '</h2>' +
						'<div class="media-library-thumbs"></div>' +
					'</div>').appendTo(main),
			gallery = node.find('.media-library-thumbs'),
			html = '';


		// create HTML for <img>s
		contentToProcess.find('.verse, .v').each(function(i,el) {
			var verse = $(this),
				verseid = verse.attr('data-id'),
				reference = new bible.Reference(verseid);

			verse = verse.closest('.chapter').find('.' + verseid + '').first();

			if (verse.hasClass('checked-media')) {
				return;
			}

			html += renderVerse(verseid, reference, mediaLibraries);

			verse.addClass('checked-media');
		});

		//console.log(html);

		gallery.html(html);


		var images = gallery.find('img');

		// show error message
		if (images.length == 0) {
			gallery.html('No media for this chapter');
			return;
		}

		// determine if all have loaded
		images.on('load', function() {
			var img = $(this);
			img.addClass('loaded');

			if (images.filter('.loaded').length == images.length) {
				resizeImages(gallery);
			}
		});

	}


	// handle resizing
	var timeoutVar = null;
	$(window).on('resize', function() {

		if (timeoutVar != null) {
			clearTimeout(timeoutVar);
		}

		timeoutVar = setTimeout(function() {
			startResize();
		}, 100);
	});


	main.on('click', '.media-library-thumbs a.mediatype-image', sofia.globals.mediaImageClick);
	main.on('click', '.media-library-thumbs a.mediatype-video', sofia.globals.mediaVideoClick);
	main.on('click', '.media-library-thumbs a.mediatype-jfm', sofia.globals.mediaVideoJfmClick);


	function renderVerse(verseid, reference, mediaLibraries) {

		var html = '';

		for (var i=0, il=mediaLibraries.length; i<il; i++) {

			var mediaLibrary = mediaLibraries[i],
				mediaForVerse = mediaLibrary.data ? mediaLibrary.data[verseid] : undefined;

			// add media
			if (typeof mediaForVerse != 'undefined') {

				for (var j=0, jl = mediaForVerse.length; j<jl; j++) {
					var mediaInfo = mediaForVerse[j],
						baseUrl = sofia.config.baseContentUrl + 'content/' + 'media/' + mediaLibrary.folder + '/',
						fullUrl = baseUrl + mediaInfo.filename + '.' + mediaInfo.exts[0],
						thumbUrl = baseUrl + mediaInfo.filename + '-thumb.jpg';

					html += '<a href="' + fullUrl + '" class="mediatype-' + mediaLibrary.type + '" target="_blank" ' + (mediaInfo.name ? 'title="' + mediaInfo.name + '"' : '') + ' data-filename="' + mediaInfo.filename + '">' +
								'<img src="' + thumbUrl + '" />' +
								//((mediaLibrary.type != 'image') ? '<span>' + mediaInfo.name + '</span>'  : '') +
								((mediaLibrary.type != 'image') ? '<b><i></i></b>'  : '') +
								'<span>' + reference.toString() + '</span>' +
							'</a>';
				}

			}
		}

		return html;

	}

	function startResize() {
		resizeImages( main.find('.media-library-thumbs'));
	}


	function resizeImages(gallery) {

		// once loaded!
		var TARGET_ROW_HEIGHT = 80,
			TARGET_GUTTER_WIDTH = 4,
			container_width = gallery.width(),
			current_width = 0,
			currentRow = [];

		gallery.find('img').each(function() {
			var img = $(this),
				a = img.closest('a'),
				width = img.data('original-width');
				height = img.data('original-height');

			// store for resize
			if (width == null) {
				width = img.width();
				img.data('original-width', width);
			}
			if (height == null) {
				height = img.height();
				img.data('original-height', height);
			}

			var
				height_ratio = TARGET_ROW_HEIGHT / height, // (height > TARGET_ROW_HEIGHT) ? TARGET_ROW_HEIGHT / height :
				new_width = Math.floor(height_ratio*width);

			// will this push the last row
			//if (false && container_width < current_width + new_width ) {
			if (container_width < current_width + new_width ) {

				// resize the previous ones
				var row_ratio = container_width / current_width,
					remainder = container_width - current_width,
					width_per_item = Math.ceil(remainder / currentRow.length);


				/*
				console.log('row',
								row_ratio,
								container_width, current_width,
								container_width - current_width);
				*/

				for (var j=0, jl=currentRow.length; j<jl; j++) {
					var row_a = currentRow[j],
						row_img = row_a.find('img'),
						row_width = parseInt(row_a.width(), 10),
						row_height = parseInt(row_a.height(), 10),
						//new_row_width = Math.floor(row_width * row_ratio),
						new_row_width = row_width + width_per_item,
						new_row_height = Math.floor(row_height * row_ratio);

					row_a.width(new_row_width);
					row_a.height(new_row_height);

					row_img.width(new_row_width);
					row_img.height(new_row_height);


					if (j+1 == jl) {
						row_a.css('marginRight',0);
					}

					remainder = remainder - width_per_item;

					if (width_per_item > remainder) {
						width_per_item = remainder;
					}

				}


				// start over
				currentRow = [];
				current_width = 0;
			}


			// restart
			//console.log(width, height, new_width);

			a
				.width(new_width)
				.height(TARGET_ROW_HEIGHT)
				.css({
					"marginRight": TARGET_GUTTER_WIDTH + 'px',
					"marginBottom": TARGET_GUTTER_WIDTH + 'px'});

			img
				.width(new_width)
				.height(TARGET_ROW_HEIGHT);

			currentRow.push(a);

			current_width += new_width + TARGET_GUTTER_WIDTH;



		});

	}



	function close() {

		ext.clearListeners();
	}

	function size(width, height) {
		// do notheirng?
		main.outerHeight(height - header.outerHeight())
			.outerWidth(width);


		startResize();
	}

	var ext = {
		size: size,
		getData: function() {
			return {

				params: {
					'win': 'media'
				}

			}
		},
		close: close
	};
	ext = $.extend(true, ext, EventEmitter);

	ext.on('message', function(e) {
		if (e.data.messagetype == 'textload') {
			//processContent(e.data.content);
		}

		if (e.data.messagetype == 'nav' && e.data.type == 'bible') {

			var content = $('.section[data-id="' + e.data.locationInfo.sectionid + '"]').first();

			contentToProcess = content;

			processContent();
		}
	});

	setTimeout(function() {
		var firstWindowSettings = sofia.app.windowManager.getSettings()[0],
			firstWin = $('.window:first'),
			selectedChapter = (firstWindowSettings && firstWindowSettings.data) ? firstWin.find('.section[data-id="' + firstWindowSettings.data.sectionid + '"]').first() : null;

		if (selectedChapter != null) {
			contentToProcess = selectedChapter;
			processContent();
		}

	}, 500);

	// try to find the first one
	//var firstWindow = sofia.windowManager.windows[0];



	return ext;

};
//sofia.windowTypes.push('MediaWindow');





sofia.initMethods.push(function() {


	sofia.windowTypes.push( {
				className:'MediaWindow',
				param: 'media',
				paramKeys: {},
				init: {
					'latitude': 31.7833,
					'longitude': 35.2167
				}
	});

});


var ParallelsWindow = function(id, parent, init_data) {

	var
		parallelsDataFolder = 'content/parallels/',

		container =
			$('<div class="parallels-container">'+
				'<div class="window-header parallels-header">'+
					'<div class="scroller-header-inner">'+
						'<div class="parallel-list">' +
							'<select class="header-list app-list"></select>' +
						'</div>' +
						'<div class="header-list app-list text-list"></div>'+
						//'<div class="header-list parallels-list"></div>'+
					'</div>'+
				'</div>'+
				'<div class="parallels-main">' +
				'</div>' +
			'</div>').appendTo(parent.node),

		// dom nodes
		header = container.find('.parallels-header'),
		main = container.find('.parallels-main'),
		textlistui = header.find('.text-list'),

		// objects
		textChooser = sofia.globalTextChooser,

		parallelsList = container.find('.parallel-list select'),

		// settings
		currentTextInfo = null,
		textsInitialized = false,
		parallelsData = null;

	parallelsList.on('change', function() {

		loadParallelData();
	});

	textlistui.on('click', function(e) {

		// if this is selected, then toggle
		if (textChooser.getTarget() == textlistui) {
			textChooser.toggle();
		} else {
			textChooser.setTarget(container, textlistui, 'bible');
			textChooser.setTextInfo(currentTextInfo);
			textChooser.show();
		}

	});



	textChooser.on('change', function (e) {

		if (e.data.target != textlistui) {
			return;
		}

		var newTextInfo = e.data.textInfo;

		// ALWAYS UPDATE: for first load
		// update version name
		textlistui.html( newTextInfo.abbr );

		// if it has *changed* then we need to reload the text in the scroller
		if (currentTextInfo == null || newTextInfo.id != currentTextInfo.id) {

			// store
			currentTextInfo = newTextInfo;

			// load new text
			main.html('');

			loadParallelData();
		}

	});


	// START UP

	function init() {

		// TEMP
		textlistui.html('Version');

		console.log('textsindow init',init_data, textsInitialized);

		if (init_data == null) {
			return;
		}

		sofia.ajax({

			dataType: 'json',
			url: 'content/parallels/parallels.json',
			success: function(data) {

				parallelsData = data.parallels;

				for (var i=0, il=parallelsData.length; i<il; i++) {
					parallelsList.append('<option data-id="' + parallelsData[i].id + '" value="' + parallelsData[i].filename + '">' + parallelsData[i].title + '</option>');
				}

				//
				console.log('parallel init', init_data.parallelid);

				if (init_data.parallelid) {

					parallelsList.find('option[data-id="' + init_data.parallelid + '"]').prop('selected', true);

				} else {

					parallelsList.find('option[data-id*="gospel"]:first').prop('selected', true);

					console.log('first gospel', parallelsList.find('option[data-id~="gospel"]:first'));
				}

				startup();
			}
		});


		// load the text specified by the init data
		TextLoader.getText(init_data.textid,

			// success
			function(loadedTextInfo) {

				// store this setting
				currentTextInfo = loadedTextInfo;

				textsInitialized = true;

				// send to objects
				textChooser.setTextInfo(currentTextInfo);
				textlistui.html(currentTextInfo.abbr);

				startup();
			},

			// error handler
			function() {

				console.log('ERROR', init_data.textid, 'doesnt exist');

				// load all possible versions
				TextLoader.loadTexts(function(textInfoData) {

					// find a text with the same language
					var newTextInfo = null,
						lang = init_data.textid.toString().split('-')[0].split('_')[0];

					for (var i=0, il=textInfoData.length; i<il; i++) {
						var textInfo = textInfoData[i];

						if (textInfo.type == text_type && (textInfo.lang == lang || textInfo.id.substring(0, lang.length) == lang)) {
							newTextInfo = textInfo;
							break;
						}
					}

					// still nothing
					if (newTextInfo == null) {
						newTextInfo = textInfoData[0];
					}

					// let's try again with first one
					TextLoader.getText(newTextInfo.id, function(loadedTextInfo) {
						// store this setting
						currentTextInfo = loadedTextInfo;

						textsInitialized = true;

						// send to objects
						textChooser.setTextInfo(currentTextInfo);
						textlistui.html(currentTextInfo.abbr);

						startup();
					});

				});

		});
	}

	function startup() {


		if (textsInitialized && parallelsData != null) {
			// load !
			loadParallelData();
		}
	}

	init();


	var currentParallelData = null,
		currentCells = null,
		currentCellIndex = -1;

	function loadParallelData() {

		// reset
		main.html( '' );

		currentParallelData = null;
		currentCells = null;
		currentCellIndex = -1;

		console.log('parallels', parallelsList.val());

		sofia.ajax({
			dataType: 'json',
			url: 'content/parallels/' + parallelsList.val(),
			success: function(data) {
				console.log('loaded parallel data', data);
				currentParallelData = data;
				createParallel();
			},
			error: function(e) {
				console.log('error laoding parallel data', e);
			}
		});
	}

	//var style = 'separatetitle';
	var columnFormat = 'inlinetitle';

	function createParallel() {

		var html = [];

		// title
		html.push('<h1>' + currentParallelData.title + '</h1>');

		html.push('<p class="parallel-description">' + currentParallelData.description + '</p>');

		html.push('<div class="parallels-buttons">');
			html.push('<span class="parallel-show-all">' + i18n.t('windows.parallel.showall') + '</span>');
			html.push('<span class="parallel-hide-all">' + i18n.t('windows.parallel.hideall') + '</span>');
		html.push('</div>');

		// opening
		html.push('<table dir="' + currentTextInfo.dir + '">');



		if (columnFormat == 'inlinetitle') {

			var style = ' style="width: ' + (100/(currentParallelData.books.length+1)) + '%"';

			// main
			html.push('<tbody>');
			for (var i=0, il=currentParallelData.parallels.length; i<il; i++) {
				var row = currentParallelData.parallels[i];

				if (typeof row.sectionTitle != 'undefined') {
					html.push('<tr><th class="section-title" colspan="' + (currentParallelData.books.length+1) + '">' + row.sectionTitle + '</th></tr>');
				} else {


					// title row
					html.push('<tr class="parallel-entry-header">' +
									'<th class="parallel-title" ' + style + '>' +
									row.title +
									'</th>');



					// Passage titles
					for (var j=0, jl=row.passages.length; j<jl; j++) {
						var passage = row.passages[j];

						if (passage == null) {
							html.push('<td class="parallel-passage" ' + style + '>-</td>');
						} else {
							var books = row.books ? row.books : currentParallelData.books;

							//console.log(currentTextInfo.lang);
							html.push('<td class="parallel-passage" ' + style + ' lang="' + iso2iana.convert(currentTextInfo.lang) + '">' +
											bible.BOOK_DATA[books[j]].names[currentTextInfo.lang][0] + ' ' + passage +
										'</td>');
						}
					}

					html.push('</tr>');


					// text
					html.push('<tr class="parallel-entry-text parallel-entry-text-collapsed">');
					html.push('<th></th>');

					for (var j=0, jl=row.passages.length; j<jl; j++) {
						var passage = row.passages[j];

						if (passage == null) {
							html.push('<td></td>');
						} else {

							var books = row.books ? row.books : currentParallelData.books;

							html.push('<td class="reading-text" data-bookid="' + books[j] + '" ' +
											'data-passage="' + passage + '" lang="' + iso2iana.convert(currentTextInfo.lang) + '">' +
											//i18n.t('windows.parallel.loading') +
										'</td>');
						}
					}

					html.push('</tr>');

				}
			}
			html.push('</tbody>');
		}

		if (columnFormat == 'separatetitle') {

			// main
			html.push('<tbody>');
			for (var i=0, il=currentParallelData.parallels.length; i<il; i++) {
				var row = currentParallelData.parallels[i];

				if (typeof row.sectionTitle != 'undefined') {
					html.push('<tr><th class="section-title" colspan="' + (currentParallelData.books.length).toString() + '">' + row.sectionTitle + '</th></tr>');
				} else {

					html.push('<tr><th class="parallel-title" colspan="' + (currentParallelData.books.length).toString() + '">' + row.title + '</th></tr>');



					// Passage titles
					html.push('<tr class="passage-row passage-notloaded">');

					for (var j=0, jl=row.passages.length; j<jl; j++) {
						var passage = row.passages[j];

						if (passage == null) {
							html.push('<td class="parallel-passage">-</td>');
						} else {
							//console.log(currentTextInfo.lang);
							html.push('<td class="parallel-passage" data-bookid="' + currentParallelData.books[j] + '" ' +
											'data-passage="' + passage + '">' +
											bible.BOOK_DATA[currentParallelData.books[j]].names[currentTextInfo.lang][0] + ' ' + passage +
										'</td>');
						}
					}

					html.push('</tr>');

				}
			}
			html.push('</tbody>');
		}




		// close
		html.push('</table>');

		main.html( html.join('') );


		// find all TDs
		//currentCells = main.find('td');
		//currentCellIndex = 0;
		//loadNextPassage();
	}

	if (columnFormat == 'separatetitle') {
		main.on('click', '.passage-notloaded', function() {
			var row = $(this);

			row.removeClass('passage-notloaded');

			var textRow = row.clone(); // .after(row);

			textRow.find('td').each(function() {
				var cell = $(this).removeClass('parallel-passage');

				if (cell.attr('data-passage')) {
					cell.html(i18n.t('windows.parallel.loading'));
				} else {
					cell.html('');
				}
			});

			row.after(textRow);

			currentCells = textRow.find('td');
			currentCellIndex = 0;


			loadNextPassage();

		});
	}

	if (columnFormat == 'inlinetitle') {
		main.on('click', '.parallel-entry-header', function() {
			var headerRow = $(this),
				textRow = headerRow.next('tr');

			if (textRow.hasClass('parallel-entry-text-collapsed')) {
				// load
				textRow.removeClass('parallel-entry-text-collapsed')

				currentCells = textRow.find('td');
				currentCellIndex = 0;

				loadNextPassage();

			} else {

				textRow.addClass('parallel-entry-text-collapsed')

			}
		});
	}

	main.on('click', '.parallel-show-all', function() {

		currentCells = $();

		// find any closed ones
		/*
		main.find('tr.parallel-entry-text-collapsed').each(function() {
			var tr = $(this).removeClass('parallel-entry-text-collapsed');


			currentCells.add(tr.find('td'));



			/*
			td.find('td').each(function() {
				processCell( $(this), null);
			});

		});
		*/


		currentCells = main.find('tr.parallel-entry-text-collapsed td');

		console.log('total cells', currentCells.length);

		currentCellIndex = 0;
		loadNextPassage();

	});

	main.on('click', '.parallel-hide-all', function() {

		// find any closed ones
		main.find('tr.parallel-entry-text').each(function() {
			var tr = $(this).addClass('parallel-entry-text-collapsed');
		});


	});



	function loadNextPassage() {
		if (currentCellIndex < currentCells.length) {

			// find passage and load
			var cell = currentCells.eq(currentCellIndex);

			processCell(cell, function() {
				currentCellIndex++;
				loadNextPassage();
			});
		}
	}

	function processCell(cell, callback) {

		cell.closest('tr').removeClass('parallel-entry-text-collapsed');

		if (cell.hasClass('parallel-text-loaded')) {

			if (callback) {
				callback();
			}

			return;
		}

		var
			bookid = cell.attr('data-bookid'),
			passage = cell.attr('data-passage');

		if (bookid && passage) {

			// load
			//console.log(bookid, passage);

			var sectionid = bookid + passage.split(':')[0],
				verseParts = passage.split(':')[1],
				verseRanges = verseParts.split(','),
				fragmentids = [];

			// go through each ##-##,##-##
			for (var i=0, il=verseRanges.length; i<il; i++) {
				var verseRange = verseRanges[i].split('-');

				if (verseRange.length == 1) {
					fragmentids.push(sectionid + '_' + verseRange[0].trim());
				} else if (verseRange.length == 2) {
					var start = parseInt(verseRange[0], 10),
						end= parseInt(verseRange[1], 10);


					for (verse = start; verse<= end; verse++) {
						fragmentids.push(sectionid + '_' + verse);
					}
				}
			}

			if (verseRanges.length > 1){
				console.log(verseParts, fragmentids);
			}

			TextLoader.loadSection( currentTextInfo, sectionid, function(content) {

				// remove
				content.find('.cf,.note').remove();

				cell.html('');
				//cell.append($('<span class="passage">' + bookid + ' ' + passage + '</span>'));

				for (var i=0, il=fragmentids.length; i<il; i++) {
					var fragmentid = fragmentids[i],
						verseNode = content.find('.v[data-id="' + fragmentid + '"]');

					//console.log(verseNode.prev());

					if (verseNode.prev().hasClass('v-num')) {
						cell.append(verseNode.prev());
					}

					cell.append(verseNode);
				}

				cell.addClass('parallel-text-loaded');



				if (callback)
					callback();

			}, function() {

				if (callback)
					callback();
			});


		} else {

			if (callback)
				callback();
		}


	}


	function size(width, height) {

		//console.log('newsize',width,height);

		container
			.outerWidth(width)
			.outerHeight(height);


		main
			.outerWidth(width)
			.outerHeight( container.height() - header.outerHeight(true));


		textChooser.size(width, height);
	}


	function getData() {

		var data = {
			// textinfo
			textid: currentTextInfo.providerid,
			parallelid: parallelsList.find('option:selected').attr('data-id'),
			label: 'Parallel',
			labelLong: 'Parallel',
			params: {
				'win': 'parallel',
				'textid': currentTextInfo.providerid,
				'parallelid': parallelsList.find('option:selected').attr('data-id')
			}
		};

		return data;
	}


	function close() {

		textChooser.close();

		ext.clearListeners();
	}

	var ext = {
		size: size,
		getData: getData,
		close: close
	}
	ext = $.extend(true, ext, EventEmitter);

	return ext;
};


sofia.initMethods.push(function() {

	sofia.windowTypes.push( {
		className:'ParallelsWindow',
		param: 'parallel',
		paramKeys: {
			'textid': 't',
			'parallelid': 'p'
		},
		init: {
			'textid': sofia.config.newBibleWindowVersion
		}
	});

});


var Scroller = function(node) {

	var
		wrapper = node.find('.scroller-text-wrapper'),
		currentTextInfo = null,
		locationInfo = {},
		ignoreScrollEvent = false,
		speedLastPos = null,
		speedDelta = 0;
		
		speedIndicator = $('<div class="scroller-speed" style="z-index: 50; position: absolute; top: 0; left: 0; width: 50; background: black; padding: 5px;color:#fff"></div>')
							.appendTo(node.parent())
							.hide();
	

	var globalTimeout = null;

	function startGlobalTimeout() {
		if (globalTimeout == null) {
			setTimeout(triggerGlobalEvent, 10);
		}
	}

	function triggerGlobalEvent() {

		ext.trigger('globalmessage', {type: 'globalmessage', target: this, data: {messagetype: 'nav', type: currentTextInfo.type.toLowerCase(), locationInfo: locationInfo}});

		clearTimeout(globalTimeout);
		globalTimeout = null;
	}

	node.on('scroll', function() {

		if (ignoreScrollEvent) {
			return;
		}
		//console.log('sendingscroll');

		update_location_info();

		ext.trigger('scroll', {type: 'scroll', target: this, data: {locationInfo: locationInfo}});
		startGlobalTimeout();
		
		start_speed_test();		
	});
	
	
	var speedInterval = null;
	
	function start_speed_test() {
		if (speedInterval == null) {

			speedInterval = setInterval(checkSpeed, 100);
		}
	}
	
	function stop_speed_test() {
		if (speedInterval != null) {
			clearInterval(speedInterval);
			speedInterval = null;
		}		
		
	}
	
	function checkSpeed() {
			
		var speedNewPos = node.scrollTop();
		if ( speedLastPos != null ){ // && newPos < maxScroll 
			speedDelta = speedNewPos -  speedLastPos;
		}
		speedLastPos = speedNewPos;
		
		if (speedDelta === 0) {
			load_more();
			stop_speed_test();			
		}
				
/*
		if (speedDelta != null) {
			speedIndicator.html(speedDelta);
		}		
*/
	}
	


	// find the top most visible node (verse, page, etc.)
	// pass it up as an event
	function update_location_info() {

		// reset info
		var
			topOfContentArea = node.offset().top,
			sectionid = '',
			fragmentid = '',
			label = '',
			labelLong = '',
			fragmentSelector = currentTextInfo.fragmentSelector,
			newLocationInfo = null;

		// magic for bibles or books
		if (typeof fragmentSelector == 'undefined' || fragmentSelector == '') {
			switch (currentTextInfo.type.toLowerCase()) {
				case 'videobible':
				case 'deafbible':
				case 'bible':
				case 'commentary':
					// find top
					fragmentSelector = '.verse, .v';

					break;
				case 'book':
					// find top
					fragmentSelector = '.page';

					break;
			}
		}


		var fragments = node.find( fragmentSelector );

		if (fragments.length == 1) {
			fragments = node.find('.section');
		}

		// look through all the markers and find the first one that is fully visible
		fragments.each(function(e) {
			var fragment = $(this),
				isFirstVisibleFragment = false;

			// is the top of the fragment at the top of the scroll pane
			if (fragment.offset().top - topOfContentArea > -2) {
				isFirstVisibleFragment = true;

				fragmentid = fragment.attr('data-id');
				var totalFragments = fragment.parent().find('.' + fragmentid);

				// multi-line verses
				if (totalFragments.length > 1) {

					fragment = totalFragments.first();

					if (fragment.offset().top - topOfContentArea > -2) {
						isFirstVisibleFragment = true;
					} else {
						isFirstVisibleFragment = false;
					}
				}

			}

			if (isFirstVisibleFragment) {

				// TODO: are there other fragments with this id

				fragmentid = fragment.attr('data-id');


				switch (currentTextInfo.type.toLowerCase()) {
					case 'videobible':
					case 'deafbible':
					case 'bible':
					case 'commentary':
						// find top
						var bibleref = new bible.Reference( fragmentid );
						bibleref.language = currentTextInfo.lang;

						label = bibleref.toString();
						labelLong = label +  ' (' + currentTextInfo.abbr + ')';

						break;
					case 'book':
						labelLong = label = currentTextInfo.name + ' ' + sectionid;

						break;
				}


				// pass the marker data
				newLocationInfo = {
					// verse ID
					fragmentid: fragment.attr('data-id'),

					sectionid: fragment.hasClass('section') ? fragment.attr('data-id') : fragment.closest('.section').attr('data-id'),

					// extra positioning info
					offset: topOfContentArea - fragment.offset().top,

					label: label,

					labelLong: labelLong,

					textid: currentTextInfo.id

				};
				return false;
			}

			// means "keep looking" :)
			return true;
		});

		// found a fragment
		if (newLocationInfo != null && (locationInfo == null || newLocationInfo.fragmentid != locationInfo.fragmentid)) {
			ext.trigger('locationchange', {type:'locationchange', target: this, data: newLocationInfo});
		}

		//console.log('new location', newLocationInfo);

		locationInfo = newLocationInfo;
	};


	/*
	var load_more_timeout = null;
	function start_load_more_timeout() {

		if (load_more_timeout === null) {

			load_more_timeout = setTimeout(function() {
				load_more();
				clearTimeout( load_more_timeout );
				load_more_timeout = null;
			}, 100);

		}
	}
	*/

	function load_more() {
			
		// measure top and bottom height
		var
			fragmentid = null;
			wrapper_height = wrapper.height(),
			node_height = node.height(),
			above_top = node_scrolltop = node.scrollTop(),
			sections = wrapper.find( '.section' ),
			sections_count = sections.length,
			total_height = 0,
			below_bottom = wrapper_height /*total_height*/ - node_height - node_scrolltop;

		//console.log('load_more', speedDelta, below_bottom < node_height*2, above_top < node_height*2, above_top > node_height*15, sections_count > 4 && below_bottom > node_height*15)


		// only load if stopped
		if (speedDelta == 0) {
			
			// add below
			if (below_bottom < node_height*2) {
	
				fragmentid = sections
								.last() // the last chapter (bottom)
								.attr( 'data-nextid' );
	
				if (fragmentid != null && fragmentid != 'null' && sections.length < 50) {
					load('next', fragmentid);
				}
	
	
			}
	
			// add above
			else if (above_top < node_height*2) {
	
				fragmentid = sections
								.first() // the first chapter (top)
								.attr( 'data-previd' );
	
				//console.warn('load prev', fragmentid);
	
				if (fragmentid != null && fragmentid != 'null' && sections.length < 50) {
					load('prev',fragmentid);
				}
	
			}
			
			
				
			// remove above
			else if (above_top > node_height*15) {
				//console.warn('remove above');
	
				if (wrapper.children().length >= 2) {
	
					// we're removing the first section, so we need to find the first one and
					// measure where its first child should appear
					var first_node_of_second_section = wrapper.find('.section:eq(1)').children().first(),
						first_node_offset_before = first_node_of_second_section.offset().top;
	
					wrapper.find('.section:first').remove();
	
					// now, remeasure where the first node appears and adjust the scrolltop
					var
						first_node_offset_after = first_node_of_second_section.offset().top,
						offset_difference = first_node_offset_after - first_node_offset_before;
						new_scrolltop = node.scrollTop();
						updated_scrolltop = new_scrolltop - Math.abs(offset_difference);
	
					node.scrollTop(updated_scrolltop);
				}
			}
			
	
			// remove below
			else if (sections_count > 4 && below_bottom > node_height*15) {
				//console.warn('remove below', below_bottom, node_height);
	
				wrapper.find('.section:last').remove();
			}
		} else {
			
			
		}
				
	}

	function load(loadType, sectionid, fragmentid) {

		if (sectionid === 'null' || sectionid === null || sectionid == '') {
			return;
		}

		// check if this exists
		//if ( wrapper.find('[data-id="' + sectionid + '"]').length > 0 ) {
		if ( wrapper.find('.' + sectionid).length > 0 ) {

			if (fragmentid && fragmentid.trim() != '' && wrapper.find('.' + fragmentid).length > 0) {
				scrollTo(fragmentid);
			}
			return;
		}

		if (loadType == 'text') {
			wrapper.html('<div class="loading-indicator" style="height:' + node.height() + 'px;"></div>');
			node.scrollTop(0);
		}

		//console.log(loadType, sectionid, fragmentid);

		TextLoader.loadSection( currentTextInfo, sectionid, function(content) {

			// check if this exists
			//if ( wrapper.find('[data-id="' + sectionid + '"]').length > 0 ) {
			if ( wrapper.find('.' + sectionid).length > 0 ) {

				if (fragmentid && fragmentid.trim() != '' && wrapper.find('.' + fragmentid).length > 0) {
					scrollTo(fragmentid);
				}
				return;
			}

			ignoreScrollEvent = true;

			switch (loadType) {
				default:
				case 'text':

					// clear out and reset
					wrapper.html('');
					node.scrollTop(0);
					wrapper.append(content);



					// TODO: scrollto fragmentid
					if (fragmentid) {
						scrollTo(fragmentid);
					}

					locationInfo = null;

					update_location_info();
					//ext.trigger('scroll', {type: 'scroll', target: this, data: {locationInfo: locationInfo}});

					break;

				case 'next':

					wrapper.append(content);


					break;

				case 'prev':

					// add to top, measure, then reset scroll position
					/*
					var	node_scrolltop_before = node.scrollTop(),
						first_item = node.find('.section').children().first();
					
					if (first_item.length > 0) {
						var first_item_offset_top_before = first_item.offset().top;

						// add to top and measure
						wrapper.prepend(content);

						var first_item_offset_top_after = first_item.offset().top,
							offest_difference = first_item_offset_top_after - first_item_offset_top_before,
							new_scrolltop = node_scrolltop_before + offest_difference;

						node.scrollTop( Math.abs(new_scrolltop));
					}
					*/

					// add to bottom, then move up

					var	node_scrolltop_before = node.scrollTop();
					var wrapper_height_before = wrapper.height();
					wrapper.append(content);
					var wrapper_height_after = wrapper.height();
					wrapper.prepend(content);

					var height_difference = wrapper_height_after - wrapper_height_before,
						new_scrolltop = node_scrolltop_before + height_difference;

					node.scrollTop( Math.abs(new_scrolltop ));

					break;

			}

			ignoreScrollEvent = false;

			// send load event up to Window/App
			//console.log('loaded', sectionid);
			ext.trigger('globalmessage', {type: 'globalmessage',
											target: this,
											data: {
												messagetype: 'textload',
												texttype: currentTextInfo.type.toLowerCase(),
												type: currentTextInfo.type.toLowerCase(),
												textid: currentTextInfo.id,
												abbr: currentTextInfo.abbr,
												sectionid: sectionid,
												fragmentid: fragmentid,
												content:content
											}
										});

			load_more();
			//start_load_more_timeout();
		});

	}

	function scrollTo(fragmentid, offset) {

		if (typeof fragmentid == 'undefined') {
			return;
		}


		// find the fragment
		var fragment = wrapper.find('.' + fragmentid);

		//console.log('scrollTo', fragmentid, fragment.length);

		// if it exists, we'll move to it
		if (fragment.length > 0) {

			var
				// calculate node position
				paneTop = node.offset().top,
				scrollTop = node.scrollTop(),
				nodeTop = fragment.offset().top,
				nodeTopAdjusted = nodeTop - paneTop + scrollTop;

			// go to it
			ignoreScrollEvent = true;
			node.scrollTop(nodeTopAdjusted + (offset || 0));
			ignoreScrollEvent = false;
		}
		// if it's not there, we'll see if we can load it for this book (or bible version)
		else {
			// need to load it!
			//console.log('need to load', fragmentid);

			var sectionid = fragmentid.split('_')[0],
				hasSection = currentTextInfo != null ? currentTextInfo.sections.indexOf(sectionid) > -1 : false;

			if (hasSection) {
				load('text', sectionid, fragmentid);
			}

		}
	}

	function size(width, height) {
		node
			.width(width)
			.height(height);
	}


	function getTextInfo() {
		return currentTextInfo;
	}

	function setTextInfo(textinfo) {

		if (typeof textinfo.stylesheet != 'undefined' ) {

			var styleId = 'style-' + textinfo.id,
				styleLink = $('#' + styleId);

			if (styleLink.length == 0) {
				styleLink = $('<link id="' + styleId + '" rel="stylesheet" href="' + sofia.config.baseContentUrl + 'content/texts/' + textinfo.id + '/' + textinfo.stylesheet + '" />')
								.appendTo($('head'));
			}
		}


		currentTextInfo = textinfo;
	}

	function getLocationInfo() {
		return locationInfo;
	}

	function setFocus(newHasFocus) {
		hasFocus = newHasFocus;
	}


	var ext = {
		load_more: load_more,
		load: load,
		size: size,
		getTextInfo: getTextInfo,
		setTextInfo: setTextInfo,
		getLocationInfo: getLocationInfo,
		scrollTo: scrollTo,
		setFocus: setFocus
	};

	ext = $.extend(true, ext, EventEmitter);

	return ext;

};


var AudioController = function(id, container, toggleButton, scroller) {

	var block = $(
				'<div class="audio-controller">' +
					'<audio></audio>' +
					'<div class="audio-slider">' +
						'<div class="audio-slider-current"></div>' +
						'<div class="audio-slider-loaded"></div>' +
						'<span class="audio-slider-handle"></span>' +
					'</div>' +
					'<input type="button" class="audio-prev" value="Prev" />' +
					'<input type="button" class="audio-play" value="Play" />' +
					'<input type="button" class="audio-next" value="Next" />' +
					'<span class="audio-currenttime">00:00</span>' +
					'<span class="audio-duration">00:00</span>' +
					'<span class="audio-title"></span>' +
					'<span class="audio-subtitle"></span>' +
					'<input type="button" class="audio-options-button image-config-light" />' +
				'</div>'
				).appendTo(container),
		optionsButton = block.find('.audio-options-button'),

		options = $(
				'<div class="audio-options">' +
					'<span class="close-button"></span>' +
					'<strong class="i18n" data-i18n="[html]windows.audio.options"></strong>' +
					'<label><input type="checkbox" class="audio-scroll" checked /><span class="i18n" data-i18n="[html]windows.audio.synctext" /></label>' +
					'<label><input type="checkbox" class="audio-autoplay" checked /><span class="i18n" data-i18n="[html]windows.audio.autoplay" /></label>' +

					'<div class="audio-dramatic-option">' +
						'<label><input type="radio" name="' + id + '-dramatic-option" class="audio-dramatic-audio" disabled /><span class="i18n" data-i18n="[html]windows.audio.nondrama" /></label>' +
						'<label><input type="radio" name="' + id + '-dramatic-option" class="audio-dramatic-drama" disabled /><span class="i18n" data-i18n="[html]windows.audio.drama" /></label>' +
					'</div>' +
				'</div>'
				).appendTo(container),
		scrollCheckbox = options.find('.audio-scroll').prop('checked', true),
		autoplayCheckbox = options.find('.audio-autoplay').prop('checked', true),
		optionsCloseButton = options.find('.close-button'),

		optionsDramaticBox = options.find('.audio-dramatic-option'),
		optionsDramaticDrama = options.find('.audio-dramatic-drama'),
		optionsDramaticAudio = options.find('.audio-dramatic-audio'),

		audio = block.find('audio')[0],

		playButton = block.find('.audio-play'),
		nextButton = block.find('.audio-next'),
		prevButton = block.find('.audio-prev'),
		currenttime = block.find('.audio-currenttime'),
		duration = block.find('.audio-duration'),
		title = block.find('.audio-title'),
		subtitle = block.find('.audio-subtitle'),

		audioSlider = block.find('.audio-slider'),
		audioSliderCurrent = block.find('.audio-slider-current'),
		audioSliderHandle = block.find('.audio-slider-handle'),

		isDraggingSliderHandle = false,

		textInfo = null,
		audioInfo = null,
		locationInfo = null,
		sectionid = '',
		fragmentid = '',
		fragmentAudioData = null,
		loadAudioWhenPlayIsPressed = false,
		sectionHeight = 0,
		sectionNode = null,
		hasAudio = false,
		audioDataManager = new AudioDataManager();

	// START UP
	options.find('.i18n').i18n();

	if (toggleButton != null) {
		toggleButton.hide();
		block.hide();
	}
	options.hide();

	// OPTIONS
	optionsButton.on('click', function() {
		if (options.is(':visible')) {
			options.hide();

			$(document).off('click', doc_click);
		} else {
			options.show();

			setTimeout(function() {
				$(document).on('click', doc_click);
			});
		}
	});
	optionsCloseButton.on('click', function() {
		options.hide();
		$(document).off('click', doc_click);
	});


	// click off functionality
	function doc_click(e) {

		var target = $(e.target),
			clickedOnOptions = false;

		// go through all nested clicked elements
		while (target != null && target.length > 0) {

			if (target[0] == options[0]) {
				clickedOnOptions = true;
				break;
			}

			target = target.parent();
		}

		//return;
		if (!clickedOnOptions) {
			e.preventDefault();

			options.hide();
			$(document).off('click', doc_click);

			return false;
		}
	}

	optionsDramaticAudio.on('change', updateDramatic);
	optionsDramaticDrama.on('change', updateDramatic);

	function updateDramatic() {

		var storedFragmentid = fragmentid;

		// kill all existing values
		fragmentid = '';
		sectionid = '';
		fragmentAudioData = null;
		loadAudioWhenPlayIsPressed = false;

		// stop audio
		if (!audio.paused && !audio.ended) {
			audio.pause();
			audio.src = '';
		}

		$(audio).on('loadeddata', playWhenLoaded);
		loadAudio(storedFragmentid);
	}

	// MAIN
	if (toggleButton != null) {
		toggleButton.on('click', function() {
			if (block.is(':visible')) {
				block.hide();
			} else {
				block.show();
			}
		});
	}

	playButton.on('click', function() {

		if (audio.src == '' || audio.src == null) {

			if (loadAudioWhenPlayIsPressed) {
				audio.src = fragmentAudioData.url;
				audio.load();
				$(audio).on('loadeddata', playWhenLoaded);
				loadAudioWhenPlayIsPressed = false;
			}

			return;
		}


		if (audio.paused || audio.ended) {
			audio.play();
		} else {
			audio.pause();
		}
	});

	prevButton.on('click', function() {

		audioDataManager.getPrevFragment(textInfo, audioInfo, fragmentid, function(prevFragmentid) {

			if (prevFragmentid == null) {
				return;
			}

			if (scrollCheckbox.is(':checked')) {
				if (scroller != null && scroller.load) {
					scroller.load('text', prevFragmentid.split('_')[0], prevFragmentid);
				}
			}

			if (fragmentAudioData == null || prevFragmentid != fragmentAudioData.fragmentid) {
				loadAudio(prevFragmentid);
				$(audio).on('loadeddata', playWhenLoaded);
			}
		});

	});
	nextButton.on('click', function() {

		audioDataManager.getNextFragment(textInfo, audioInfo, fragmentid, function(nextFragmentid) {

			if (nextFragmentid == null) {
				return;
			}

			if (scrollCheckbox.is(':checked')) {
				if (scroller != null && scroller.load) {
					scroller.load('text', nextFragmentid.split('_')[0], nextFragmentid);
				}
			}

			if (fragmentAudioData == null || nextFragmentid != fragmentAudioData.fragmentid) {
				loadAudio(nextFragmentid);
				$(audio).on('loadeddata', playWhenLoaded);
			}
		});

		return;
	});

	// only for the smaller player below a scroller
	if (scroller != null) {

		function updateLocation(e) {

			var newLocationInfo = e.data;

			// found a fragment
			if (newLocationInfo != null) {

				locationInfo = newLocationInfo;

				loadAudio(locationInfo.fragmentid);
			}
		}

		scroller.on('locationchange', updateLocation);
	}

	function loadAudio(newFragmentid) {

		if (!hasAudio) {
			return;
		}

		if (typeof newFragmentid == 'undefined') {
			return;
		}

		if (fragmentid != newFragmentid) {

			//// //console.log('AUDIO loading',newFragmentid,textInfo, hasAudio);

			fragmentid = newFragmentid;

			var newSectionid = fragmentid.split('_')[0],
				dbsBookCode =  sectionid.substring(0,2),
				chaperNumber = sectionid.substring(2),
				loadNewData = audioInfo.pericopeBased || newSectionid != sectionid;

			sectionid = newSectionid;


			// only do checks when we need to!
			if (loadNewData) {

				var audioOption = optionsDramaticDrama.is(':checked') ? 'drama' : optionsDramaticAudio.is(':checked') ? 'audio' : '';

				audioDataManager.getFragmentAudio(textInfo, audioInfo, fragmentid, audioOption, function(newFragmentAudioData) {

					// only update if this is new data
					if (fragmentAudioData == null || newFragmentAudioData == null || fragmentAudioData.id != newFragmentAudioData.id) {


						// if no data was received, then we need to hide everything
						if (!newFragmentAudioData || newFragmentAudioData.url == null) {
							audio.src = null;

							title.html('[No audio]');

							if (toggleButton) {
								toggleButton.hide();
								block.hide();
							}

							fragmentAudioData = newFragmentAudioData;
							return;
						} else {

							// if we get a URL, then show the ear icon again
							if (toggleButton) toggleButton.show();

							// only when the previous data was null, do we reshow the control bar
							if (fragmentAudioData == null) {
								// let's not do it ever
								//block.show();
							}

							fragmentAudioData = newFragmentAudioData;
						}

						// only load audio if player is visible
						if (block.is(':visible')) {
							//audio.currentTime = 0;
							audio.src = fragmentAudioData.url;
							audio.load();
						} else {
							loadAudioWhenPlayIsPressed = true;
						}


						// store height info

						// TODO: start and finish verse instead!
						sectionNode = container.find('.section[data-id="' + sectionid + '"]');
						sectionHeight = sectionNode.height();

						// give feedback
						//title.html( new bible.Reference(sectionid).toString() + (audioInfo.title ? ' [' + audioInfo.title + ']' : ''));
						title.html( new bible.Reference(sectionid).toString() );
						subtitle.html( audioInfo.title );

					}
				});
			}
		}
	}


	function playWhenLoaded(){
		//// //console.log('playWhenLoaded');
		audio.play();
		$(audio).off('loadeddata', playWhenLoaded);
	}


	$(audio)
		.on('play playing', function() {

			var thisAudio = this;

			playButton
				.attr('value','Pause')
				.addClass('playing');


			// pause all other media on the page
			$('audio,video').each(function() {
				var audioOrVideoNode = this;

				if (audioOrVideoNode != thisAudio && !audioOrVideoNode.paused && !audioOrVideoNode.ended) {
					audioOrVideoNode.pause();
				}
			});

		})
		.on('pause ended', function() {
			playButton
				.attr('value','Play')
				.removeClass('playing');
		})
		.on('loadstart', function() {
			playButton
				.attr('value','Play')
				.removeClass('playing');

			audioSliderHandle.css({left: '0%' });
			currenttime.html( secondsToTimeCode(0) );
			duration.html( secondsToTimeCode(0) );
		})
		.on('loadedmetadata', function() {
			duration.html( secondsToTimeCode(audio.duration) );
		})
		.on('ended', function() {
			if (autoplayCheckbox.is(':checked')) {

				$(audio).on('loadeddata', playWhenLoaded);

				nextButton.trigger('click');
				//audio.play();
			}
		})
		.on('timeupdate', function() {
			currenttime.html( secondsToTimeCode(audio.currentTime) );
			duration.html( secondsToTimeCode(audio.duration) );

			// slider
			audioSliderCurrent.css({width: (audio.currentTime / audio.duration * 100) + '%' });
			if (!isDraggingSliderHandle) {
				audioSliderHandle.css({left: (audio.currentTime / audio.duration * 100) + '%' });
			}

			// don't auto scroll if not checked or if there was no connecting UI
			if (!scrollCheckbox.is(':checked') || toggleButton == null) {
				return;
			}

			if (sectionNode.length == 0) {
				sectionNode = container.find('.section[data-id="' + sectionid + '"]');
			}

			sectionHeight = sectionNode.height();

			var
				// calculate percent to scroll
				chapter = parseInt(sectionid.substring(2), 10),
				skipSeconds = (chapter == 1) ? 10 : 8,
				fraction = (audio.currentTime-skipSeconds) / (audio.duration-skipSeconds);

				// calculate node position
				pane = container.find('.scroller-main'),
				paneTop = pane.offset().top,
				scrollTop = pane.scrollTop(),
				nodeTop = sectionNode.offset().top,
				nodeTopAdjusted = nodeTop - paneTop + scrollTop,

				offset = sectionHeight * fraction
							// adjust the offset by two lines or so
							// - 20
							- sectionNode.find('.v:first').height()
							- (sectionNode.find('.v:last').height()*fraction);

			//// //console.log(fraction, sectionHeight, offset);

			if (offset <= 0) {
				offset = 0;
			}

			// go to it
			scroller.setFocus(true);
			pane.scrollTop(nodeTopAdjusted + offset);
		});

	audioSliderHandle.on('mousedown', function(e) {
		isDraggingSliderHandle = true;
		$(document).on('mousemove', documentMouseMove);
		$(document).on('mouseup', documentMouseUp);
	});


	function documentMouseUp(e) {
		// //console.log('mouseup');

		isDraggingSliderHandle = false;
		$(document).off('mousemove', documentMouseMove);
		$(document).off('mouseup', documentMouseUp);
	}

	function documentMouseMove(e) {

		var
			width = audioSlider.width(),
			pos = audioSlider.offset(),
			clientX = e.clientX,
			offsetX = clientX - pos.left,
			percent = offsetX/width,
			newTime = percent * audio.duration;

		audioSliderHandle.css({left: (percent*100) + '%'});

		audio.currentTime = newTime;
	}


	audioSlider.on('click', function(e) {

		// //console.log('slider:click');

		var
			width = audioSlider.width(),
			offsetX = e.offsetX,
			percent = offsetX/width,
			newTime = percent * audio.duration;

		audio.currentTime = newTime;

	});

	function setTextInfo(newTextInfo) {
		if (textInfo == null || textInfo.id != newTextInfo.id) {

			// reset
			title.html('');
			subtitle.html('');
			audioSliderCurrent.css({left: '0%' });
			audioSliderHandle.css({left: '0%' });
			currenttime.html( secondsToTimeCode(0) );
			duration.html( secondsToTimeCode(0) );

			textInfo = newTextInfo;

			if (!audio.paused && !audio.ended) {
				try {
					audio.pause();
					audio.src = null;
				} catch (e) {
					// boom!
				}
			}

			if (textInfo.type == 'bible') {

				audioDataManager.getAudioInfo(textInfo, function(newAudioInfo) {

					if (newAudioInfo != null) {
						audioInfo = newAudioInfo;

						console.log('AUDIO: YES', textInfo.id, textInfo.lang, audioInfo.type);

						hasAudio = true;

						sectionid = '';
						fragmentAudioData = null;

						if (audioInfo.type == 'local') {
							optionsDramaticBox.hide();
						} else if (audioInfo.type == 'fcbh') {
							optionsDramaticBox.show();

							var hasNonDrama =
										(typeof audioInfo.fcbh_audio_nt != 'undefined' && audioInfo.fcbh_audio_nt != '') ||
										(typeof audioInfo.fcbh_audio_ot != 'undefined' && audioInfo.fcbh_audio_ot != ''),
								hasDrama =
										(typeof audioInfo.fcbh_drama_nt != 'undefined' && audioInfo.fcbh_drama_nt != '') ||
										(typeof audioInfo.fcbh_drama_ot != 'undefined' && audioInfo.fcbh_drama_ot != '');

							console.log(audioInfo, 'drama', hasDrama, 'audio', hasNonDrama);

							// show hide
							if (hasNonDrama && hasDrama) {
								optionsDramaticAudio.prop('disabled', false);
								optionsDramaticDrama.prop('disabled', false);
							} else {
								optionsDramaticAudio.prop('disabled', true);
								optionsDramaticDrama.prop('disabled', true);
							}

							if (hasNonDrama) {
								optionsDramaticAudio.prop('checked', true);
								optionsDramaticDrama.prop('checked', false);
							} else {
								optionsDramaticAudio.prop('checked', false);
								optionsDramaticDrama.prop('checked', true);
							}
						}


						if (fragmentid != '') {
							var newFragmentid = fragmentid;

							fragmentid = '';

							// //console.log('AUDIO, new from old ', newFragmentid);
							loadAudio(newFragmentid);
						} else {

							locationInfo = scroller.getLocationInfo();

							// //console.log('AUDIO, new from new ', locationInfo);
							if (locationInfo != null) {
								loadAudio(locationInfo.fragmentid);
							}
						}
						//}

						// start load
						//block.show();
						if (toggleButton) toggleButton.show();

					} else {
						hasAudio = false;

						console.log('AUDIO: NO', textInfo.id, textInfo.lang, newAudioInfo);


						if (toggleButton) {
							toggleButton.hide();
							block.hide();
						}
					}
				});
			} // if text is bible
		} // if this is a different text
	}

	function secondsToTimeCode(time) {

		var hours = Math.floor(time / 3600) % 24,
			minutes = Math.floor(time / 60) % 60,
			seconds = Math.floor(time % 60),
			result =
   					(minutes < 10 ? '0' + minutes : minutes) + ':'
					+ (seconds < 10 ? '0' + seconds : seconds);

		return result;
	}

	function size(width, height) {

		block.outerWidth(width);
	}

	//$(window).on('resize')

	function close() {
		ext.clearListeners();

		block.remove();
		options.remove();

		block = null;
		options = null;
	}

	var ext = {
		setTextInfo: setTextInfo,
		size: size,
		close: close
	}
	ext = $.extend(true, ext, EventEmitter);

	return ext;
}


var TextComparisonWindow = function(id, parent, init_data) {

	console.log('text comparisino', init_data );


	var header = $('<div class="window-header" >' +
						'<input type="text" class="app-input comparison-fragmentid" value="" />' +
						'<input type="text" class="app-input comparison-texts" value="NASB, NET, WEB" />' +
						'<input type="button" value="GO" data-i18n="[value]windows.comparison.button" class="comparison-button header-button i18n" />' +
					'</div>').appendTo(parent.node),
		main = $('<div class="comparison-main">' +
				'</div>').appendTo(parent.node),
		footer = $('<div class="comparison-footer">' +
				'</div>').appendTo(parent.node)

		inputFragment = header.find('.comparison-fragmentid'),
		inputTexts = header.find('.comparison-texts'),
		goButton = header.find('.comparison-button');


	inputFragment.on('keydown', handleEnter);
	inputTexts.on('keydown', handleEnter);

	goButton.on('click', function() {
		console.log('clicked');
		doComparison();
	});


	function init() {

		inputFragment.val( init_data.fragmentid ? init_data.fragmentid : init_data.params.fragmentid ? init_data.params.fragmentid : '');
		inputTexts.val( init_data.textids ? init_data.textids : init_data.params.textids ? init_data.params.textids : '' );

		doComparison();

	}

	function handleEnter(e) {
		if (e.which == 13) {
			doComparison();
		}
	}

	var	sectionid = '',
		reference = '',
		textAbbrs = '',
		textids = [],
		textIndex = -1,
		textData = [],
		textInfoData = null,
		isComparing = false;

	function doComparison() {

		if (isComparing) {
			return;
		}

		isComparing = true;

		main.html();
		main.addClass('loading-indicator');


		reference = new bible.Reference(inputFragment.val());

		if (typeof reference.toSection == 'undefined') {
			return;
		}
		inputFragment.val( reference.toString() );
		sectionid = reference.toSection().split('_')[0]; // 'JN1';
		textAbbrs = inputTexts.val().split(',');
		textids = [];
		textIndex = -1;
		textData = [];


		TextLoader.loadTexts(function(tid) {
			textInfoData = tid;


			for (var i=0, il=textAbbrs.length; i<il; i++ ) {
				var abbr = textAbbrs[i].trim().toLowerCase();

				if (abbr != '') {

					var possibleTexts = textInfoData.filter(function(t) {

						return t.abbr.toLowerCase().indexOf(abbr) > -1;
					});

					if (possibleTexts.length > 0) {
						textids.push(possibleTexts[0].id);
					}
				}
			}

			getNextText();

		});



	}

	//var textids = ['eng-NASB1995', 'eng_net', 'eng_web']; // , 'esv'];

	function getNextText() {

		textIndex++;

		if (textIndex < textids.length) {

			var textid = textids[textIndex];

			TextLoader.getText(textid, function(textInfo) {


				TextLoader.loadSection( textInfo, sectionid, function(content) {
				//TextLoader.loadSection( textid, sectionid, function(content) {

					textData.push({textInfo: textInfo,
									content: content});

					getNextText();

				});
			});

		//} else if (textIndex == textids.length+1){
		} else {

			// complete!
			processData();
		}

	}



	function processData() {

		if (textData.length <= 1) {

			main.removeClass('loading-indicator');

			return;

		}


		var html = '<table class="comparison-table section">'; // using 'section' to get fonts and such

		// heading
		html += '<thead>';
		html += '<th></th>';
		for (var i=0, il = textData.length; i<il; i++) {
			html += '<th>' + textData[i].textInfo.abbr + '</th>';
		}
		html += '</thead>';

		html += '<tbody>';

		var startVerse = reference.verse1 > 0 ? reference.verse1 : 1,
			endVerse = reference.verse2 > 0 ? reference.verse2 : bible.BOOK_DATA[ reference.bookid ].chapters[reference.chapter];

		for (var verse=startVerse; verse<=endVerse; verse++) {

			var verseid = sectionid + '_' + verse.toString(),
				baseText = getPlainText(textData[0].content, verseid);

			html += '<tr>';

			html += '<th>' + verse + '</th>';

			html += '<td class="reading-text" style="width:' + (100/textData.length) + '%">' + baseText + '</td>';


			// comparison
			for (var i=1, il = textData.length; i<il; i++) {
				var comparisonText = getPlainText(textData[i].content, verseid);

				html += '<td class="reading-text" style="width:' + (100/textData.length) + '%">' +
							rejoinPunctuation(
								diffString(
									separatePunctuation(baseText)
									,
									separatePunctuation(comparisonText)
								)
							) +
						'</td>';

			}


			html += '<tr>';
		}



		html += '</tbody>';


		html += '</table>';

		main.html(html);

		main.removeClass('loading-indicator');

		// trigger settings change
		ext.trigger('settingschange', {type: 'settingschange', target: this, data: getData() });

		isComparing = false;
	}

	function separatePunctuation(input) {

		return input.replace(/([\.,;])/gi,' $1'); // “”‘’
	}

	function rejoinPunctuation(input) {

		// fix HTML
		input = input.replace(/\s+<\/([^>]+)>/gi,'</$1> ');

		// connect
		input = input.replace(/<\/ins>\s+<ins>/gi,' ');
		input = input.replace(/<\/del>\s+<del>/gi,' ');

		// fix punctuation
		input = input.replace(/\s+([\.,;])/gi,'$1'); 	// “”

		return input;
	}


	function getPlainText(content, verseid) {

		var verseNodes = content.find('.' + verseid),
			plainText = '';

		for (var i=0, il=verseNodes.length; i<il; i++) {

			var verseNode = $(verseNodes[i]);

			verseNode.find('.note, .cf, .v-num, .verse-num').remove();

			var text = verseNode.html();

			text = text.replace(/<[^>]+>/gi,'');

			plainText += text + ' ';
		}

		return plainText;

	}






	function size(width, height) {
		main
			.width(width)
			.height(height - footer.outerHeight() - header.outerHeight() );
	}

	function getData() {

		var
			data = {
				params: {
					win: 'comparison',
					textids: inputTexts.val(),
					fragmentid: inputFragment.val()
				}
			};

		return data;
	}

	function close() {

		ext.clearListeners();
	}

	var ext = {
		size: size,
		getData: getData,
		sendMessage: function() {
			// nothing for now
		},
		close: close
	};
	ext = $.extend(true, ext, EventEmitter);


	ext.on('message', function(e) {
		// nothing for now
	});

	init();

	return ext;
};

sofia.initMethods.push(function() {

	sofia.windowTypes.push( {
		className:'TextComparisonWindow',
		param: 'comparison',
		paramKeys: {
			'textids': 't',
			'fragmentid': 'f'
		},
		init: {
			textids: 'WEB, ASV',
			fragmentid: 'John 1:1-8'
		}
	});
});

sofia.config = $.extend(sofia.config, {
	enableAudioWindow: true,
	audioWindowDefaultBibleFragmentid: 'JN1_1',
	audioWindowDefaultBibleVersion: 'ENGESV'
});


var AudioWindow = function(id, parent, init_data) {

	console.log('audiowindow init', init_data);

	var
		container =
			$('<div class="audio-window-container">'+
				'<div class="window-header audio-window-header">'+
					'<div class="audio-window-header-inner">'+
						'<input type="text" class="app-input text-nav" />' +
						'<div class="app-list text-list"></div>'+
						//'<span class="header-icon info-button"></span>'+
					'</div>'+
				'</div>'+
				'<div class="audio-window-main">' +
				'</div>' +
				'<div class="audio-window-version-info">' +
				'</div>' +
			'</div>').appendTo(parent.node),


		header = container.find('.audio-window-header'),
		main = container.find('.audio-window-main'),
		navui = header.find('.text-nav'),
		textlistui = header.find('.text-list'),
		versioninfo = container.find('.audio-window-version-info'),

		text_type = 'audio',
		currentTextInfo = null,
		currentLocationInfo = null,

		// objects
		textChooser = sofia.globalTextChooser,
		textNavigator = sofia.globalTextNavigator,

		scrollerMimic = {},
		audioController = null;

	// make something that functions like the text scroller so that the AudioController can understand it
	scrollerMimic = $.extend(true, scrollerMimic, EventEmitter);
	scrollerMimic.getLocationInfo = function() {
		return currentLocationInfo;
	};

	audioController = new AudioController(id, main, null, scrollerMimic);

	// TEXT NAVIGATOR
	navui
		.on('click', function(e) {

			if (Detection.hasTouch) {
				this.blur();
			}

			// if this is selected, then toggle
			if (textNavigator.getTarget() == navui) {
				textNavigator.toggle();
			} else {
				textNavigator.setTarget(container, navui);
				textNavigator.setTextInfo(currentTextInfo);
				textNavigator.show();
			}
		})
		.on('keypress', function(e) {
			if (e.keyCode == 13) {
				var
					userinput = navui.val(),
					bibleref = new bible.Reference(userinput),
					fragmentid = (bibleref.toSection) ? bibleref.toSection() : '',
					sectionid = fragmentid.split('_')[0];

				if (sectionid != '') {
					changeLocation(fragmentid);
				}
			}
		});

	function changeLocation(inputLocation) {
		var bibleref = new bible.Reference(inputLocation),
			fragmentid = (bibleref.toSection) ? bibleref.toSection() : '',
			sectionid = fragmentid.split('_')[0],

			newLocationInfo = {
				fragmentid: fragmentid,
				sectionid: sectionid
			};

		currentLocationInfo = newLocationInfo;

		if (scrollerMimic.trigger) {
			scrollerMimic.trigger('locationchange', {type:'locationchange', target: this, data: newLocationInfo});
		}
		if (ext && ext.trigger) {
			ext.trigger('settingschange', {type: 'settingschange', target: this, data: getData() });
		}

		textNavigator.hide();

		navui.val(bibleref.toString());
		navui[0].blur();
	}

	textNavigator.on('change', function (e) {

		if (e.data.target != navui) {
			return;
		}

		changeLocation(e.data.sectionid);
	});

	// TEXT CHOOSER
	textlistui.on('click', function(e) {

		// if this is selected, then toggle
		if (textChooser.getTarget() == textlistui) {
			textChooser.toggle();
		} else {
			textChooser.setTarget(container, textlistui, text_type);
			textChooser.setTextInfo(currentTextInfo);
			textChooser.show();
		}
	});

	textChooser.on('change', function(e) {
		if (e.data.target != textlistui) {
			return;
		}

		var newTextInfo = e.data.textInfo;

		updateText(newTextInfo);

	});

	function updateText(newTextInfo) {

		// ALWAYS UPDATE: for first load
		// update version name
		textlistui.html( newTextInfo.abbr );

		parent.tab.find('span').html( newTextInfo.abbr );

		// update the navigator with the latest header
		textNavigator.setTextInfo(newTextInfo);

		audioController.setTextInfo(newTextInfo);

		currentTextInfo = newTextInfo;

		//versioninfo.html( currentTextInfo.aboutHtml );
	}



	function init() {

		// TEMP
		navui.html('Reference').val('Reference');
		textlistui.html('Version');

		if (init_data == null) {
			return;
		}

		if (typeof init_data.fragmentid != 'undefined' && init_data.fragmentid != '') {
			//var bibleRef = new bible.Reference(init_data.fragmentid);
			//navui.val(bibleRef.toString());
			changeLocation(init_data.fragmentid);
		}

		if (typeof init_data.textid == 'undefined' || init_data.textid == '') {
			init_data.textid = sofia.config.newBibleWindowVersion;
		}

		// load the text specified by the init data
		TextLoader.getText(init_data.textid,

			// success
			function(loadedTextInfo) {

				// store this setting
				currentTextInfo = loadedTextInfo;

				updateText(loadedTextInfo);
			},

			// error handler
			function() {
//
//				console.log('ERROR', init_data.textid, 'doesnt exist');
//
//				// load all possible versions
//				TextLoader.loadTexts(function(textInfoData) {
//
//					// find a text with the same language
//					var newTextInfo = null,
//						lang = init_data.textid.toString().split('-')[0].split('_')[0];
//
//					for (var i=0, il=textInfoData.length; i<il; i++) {
//						var textInfo = textInfoData[i];
//
//						if (textInfo.type == text_type && (textInfo.lang == lang || textInfo.id.substring(0, lang.length) == lang)) {
//							newTextInfo = textInfo;
//							break;
//						}
//					}
//
//					// still nothing
//					if (newTextInfo == null) {
//						newTextInfo = textInfoData[0];
//					}
//
//					// let's try again with first one
//					TextLoader.getText(newTextInfo.id, function(loadedTextInfo) {
//						// store this setting
//						currentTextInfo = loadedTextInfo;
//
//						isInitialized = true;
//
//						startup();
//
//					});
//
//				});

		});
	}


	init();



	function size(width, height) {

		container.outerWidth(width);

		container
				.width(width)
				.height(height); // - header.outerHeight());
	}


	function getData() {
		// get data
		if (currentTextInfo == null) {
			currentTextInfo = textChooser.getTextInfo();
		}
		if (currentLocationInfo == null) {
			currentLocationInfo = scrollerMimic.getLocationInfo();
		}

		// if not ready, then kill it
		if (currentTextInfo == null || currentLocationInfo == null) {
			return null;
		}

		var data = {
			// textinfo
			textid: currentTextInfo.providerid,
			abbr: currentTextInfo.abbr,

			// location info
			sectionid: currentLocationInfo.sectionid,
			fragmentid: currentLocationInfo.fragmentid,
			label: currentLocationInfo.label,
			labelTab: currentTextInfo.abbr,
			labelLong: currentLocationInfo.labelLong,
			//hasFocus: hasFocus,
			params: {
				'win': 'audio',
				'textid': currentTextInfo.providerid,
				'fragmentid': currentLocationInfo.fragmentid
			}
		};

		return data;
	}

//	function getData() {
//
//		var data = {
//			params: {
//				'win': 'audio'
//			}
//		};
//
//		return data
//	}

	function close() {

		ext.clearListeners();

	}


	var ext = {
		size: size,
		getData: getData,
		sendMessage: function() {},
		close: close
	};
	ext = $.extend(true, ext, EventEmitter);


	ext.on('message', function(e) {
		if (e.data.messagetype == 'textload') {
		}
	});

	return ext;
};

sofia.initMethods.push(function() {

	if (sofia.config.enableAudioWindow) {

		sofia.windowTypes.push( {
				className:'AudioWindow',
				param: 'audio',
				paramKeys: {
					'textid': 't',
					'fragmentid':'v'
				},
				init: {
					'textid':sofia.config.audioWindowDefaultBibleVersion,
					'fragmentid':sofia.config.audioWindowDefaultBibleFragmentid
				}
		});
	}
});

var StatisticsWindow = function(id, parent, data) {

	var
		header = $('<div class="window-header"><span class="window-title i18n" data-i18n="[html]windows.stats.label"></span></div>').appendTo(parent.node),
		main = $('<div class="window-main">' +
					//'<div class="statistics-header"></div>' +
					'<div class="statistics-content loading-indicator"></div>' +
				'</div>').appendTo(parent.node),
		//statsHeaderNode = main.find('.statistics-header'),
		statsMainNode = main.find('.statistics-content');

	//header.find('.i18n').i18n();


	var isReady = false,
		textid = '',
		sectionid = '',
		textInfo = null,
		isLoading = false,
		isLoaded = false,

		word_stats = [],
		lemma_data = [],
		has_lemma = false;


	if (typeof WordCloud != 'undefined') {
		isReady = true;

	} else {

		$.ajax({
			url: 'js/lib/wordcloud2.js',
			dataType: "script",
			success:  function() {
				isReady = true;
				loadIntro();
			}
		});

	}


	function startProcess(tid, sid) {

		var tparts = tid.split(':');

		if (tparts.length > 1) {
			tid = tparts[tparts.length-1];
		}


		if (tid == textid && sid == sectionid) {
			// do nothing, carry on!
		} else {

			removeHighlights();

			// store the current ones
			sectionid = sid;
			textid = tid;
			textInfo = null;

			word_stats = [];
			lemma_data = [];
			has_lemma = false;

			isLoading = true;
			isLoaded = false;

			main.scrollTop(0);
			statsMainNode.html('');
			statsMainNode.addClass('loading-indicator');

			loadIntro();
		}

	}

	function loadIntro() {

		if (!isReady) {
			return;
		}

		if (sectionid == '' || textid == '') {
			return;
		}

		console.log('stats',textid,sectionid, 'intro start');

		//var intro = $('<div class="statistics-intro"><div>').appendTo(statsMainNode);

		TextLoader.getText(textid, function(data) {

			statsMainNode.removeClass('loading-indicator');

			textInfo = data;

			var bibleReference = new bible.Reference(sectionid);
			bibleReference.lang = textInfo.lang;

			if (bibleReference.toSection) {
				header.find('span').html( bibleReference.toString() + ' (' + textInfo.abbr + ')');
			}

			loadChapterInfo();
		});
	}

	function loadChapterInfo() {

		console.log('stats',textid,sectionid, 'loadChapterInfo start');

		var resultsNode = $('<div class="statistics-section statistics-frequent-words">' +
								'<h3>' + i18n.t('windows.stats.frequentwords') + '</h3>' +
								'<div class="statistics-wordcloud"></div>' +
								'<div class="statistics-results loading-indicator"></div>' +
							'<div>')
								.appendTo(statsMainNode),
			wordFrequenciesNode = resultsNode
									.find('.statistics-results'),
			wordCloudNode = resultsNode
									.find('.statistics-wordcloud');

		TextLoader.loadSection(textInfo, sectionid, function(content) {

			// analyze verses
			var html = '';

			content.find('.verse, .v').each(function(i,el) {
				var verse = $(this),
					verseid = verse.attr('data-id')
					verse.find('.note').remove();

				//console.log('processing', verseid, words);

				if (verse.find('l').length > 0) {

					has_lemma = true;

					verse.find('l').each(function() {
						var lemma = $(this),
							strongs_array = lemma.attr('s').split(' ');

						strongs_array.forEach(function(strongs) {

							// article
							if (
								strongs == 'G2532' // καί
								|| strongs == 'G3588'
								|| strongs == 'G846' // αὐτός
								|| strongs == 'G1722' // ἐν (1722)
								|| strongs == 'G1519' // εἰς (1519)
								|| strongs == 'G1537' // ἐξ (1537)
								|| strongs == 'G1611'// δέ (1161)
							) {
								return;
							}

							var
								word_infos = word_stats.filter(function(wi) {
									return wi.strongs == strongs;
								}),

								word = lemma.html();

							if (word_infos.length > 0) {
								word_info = word_infos[0];
								word_info.count++;
								if (word_info.words.indexOf(word) == -1) {
									word_info.words.push(word);
								}
							} else {
								word_stats.push({
									strongs: strongs,
									word: lemma.html(), // + ' [' + strongs + ']',
									words: [word],
									count: 1
								})
							}
						});


					});

				} else {
					var
						verse_html = verse.html(),
						verse_text = verse_html.replace(/<.*?>/gi,'');

					if (textInfo.lang.indexOf('en') == 0) {
						verse_text = verse_text.replace(/[^(A-Za-z\s)]/gi,'');
					}

					// english?
					words = verse_text.split(' ');

					for (var i=0, il=words.length; i<il; i++) {
						var word = words[i];//.toLowerCase();

						if (word == '' || (exclusions[textInfo.lang] && exclusions[textInfo.lang].indexOf(word.toLowerCase()) > -1)) {
							continue;
						}

						var
							word_infos = word_stats.filter(function(wi) {
								return wi.word == word || wi.word.toLowerCase() == word.toLowerCase();
							});

						if (word_infos.length > 0) {
							word_infos[0].count++;
						} else {
							word_stats.push({
								word: word,
								count: 1
							})
						}
					}
				}
			});


			// sort by most frequent

			word_stats.sort(function(a, b) {
				if (a.count > b.count) {
					return -1;
				} else if (a.count < b.count) {
					return 1;
				} else {
					return 0;
				}
			});
			var max = Math.max.apply(Math, word_stats.map(function(o) {return o.count;})),
				min = Math.min.apply(Math, word_stats.map(function(o) {return o.count;})),
				smallestSize = 9,
				biggestSize = 24;

			// remove uncommon words
			var min_to_keep = 0,
				display_words = word_stats;

			if (min_to_keep > 0) {
				display_words = word_stats.filter(function(w) { return w.count >= min_to_keep;} );
			}

			// create HTML
			var wordle_data = '',
				wordcloud_data = [];
			for (var i in display_words) {
				var word_info = display_words[i];

				//if (exclusions.en.indexOf(word_info.word.toLowerCase()) == -1) {

					var size = smallestSize +
								((biggestSize-smallestSize) * word_info.count / (max-min) ),
						displayWord = word_info.words ? word_info.words.join(', ') : word_info.word,
						wordleWord = word_info.word;

					if (word_info.strongs) {
						displayWord = '<l s="' + word_info.strongs + '">' + displayWord + '</l>';
					}


					html += '<span class="word" style="font-size:' + size + 'px" data-wordindex="' + i + '"><span dir="' + textInfo.dir + '">' + displayWord + '</span> <span dir="ltr">(' + word_info.count + ')</span></span>';
					wordle_data += word_info.count + ' ' + displayWord + '\n';
					wordcloud_data.push( [ wordleWord , word_info.count] );
				//}
			}

			console.log(word_stats);
			console.log(wordle_data);

			// append
			wordFrequenciesNode
				.attr('dir',textInfo.dir)
				.html(html)
				.removeClass('loading-indicator');

			wordFrequenciesNode.find('.word')
				.on('mouseout', function() { removeHighlights(); })
				.on('mouseover', function() {
					var el = this,
						index = parseInt($(el).attr('data-wordindex'), 10),
						word_info = word_stats[index];

					//console.log(el, index, word_info);
					createHighlights(word_info);

				})

			var windowWidth = statsMainNode.width();

			wordCloudNode
					.width(windowWidth)
					.height(windowWidth*3/4);

			WordCloud(wordCloudNode[0], {
				//gridSize: Math.round(16 * wordle.width() / 1024),
				//fontFamily: 'Times',
				minSize: 5,
				/*
				weightFactor: function (size) {
					return Math.pow(size, 2.3) * wordle.width() / 4000;
				},
				*/

				weightFactor: function (size) {

					//console.log(size, b, this);

					//return size * wordCloudNode.width() / 120;

					var sizeMax = Math.min(wordCloudNode.width() / 7, 80),
						sizeMin = sizeMax * 0.1,
						newSize = sizeMin + (Math.abs(sizeMax-sizeMin) * (size-min) / (max-min) );

					// sizeMax = 10, sizeMin = 2
					// size = 5, min=1, max=10
					// 2 + (8 * 5 / 9)


					//console.log(min, max, size, sizeMin, sizeMax, newSize);
					return newSize;
				},

				list: wordcloud_data,
				//backgroundColor: '#efefef',
				hover: function(hover_word_info, word_position, mouse_event) {

					removeHighlights();

					if (hover_word_info) {
						var word = hover_word_info[0];

						var word_info = word_stats.filter(function(a) {
							return a.word == word;
						})[0];

						createHighlights(word_info);
					}

				},
				color: function (word, size) {
					/*
					var rMax = 42,
						rMin = 138,
						rValue = Math.round( rMax - (Math.abs(rMax-rMin) * (size-min) / (max-min) ) ),
						gMax = 133,
						gMin = 182,
						gValue = Math.round( gMax - (Math.abs(gMax-gMin) * (size-min) / (max-min) ) )

						;

					//return '#ff0000';

					var bMax = 232,
						bMin = 230,
						bValue = Math.round( bMin + (Math.abs(bMax-bMin) * (size-min) / (max-min) ) );
					*/

					// search blue = 42, 133, 232
					// dark blue = 22, 71, 123

					var rValue = Math.round( getRangeValue(42,  22, min, max, size) ),
						gValue = Math.round( getRangeValue(133, 71, min, max, size) ),
						bValue = Math.round( getRangeValue(232, 123, min, max, size) );

					console.log(word, min, max, size, rValue, gValue, bValue);

					//console.log(word, weight, rValue, gValue, 'rgb(' + rValue + ',' + gValue + ',215)');
					//return 'rgb(' + rValue + ',' + gValue + ',215)';
					//return 'rgb(' + (weight * 10) + ',' + (weight * 10) + ',215)';
					return 'rgb(' + rValue + ',' + gValue + ',' + bValue + ')';
				},
				click: function() {

				}
			});

			if (has_lemma) {

				loadLemmaInfo();
			}

		});
	}

	function getRangeValue(value1, value2, minValue, maxValue, value) {

		if (value2 > value1) {
			return value1 + (Math.abs(value1-value2) * (value-minValue) / (maxValue-minValue) );
		} else if (value1 > value2) {
			return value2 + (Math.abs(value1-value2) * (value-minValue) / (maxValue-minValue) );
		} else {
			return value1;
		}

	}

	sofia.getRangeValue = getRangeValue;

	var currentLemmaIndex = 0;
	function loadLemmaInfo() {

		console.log('stats',textid,sectionid, 'lemma start');

		var lemmaNode = $('<div class="statistics-section statistics-rare-words">' +
								'<h3>Rare Words</h3>' +
								'<div class="statistics-results loading-indicator"></div>' +
							'<div>')
								.appendTo(statsMainNode)
								.find('.statistics-results');

		currentLemmaIndex = 0;

		getNextLemma(function() {

			lemma_data.sort(function(a, b) {
				if (a.word_info.count > b.word_info.count) {
					return -1;
				} else if (a.word_info.count < b.word_info.count) {
					return 1;
				} else {
					return 0;
				}
			});

			var rare_words = lemma_data.filter(function(lemma) { return lemma.frequency <= 5;});

			html = '';
			for (var i=0, il=rare_words.length; i<il; i++) {
				var lemma = rare_words[i],
					lemmaLang = lemma.word_info.strongs.substr(0,1).toUpperCase() == 'G' ? 'gr' : 'he',
					dir = lemmaLang == 'gr' ? 'ltr' : 'rtl';

				html += '<tr class="rare"><td><l s="' + lemma.word_info.strongs + '" lang="' + lemmaLang + '" dir="' + dir + '">' + lemma.lemma + '</td><td>' + lemma.word_info.words.join(', ') + '</td><td>' + lemma.word_info.count + ' of ' + lemma.frequency + ' in ' + (lemmaLang == 'gr' ? 'NT' : 'OT') + '</td></tr>';

			}

			lemmaNode
				.html( '<table>' + html + '</table>')
				.removeClass('loading-indicator');

		});
	}

	function getNextLemma(callback) {

		if (currentLemmaIndex >= word_stats.length) {

			callback();

		} else {

			var word_info = word_stats[currentLemmaIndex];

			$.ajax({
				dataType: 'json',
				url: 'content/lexicons/strongs/entries/' + word_info.strongs + '.json',
				success: function(data) {
					data.word_info = word_info;
					lemma_data.push(data);
				},
				complete: function() {
					getNextLemma(callback);
					currentLemmaIndex++;
				}
			});
		}
	}


	function removeHighlights() {
		$('.BibleWindow .highlight-stats').each(function(i, el) {

			if (el.tagName.toLowerCase() == 'l') {
				// for Lemma tags, jsut remove hte hlight
				el.className = el.className.replace(/highlight/gi, '');
			} else {
				// if it's just <span class="highlight">, replace it with text
				var textFragment = document.createTextNode(el.textContent);
				if (el && el.parentNode) {
					el.parentNode.insertBefore(textFragment, el);
					el.parentNode.removeChild(el);
				}
			}

		});
	}

	function createHighlights(word_info) {

		removeHighlights();


		// do for all sections / chapters
		$('.' + sectionid).each(function(i,el) {

			if (typeof word_info.strongs != 'undefined') {
				//var r = new RegExp('s=("|\')(\\w\\d{1,4}[a-z]?\\s)?' + '(G|H)?' + word_info.strongs.substr(1) + '[a-z]?(\\s\\w\\d{1,4}[a-z]?)?("|\')', 'gi');

				$(el).find('l[s*="' + word_info.strongs.substr(1) + '"],l[s*="' + word_info.strongs + '"]').addClass('highlight highlight-stats lemma-highlight');

				// add the 'highlight' class to the <l> node
				//el.innerHTML = el.innerHTML.replace(r, function(match) {
				//	return match + ' class="highlight highlight-stats" ';
				//});

			} else {

				//var r = new RegExp('\b' + word_info.word + '\b', 'gi');
				var r = new XRegExp( '\\b' + word_info.word + '\\b', 'gi');

				// surround the word with a highlight
				el.innerHTML = el.innerHTML.replace(r, function(match) {
					return '<span class="highlight highlight-stats">' + match + '</span>';
				});

			}

		});


	}


	function close() {

		ext.clearListeners();
	}

	function size(width, height) {
		// do notheirng?
		main.outerHeight(height - header.outerHeight())
			.outerWidth(width);
	}

	var ext = {
		size: size,
		getData: function() {
			return {

				params: {
					'win': 'stats'
				}

			}
		},
		close: close
	};
	ext = $.extend(true, ext, EventEmitter);

	ext.on('message', function(e) {
		if (e.data.messagetype == 'textload') {
			//processContent(e.data.content);
		}

		if (e.data.messagetype == 'nav' && e.data.type == 'bible' && e.data.locationInfo) {

			startProcess(e.data.locationInfo.textid, e.data.locationInfo.sectionid);
		}
	});

	setTimeout(function() {
		var firstWindowSettings = sofia.app.windowManager.getSettings()[0],
			firstWin = $('.window:first'),

			selectedSectionid = firstWindowSettings.data.sectionid,
			selectedTextid = firstWindowSettings.data.textid;

		startProcess(selectedTextid, selectedSectionid);

	}, 1500);

	return ext;

};


var exclusions = {
	"es": ["de"],

	"chs": ["─","：","，","。","（","）","！","；","一","？"],

	"eng": [
		// prepositions
"a",
"abaft",
"aboard",
"about",
"above",
"absent",
"across",
"afore",
"after",
"against",
"along",
"alongside",
"amid",
"amidst",
"among",
"amongst",
"an",
"anenst",
"apud",
"around",
"as",
"aside",
"astride",
"at",
"athwart",
"atop",
"barring",
"before",
"behind",
"below",
"beneath",
"beside",
"besides",
"between",
"beyond",
"but",
"by",
"circa",
"concerning",
"despite",
"down",
"during",
"except",
"excluding",
"failing",
"following",
"for",
"forenenst",
"from",
"given",
"in",
"including",
"inside",
"into",
"lest",
"like",
"minus",
"modulo",
"near",
"next",
"notwithstanding",
"of",
"off",
"on",
"onto",
"opposite",
"out",
"outside",
"over",
"pace",
"past",
"per",
"plus",
"pro",
"qua",
"regarding",
"round",
"sans",
"save",
"since",
"than",
"through",
"throughout",
"till",
"to",
"toward",
"towards",
"under",
"underneath",
"unlike",
"until",
"unto",
"up",
"upon",
"versus",
"via",
"with",
"within",
"without",
"worth",

// articles
"a",
"the",

// pronouns
"him",
"his",
"he",
"she",
"it",
"her",
"hers",

// conjunctions
"and",
"but",
"yet",

// other
"that",

"was",
"were",
"be",
"being",
"been",
"had",
"its",
"i",

	]
};

sofia.initMethods.push(function() {


	sofia.windowTypes.push( {
				className:'StatisticsWindow',
				param: 'stats',
				paramKeys: {},
				init: {
				}
	});

});

sofia.config = $.extend(sofia.config, {
	enableDeafBibleWindow: true,
	deafBibleWindowDefaultBibleFragmentid: 'JN1_1',
	deafBibleWindowDefaultBibleVersion: 'deaf_ASESLV'
});

var DeafBibleWindow = function(id, node, init_data) {

	var window =  new TextWindow(id, node, init_data, 'deafbible');

	node.node.on('click', '.deaf-video-header input', function() {
		var button = $(this),
			url = button.attr('data-src'),
			video = button.closest('.deaf-video').find('video');

		button
			.addClass('active')
			.siblings()
				.removeClass('active');

		console.log(url, video);

		video.attr('src', url);
	});

	return window;
};

sofia.initMethods.push(function() {

	if (sofia.config.enableDeafBibleWindow)	{
		sofia.windowTypes.push({
			className:'DeafBibleWindow',
			param: 'deafbible',
			paramKeys: {
				'textid': 't',
				'fragmentid':'v'
			},
			init: {
				'textid': sofia.config.deafBibleWindowDefaultBibleVersion,
				'fragmentid': sofia.config.deafBibleWindowDefaultBibleFragmentid
			}
		});
	}
});

var MainMenu = function(node) {

	// simply create all 'menuComponents' define below
	for (var i=0, il=sofia.menuComponents.length; i<il; i++) {
		var component = new window[sofia.menuComponents[i]](node);
	}

	var ext = {

	};

	ext = $.extend(true, ext, EventEmitter);
	return ext;

};


var MainMenuButton = function(node) {
	var
		body = $(document.body),
		win = $(window),

		container = $('.windows-container'),
		mainMenuLogo = $('<div id="app-logo"></div>')
					.appendTo(node),
		mainMenuButton = $('<div id="main-menu-button"></div>')
					.appendTo(node)
					.on('click', mainMenuClick),
		mainMenuDropDown = $('<div id="main-menu-dropdown">' +
								'<div class="main-menu-heading i18n" data-i18n="[html]menu.labels.addwindow">Add Window</div>' +
								'<div id="main-menu-windows-list" class="main-menu-list"></div>' +
								'<div class="main-menu-heading i18n" data-i18n="[html]menu.labels.options"></div>' +
								'<div id="main-menu-features" class="main-menu-list"></div>' +
							'</div>')
							.appendTo( body )
							.hide();


	function mainMenuClick(e) {

		if (mainMenuDropDown.is(':visible')) {
			hide();
		} else {
			show();
		}
	}

	function show() {
		mainMenuButton.addClass('active');
		mainMenuDropDown.show();
		ext.onshow();
	}

	function hide() {
		mainMenuButton.removeClass('active');
		mainMenuDropDown.hide();
		ext.onhide();
	}

	mainMenuDropDown.on('click', '.main-menu-item', function() {
		hide();
	});


	var ext = {};
	ext = $.extend(true, ext, EventEmitter);
	ext = $.extend(true, ext, ClickOff);
	ext.clickoffid = 'version picker';
	ext.on('offclick', function() {
		hide();
	});
	ext.setClickTargets([mainMenuButton, mainMenuDropDown]);

	return ext;

}


sofia.menuComponents.push('MainMenuButton');




var MainSearchBox = function(node) {

	var searchBox = $('<div id="main-search-box">' +
							//'<input type="search" placeholder="Search" id="main-search-input" />' +

							//'<input type="search" placeholder="' + i18n.t('menu.search.placeholder') + '" id="main-search-input" />' +
							'<input type="search" class="i18n" data-i18n="[placeholder]menu.search.placeholder" id="main-search-input" />' +

							'<input type="button" id="main-search-button" value="" />' +
					'</div>')
						.appendTo(node),

		suggestions = $('<div id="main-search-suggestions"></div>')
						.appendTo(document.body)
						.hide(),

		searchInput = searchBox.find('#main-search-input')
								.on('keydown', checkNavigation)
								.on('keyup', checkInput)
								//.on('focus', showSuggestions)
								.on('blur', hideSuggestions),

		searchButton = searchBox.find('#main-search-button')
								.on('click', doSelectedAction),
		inputText = '',
		firstSearchWindow = null,
		firstBibleWindow = null;


	suggestions.on('click', '.suggestion-item', function() {
		var item = $(this);

		// select the clicked one
		item
			.addClass('selected')
			.siblings()
				.removeClass('selected');

		// do it!
		doSelectedAction();
	});


	function getWindowInfo() {
		var
			appSettings = sofia.app.windowManager.getSettings();

		for (var i=0,il=appSettings.length; i<il; i++) {
			var settings = appSettings[i];
			// first text
			if (settings.windowType == 'BibleWindow' && firstBibleWindow == null) {
				firstBibleWindow = settings;
			}

			// first search
			if (settings.windowType == 'SearchWindow' && firstSearchWindow == null) {
				firstSearchWindow = settings;
			}
		}
	}


	function doSelectedAction() {

		var actionName = suggestions.find('.selected').attr('data-name'),
			suggestedAction = suggestionActions.filter(function(item) {
				return item.name == actionName;
			})[0];

		suggestedAction.doAction( searchInput.val(), firstBibleWindow, firstSearchWindow );

		searchInput.val('');
		suggestions.val('');

		hideSuggestions();
	}


	function checkNavigation(e) {
		showSuggestions();

		var selectedSuggestion = suggestions.find('.selected');


		if (e.which == 40) { // arrow down
			// go down

			var nextSuggestion = selectedSuggestion.next();

			if (nextSuggestion.length == 0) {
				nextSuggestion = suggestions.children().first();
			}

			nextSuggestion
				.addClass('selected')
				.siblings()
					.removeClass('selected');

		} else if (e.which == 38) { // arrow up
			// go up

			var prevSuggestion = selectedSuggestion.prev();

			if (prevSuggestion.length == 0) {
				prevSuggestion = suggestions.children().last();
			}

			prevSuggestion
				.addClass('selected')
				.siblings()
					.removeClass('selected');

		} else {
			//checkInput(e);
		}
	}

	function checkInput(e) {

		if (e.which == 13) { // ENTER

			doSelectedAction();

			return;
		} else if (e.which == 38 || e.which == 40) { // UP or DOWN

			return false;
		}

		// try all actions
		var inputText = searchInput.val(),
			isFirst = true;

		suggestions.html('');

		if (inputText == '') {
			hideSuggestions();
			return;
		} else {
			showSuggestions();
		}

		for (var i=0,il=suggestionActions.length; i<il; i++) {
			var suggestionAction = suggestionActions[i],
				suggestionText = suggestionAction.checkInput(inputText, firstBibleWindow, firstSearchWindow);


			if (suggestionText != '') {
				var text = $('<span class="suggestion-item' + (isFirst ? ' selected' : '') + '" data-name="' + suggestionAction.name + '">' + suggestionText + '</span>')
					.appendTo(suggestions);

				isFirst = false;
			}
		}
	}

	function showSuggestions() {
		getWindowInfo();

		suggestions.show();
		positionSuggetions();
	}

	function hideSuggestions() {
		suggestions.hide();
	}

	function positionSuggetions() {
		var inputPos = searchBox.offset();

		suggestions.css({
			top: inputPos.top + searchBox.height(),
			left: inputPos.left
		})


	}


	var suggestionActions = [



		{
			name: 'search',
			checkInput: function(inputText, firstBibleWindow, firstSearchWindow) {
				return i18n.t('menu.search.suggestsearch').replace('{0}', inputText).replace('{1}', (firstBibleWindow != null ? firstBibleWindow.data.abbr : ''));
			},
			doAction: function(inputText, firstBibleWindow, firstSearchWindow) {

				PlaceKeeper.storePlace();

				var textid = firstBibleWindow != null ? firstBibleWindow.data.textid : sofia.config.newBibleWindowVersion;
				sofia.app.windowManager.add('SearchWindow', {searchtext: inputText, textid: textid});

				PlaceKeeper.restorePlace();

				searchBox.val('');
			}
		},

		{
			name: 'version',
			checkInput: function(inputText, firstBibleWindow, firstSearchWindow) {

				var matchingVersions = TextLoader.getTextInfoData().filter(function(textInfo) {
					return textInfo.abbr.toLowerCase() == inputText.toLowerCase();
				});

				if (matchingVersions.length > 0) {
					//return 'Open <strong>' + matchingVersions[0].abbr + '</strong> in new window';
					return i18n.t('menu.search.suggestversion').replace('{0}', matchingVersions[0].abbr );
				}

				return '';
				//return 'Open ' + inputText + ' in XXXXX';
			},
			doAction: function(inputText, firstBibleWindow, firstSearchWindow) {
				//

				var matchingTexts = TextLoader.getTextInfoData().filter(function(textInfo) {
						return textInfo.abbr.toLowerCase() == inputText.toLowerCase();
					}),
					selectedTextInfo = matchingTexts[0];

				sofia.app.windowManager.add('BibleWindow', {textid: selectedTextInfo.id, abbr: selectedTextInfo.abbr, fragmentid: firstBibleWindow ? firstBibleWindow.fragmentid : ''});

			}
		},

		{
			name: 'reference',
			checkInput: function(inputText, firstBibleWindow, firstSearchWindow) {

				var reference = new bible.Reference(inputText);

				if (typeof reference.isValid != 'undefined') {
					//return 'Go to <strong>' + reference.toString() + '</strong>' + (firstBibleWindow != null ? ' in ' + firstBibleWindow.data.abbr : '');
					return i18n.t('menu.search.suggestreference').replace('{0}', reference.toString()).replace('{1}', (firstBibleWindow != null ? firstBibleWindow.data.abbr : ''));
				}

				return '';
			},
			doAction: function(inputText, firstBibleWindow, firstSearchWindow) {

				var reference = new bible.Reference(inputText),
					fragmentid = reference.toSection();

				if (firstBibleWindow == null) {
					sofia.app.windowManager.add('BibleWindow', {textid: sofia.config.newBibleWindowVersion, fragmentid: fragmentid});

				} else {

					// HACK!!
					sofia.app.handleGlobalMessage(
						{
							data: {
								messagetype:'nav',
								type: 'bible',
								locationInfo: {
									fragmentid: fragmentid,
									sectionid: fragmentid.split('_')[0],
									offset: 0
								}
							}
						}
					);

				}

			}
		}
	];

	return searchBox;

};
sofia.menuComponents.push('MainSearchBox');

var FullScreenButton = function(node) {


	if (!fullScreenApi.supportsFullScreen) {
		return null;
	}

	$('html').addClass('supports-fullscreen');

	var
		el = document.body,
		//fullscreenButton = $('<div id="main-fullscreen-button" class="main-menu-item">Fullscreen</div>')
		//	.appendTo( $('#main-menu-features') )
		fullscreenButton = $('<div id="main-fullscreen-button"></div>')
			.appendTo( $('.windows-header') )
			.on('click', toggleFullscreen),

		isFullscreen = false;

	function toggleFullscreen() {
		if (fullScreenApi.isFullScreen()) {
			exitFullscreen();
		} else {
			enterFullscreen();
		}
	}

	function enterFullscreen() {
		fullScreenApi.requestFullScreen(el);
	}

	function exitFullscreen() {
		fullScreenApi.cancelFullScreen();

	}

	//console.log(fullScreenApi);


	return fullscreenButton;
};
sofia.menuComponents.push('FullScreenButton');

(function() {
    var
        fullScreenApi = {
            supportsFullScreen: false,
            isFullScreen: function() { return false; },
            requestFullScreen: function() {},
            cancelFullScreen: function() {},
            fullScreenEventName: '',
            prefix: ''
        },
        browserPrefixes = 'webkit moz o ms khtml'.split(' ');

    // check for native support
    if (typeof document.cancelFullScreen != 'undefined') {
        fullScreenApi.supportsFullScreen = true;
    } else {
        // check for fullscreen support by vendor prefix
        for (var i = 0, il = browserPrefixes.length; i < il; i++ ) {
            fullScreenApi.prefix = browserPrefixes[i];

            if (typeof document[fullScreenApi.prefix + 'CancelFullScreen' ] != 'undefined' ) {
                fullScreenApi.supportsFullScreen = true;

                break;
            }
        }
    }

    // update methods to do something useful
    if (fullScreenApi.supportsFullScreen) {
        fullScreenApi.fullScreenEventName = fullScreenApi.prefix + 'fullscreenchange';

        fullScreenApi.isFullScreen = function() {
            switch (this.prefix) {
                case '':
                    return document.fullScreen;
                case 'webkit':
                    return document.webkitIsFullScreen;
                default:
                    return document[this.prefix + 'FullScreen'];
            }
        }
        fullScreenApi.requestFullScreen = function(el) {
        	if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {
	        	el.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
        	}
            else {
            	return (this.prefix === '') ? el.requestFullScreen() : el[this.prefix + 'RequestFullScreen']();
            }
        }
        fullScreenApi.cancelFullScreen = function(el) {
            return (this.prefix === '') ? document.cancelFullScreen() : document[this.prefix + 'CancelFullScreen']();
        }
    }

    // jQuery plugin
    if (typeof jQuery != 'undefined') {
        jQuery.fn.requestFullScreen = function() {

            return this.each(function() {
                if (fullScreenApi.supportsFullScreen) {
                    fullScreenApi.requestFullScreen(this);
                }
            });
        };
    }

    // export api
    window.fullScreenApi = fullScreenApi;
})();

sofia.config = $.extend(sofia.config, {
	windowTypesOrder: []
});



var AddWindowButton = function(node) {

	var buttonMenu = $('#main-menu-windows-list');


	// create window buttons from window Types
	var windowTools = [];
	
	if (sofia.config.windowTypesOrder.length > 0 ) {
		
		
		for (var i=0, il=sofia.config.windowTypesOrder.length; i<il; i++) {
			var windowTypeName = sofia.config.windowTypesOrder[i],
				winType = sofia.windowTypes.filter(function(wt) { return wt.className == windowTypeName});
				
			if (winType.length > 0) {
				winType = winType[0];
				
				windowTools.push({
					type: winType.className,
					label: winType.param,
					data: winType.init
				});
			}
		}		
		
		
	} else {
	
		// build default array
		
		for (var i=0, il=sofia.windowTypes.length; i<il; i++) {
			var winType = sofia.windowTypes[i];
	
			windowTools.push({
				type: winType.className,
				label: winType.param,
				data: winType.init
			});
		}
	}

	// add buttons
	for (var x in windowTools) {
		var tool = windowTools[x];
		// ADD Button
		var addButton = $('<div class="main-menu-item window-add i18n" id="add-' + tool.type + '" data-i18n="[html]windows.' + tool.label + '.label"></div>')
					.appendTo(buttonMenu)
					.data('init', tool);
	}

	buttonMenu.on('click', '.window-add', function(e) {
		//buttonMenu.hide();

		var label = $(this),
			settings = label.data('init');

		// when starting a bible or commentary window, try to match it up with the others
		if (settings.type == 'BibleWindow' || settings.type == 'CommentaryWindow') {

			// get location from first window
			var
				firstBCWindow = (sofia.app.windowManager) ?
									sofia.app.windowManager.getWindows().filter(function(w) { return w.className == 'BibleWindow' || w.className == 'CommentaryWindow'})[0] :
									null,
				currentData = (firstBCWindow != null) ? firstBCWindow.getData() : null;


			// if no location, then use the defaults from config
			if (currentData != null) {
				console.log('first window', currentData);
				settings.data.fragmentid = currentData.fragmentid;
				settings.data.sectionid = currentData.sectionid;
			} else {
				var fragmentid = (typeof sofia.config.newWindowFragmentid != 'undefined') ? sofia.config.newWindowFragmentid : 'JN1_1',
					sectionid = fragmentid.split('_')[0];

				settings.data.fragmentid = fragmentid;
				settings.data.sectionid = sectionid;
			}

			console.log('new window', settings);
		}

		PlaceKeeper.storePlace();
		sofia.app.windowManager.add(settings.type, settings.data);
		PlaceKeeper.restorePlace();

		if (sofia.analytics) {
			sofia.analytics.record('createwindow', settings.type);
		}

		//windowManager.trigger('settingschange',{});
	});

	return addButton;

};
sofia.menuComponents.push('AddWindowButton');


var ConfigButton = function(node) {
	var

		container = $('.windows-container'),
		body = $(document.body),
		win = $(window),

		configButton = $('<div class="main-menu-item image-config i18n" data-i18n="[html]menu.labels.settings"></div>')
					.appendTo( $('#main-menu-features') )
					.on('click', buttonClick),

		modalOverlay = $('<div class="modal-overlay"></div>')
							.appendTo( body )
							.hide(),

		configWindow = new MovableWindow(300, 380, i18n.t('menu.labels.settings'), 'config-window');

		configWindow.body.html(
					'<div id="main-config-box">' +
						'<div class="config-section" id="config-type">' +
							'<span class="config-header i18n" data-i18n="[html]menu.config.font"></span>' +
							'<div class="config-body"></div>' +
							'<div class="clear"></div>' +
						'</div>' +
						/*
						'<div class="config-section" id="config-toggles">' +
							'<span class="config-header i18n" data-i18n="[html]menu.config.settings"></span>' +
							'<div class="config-body"></div>' +
							'<div class="clear"></div>' +
						'</div>' +
						*/
						'<div class="config-section" id="config-tools">' +
							'<span class="config-header i18n" data-i18n="[html]menu.config.tools"></span>' +
							'<div class="config-body"></div>' +
							'<div class="clear"></div>' +
						'</div>' +
					'</div>'
					);

	function showConfig() {
		var winWidth = win.width(),
			winHeight = win.height();

		modalOverlay
			.width( winWidth )
			.height( winHeight )
			.show();

		configWindow
			.show()
			.center();

		container.addClass('blur');

		$('#main-menu-dropdown').hide();
		$('#main-menu-button').removeClass('active');
	}

	function hideConfig() {
		configWindow.hide();
		modalOverlay.hide();
		container.removeClass('blur');
	}

	modalOverlay.on('click', function() {
		hideConfig();
	});

	configWindow.closeButton.on('click', function() {
		hideConfig();
	});

	function buttonClick(e) {

		e.preventDefault();

		if (configWindow.container.is(':visible')) {

			hideConfig();

		} else {

			showConfig();

		}

		return false;
	}
};
sofia.menuComponents.push('ConfigButton');


var AboutScreen = function(node) {
	var
		container = $('.windows-container'),
		body = $(document.body),
		win = $(window),

		aboutButton = $('<div class="main-menu-item about-logo i18n" data-i18n="[html]menu.labels.about">About</div>')
					.appendTo( $('#main-menu-features') )
					.on('click', aboutClick),

		modalOverlay = $('<div class="modal-overlay"></div>')
							.appendTo( body )
							.hide(),
		isAboutLoaded = false,
		aboutWindow = new MovableWindow(500, 250, i18n.t('menu.labels.about'));

	aboutWindow.body
					.css({padding: '20px'});

	aboutWindow.title.addClass('i18n').attr('data-i18n','[html]menu.labels.about');


	function hideAbout() {
		aboutWindow.hide();
		modalOverlay.hide();
		container.removeClass('blur');
	}

	modalOverlay.on('click', function() {
		hideAbout();
	});

	aboutWindow.closeButton.on('click', function() {
		hideAbout();
	});

	function aboutClick() {
		if (aboutWindow.container.is(':visible')) {
			hideAbout();
		} else {

			$('#main-menu-dropdown').hide();

			var winWidth = win.width(),
				winHeight = win.height();


			container.addClass('blur');

			aboutWindow
				.size(.8*winWidth, 0.7*winHeight)
				.show()
				.center();

			modalOverlay
				.width( winWidth )
				.height( winHeight )
				.show();


			if (!isAboutLoaded) {

				aboutWindow.body.addClass('loading-indicator');

				// assume a local file first
				$.ajax({
					url: sofia.config.aboutPagePath,
					dataType: 'html',
					success: function(data) {
						aboutWindow.body.removeClass('loading-indicator');

						isAboutLoaded = true;

						showAbout(data, sofia.config.aboutPagePath);
					},
					error: function() {

						if (sofia.config.baseContentUrl != '') {

							console.log("No local about.html");

							// this one will go through the CDN
							sofia.ajax({
								url: sofia.config.aboutPagePath,
								dataType: 'text',
								success: function(data) {

									console.log('Success: CDN about.html', data.indexOf('<html'));

									aboutWindow.body.removeClass('loading-indicator');

									isAboutLoaded = true;

									showAbout(data, sofia.config.baseContentUrl + sofia.config.aboutPagePath);
								},
								error: function() {

									// error
									console.log("Can't find a about.html");

								}
							});
						} else {

							console.log("No local about.html, no CDN to check");

						}
					}
				});
			}
		}
	}

	function showAbout(data, url) {

		if (data.indexOf('<html') > -1) {

			aboutWindow.body.html('<iframe style="border: 0;" src="' + url + '"></iframe>');
			aboutWindow.body.css({padding: 2});

			var iframe = aboutWindow.body.find('iframe');

			iframe.css({
				width: aboutWindow.body.width(),
				height: aboutWindow.body.height() - 5
			});

		} else {

			aboutWindow.body.html(data);
		}
	}

	return aboutButton;
};
sofia.menuComponents.push('AboutScreen');

sofia.config = $.extend(sofia.config, {

	enableFeedback: false,

	feedbackUrl: ''

});



var Feedback = function(node) {

	if (!sofia.config.enableFeedback|| sofia.config.feedbackUrl == '') {
		return;
	}


	var
		container = $('.windows-container'),
		body = $(document.body),
		win = $(window),

		feedbackButton = $('<div class="main-menu-item feedback-logo i18n" data-i18n="[html]menu.labels.feedback">Feedback</div>')
					.appendTo( $('#main-menu-features') )
					.on('click', clickFeedback),

		modalOverlay = $('<div class="modal-overlay"></div>')
							.appendTo( body )
							.hide(),

		feedbackWindow = new MovableWindow(Math.min( win.width(), 500), 300, i18n.t('menu.labels.feedback') ),

		name = $('<input type="text" id="feedback-from" class="app-input i18n" data-i18n="[placeholder]menu.feedback.name"  />')
						.appendTo(feedbackWindow.body),

		email = $('<input type="email" id="feedback-email" class="app-input i18n" data-i18n="[placeholder]menu.feedback.email"  />')
						.appendTo(feedbackWindow.body),

		subject = $('<select id="feedback-subject" class="app-list" >' +
						'<option class="i18n" data-i18n="[html]menu.feedback.feature"></option>' +
						'<option class="i18n" data-i18n="[html]menu.feedback.bug"></option>' +
						'<option class="i18n" data-i18n="[html]menu.feedback.other"></option>' +
					'</select>'
					)
						.appendTo(feedbackWindow.body),

		comments = $('<textarea id="feedback-comment" class="app-input i18n" data-i18n="[placeholder]menu.feedback.comments" />')
						.appendTo(feedbackWindow.body),

		send = $('<input type="button" id="feedback-submit" class="app-button i18n" data-i18n="[value]menu.feedback.send" />')
						.appendTo(feedbackWindow.body),

		message = $('<div class="feedback-message i18n" data-i18n="[placeholder]menu.feedback.thankyou"></div>')
						.appendTo(feedbackWindow.body)
						.hide()

		;


	feedbackWindow.body.addClass("feedback-body");
	feedbackWindow.title.addClass('i18n').attr('data-i18n','[html]menu.labels.feedback');

	modalOverlay.on('click', function() {
		hideFeedback();
	});

	feedbackWindow.closeButton.on('click', function() {
		hideFeedback();
	});

	function hideFeedback() {
		feedbackWindow.hide();
		modalOverlay.hide();
		container.removeClass('blur');
	}

	function clickFeedback() {
		if (feedbackWindow.container.is(':visible')) {
			hideFeedback();
		} else {
			feedbackWindow.show();
			feedbackWindow.size( Math.min(500, win.width()-40), 300 );
			feedbackWindow.center();

			message.hide();
			feedbackWindow.body.find('input,textarea,select').show();

			$('#main-menu-dropdown').hide();

			var winWidth = win.width(),
				winHeight = win.height();

			container.addClass('blur');
			modalOverlay
				.width( winWidth )
				.height( winHeight )
				.show();
		}
	}

	/// OPERATE FEEDBACK
	send.on('click', function() {

		if (validateForm() ) {

			$.ajax({
				url: sofia.config.baseContentUrl + sofia.config.feedbackUrl,
				dataType: (sofia.config.baseContentUrl.indexOf('http') > -1 ? 'jsonp' : 'json'),
				data: {
					name: name.val(),
					email: email.val(),
					subject: subject.val(),
					comments: comments.val()
				},
				success: function() {

					message.show();
					feedbackWindow.body.find('input,textarea,select').hide();

					setTimeout(function() {
						hideFeedback();
					}, 500);

				},
				error: function() {
					console.log('error', arguments);
				}

			})

		}


	});

	function validateForm() {
		var valid = true;

		if (name.val() === '') {
			name.addClass('invalid');
			valid = false;
		} else {
			name.removeClass('invalid');
		}

		if (email.val() === '' || !email.val().match(/.+@.+\..+/gi)) {
			email.addClass('invalid');
			valid = false;
		} else {
			email.removeClass('invalid');
		}


		if (comments.val() === '') {
			comments.addClass('invalid');
			valid = false;
		} else {
			comments.removeClass('invalid');
		}

		return valid;
	}



	return feedbackButton;
};
sofia.menuComponents.push('Feedback');

sofia.config = $.extend(sofia.config, {
	enableNavigationButtons: true
});



var NavigationButtons = function(node) {

	if (!sofia.config.enableNavigationButtons) {
		return;
	}

	$('html').addClass('supports-fullscreen');

	var
		forwardButton = $('<div id="main-forward-button" class="inactive"></div>')
			.appendTo( $('.windows-header') )
			.on('click', forward),
		backButton = $('<div id="main-back-button" class="inactive"></div>')
			.appendTo( $('.windows-header') )
			.on('click', back),

		compactBackButton = $('<div id="compact-back-button"><span id="compact-back-button-label"></span></div>')
			.appendTo( $('body') )
			.on('click', back),

		isFullscreen = false;

	function back() {
		TextNavigation.back();
		//window.history.go(-1);
	}

	function forward() {
		TextNavigation.forward();
		//window.history.go(1);
	}

	/*
	$(window).on('popstate', function(e) {
		console.log('fwrd/back pop', e);
		updateButtonStates();
	});
	*/

	TextNavigation.on('locationchange', function(e) {
		console.log('fwrd/back locationchange', e);
		updateButtonStates();
	});

	function updateButtonStates() {

		var locations = TextNavigation.getLocations(),
			locationIndex = TextNavigation.getLocationIndex();

		// BACK
		if (locationIndex > 0) {
			backButton.removeClass('inactive');


			// setup mobile/compact button
			var lastRef = new bible.Reference(locations[locations.length-2]);
			compactBackButton.find('#compact-back-button-label').html( lastRef.toString() );

			compactBackButton
				.addClass('active')
				.css({'display':''});


			if ($('body').hasClass('compact-ui')) {

				startCompactTimer();

			}


		} else {
			backButton.addClass('inactive');

			compactBackButton.removeClass('active');
		}

		// FORWARD
		if (locationIndex < locations.length-1) {
			forwardButton.removeClass('inactive');
		} else {
			forwardButton.addClass('inactive');
		}
	}

	var compactTimer = null;
	function startCompactTimer() {
		clearCompactTimer();

		compactTimer = setTimeout(hideCompactTimer, 5000);
	}

	function clearCompactTimer() {
		if (compactTimer != null) {
			clearTimeout(compactTimer);
		}
	}

	function hideCompactTimer() {
		if (compactBackButton.is(':visible')) {
			compactBackButton.fadeOut();
		}
	}



	updateButtonStates();


	return null;
};
sofia.menuComponents.push('NavigationButtons');

sofia.config = $.extend(sofia.config, {

	enableFontSizeSelector: true,

	fontSizeMin: 14,
	fontSizeMax: 28,
	fontSizeStep: 2,
	fontSizeDefault: 18

});


var FontSizeSettings = function(node) {

	// generate font sizes
	var styleCode = '';
	for (var size = sofia.config.fontSizeMin; size <= sofia.config.fontSizeMax; size += sofia.config.fontSizeStep) {
		styleCode += '.config-font-size-' + size.toString() + ' .reading-text { font-size: ' + size.toString() + 'px; }';
	}
	$('<style>' + styleCode + '</style>').appendTo( $('head') );


	if (!sofia.config.enableFontSizeSelector) {

		setFontSize(sofia.config.fontSizeDefault);

		return;
	}

	var
		body = $('#config-type .config-body'),
		fontSizeKey = 'config-font-size',
		defaultFontSizeSetting = {"fontSize": sofia.config.fontSizeDefault},
		fontSizeSetting = AppSettings.getValue(fontSizeKey, defaultFontSizeSetting);

	$('<table id="font-size-table"><tr><td><span style="font-size:' + sofia.config.fontSizeMin + 'px">A</span><td style="width:100%"></td><td><span style="font-size:' + sofia.config.fontSizeMax + 'px">A</span></td></tr></table>')
		.appendTo(body);

	// HTML5 range control (IE10+, FF35+)
	$('<input type="range" min="' + sofia.config.fontSizeMin + '" max="' + sofia.config.fontSizeMax + '" step="' + sofia.config.fontSizeStep + '" value="' + fontSizeSetting.fontSize + '" style="width: 100%;" />')
		.appendTo(body.find('td:eq(1)') )
		.on('change input', function() {

			console.log( $(this).val() );
			setFontSize( $(this).val() );

		});

	setFontSize(fontSizeSetting.fontSize);

	function setFontSize(newFontSize) {


		var	body = $('body');

		PlaceKeeper.storePlace();

		// remove all others
		for (var size = sofia.config.fontSizeMin; size <= sofia.config.fontSizeMax; size += sofia.config.fontSizeStep) {

			var className = 'config-font-size-' + size;

			body.removeClass(className);
		}

		body.addClass('config-font-size-' + newFontSize);

		AppSettings.setValue(fontSizeKey, {fontSize: newFontSize});


		if (sofia.analytics) {
			sofia.analytics.record('setting', 'fontsize', newFontSize);
		}

		PlaceKeeper.restorePlace();
	}

};

sofia.menuComponents.push('FontSizeSettings');

sofia.config = $.extend(sofia.config, {

	enableFontFamilySelector: true,

	fontFamilyStacks: {
		'Cambria': 'Cambria, Georgia, serif',
		'Palatino': 'Palatino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, serif',
		//'Georgia': 'Georgia, Times, "Times New Roman", serif',
		'Libertine': 'Libertine', // Serif family but does not need fallback because we're loding it as a webfont if not present on system
		'Helvetica': '"Helvetica Neue", Helvetica, Arial, sans-serif',
		'Trebuchet': '"Trebuchet MS", "Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", Tahoma, sans-serif'
	}

});



var FontFamilySettings = function(node) {

	var
		body = $('#config-type .config-body'),
		fontFamilyStackNames = Object.keys(sofia.config.fontFamilyStacks), // ['Cambria', 'Helvetica', 'Baskerville', 'Times', 'Libertine'],
		defaultFontSetting = {"fontName": fontFamilyStackNames[0]},
		fontFamilyKey = 'config-font-family',
		fontFamilySetting = AppSettings.getValue(fontFamilyKey, defaultFontSetting),
		fontSettingHtml = '',
		fontFamilyStyle = '';

	//
	for(var i=0, il=fontFamilyStackNames.length; i<il; i++) {
		var fontStackName = fontFamilyStackNames[i],
			fontStackValue = sofia.config.fontFamilyStacks[fontStackName];

		fontSettingHtml +=
			'<label id="config-font-family-' + fontStackName + '" class="config-font-family" title="' + fontStackName + '" >' +
				'<input type="radio" id="config-font-family-' + fontStackName + '-value" name="config-font-family" value="' + fontStackName + '" />' +
				'Aa' +
			'</label>';

		fontFamilyStyle +=
				'#config-font-family-' + fontStackName + ', ' +
				'.config-font-family-' + fontStackName + ' .reading-text,' +
				'.config-font-family-' + fontStackName + ' #font-size-table {' +
				'  font-family: ' + fontStackValue + ';' +
				'}';

	}

	$('<style>' + fontFamilyStyle + '</style>').appendTo( $('head') );

	if (!sofia.config.enableFontFamilySelector) {
		setFontFamily(defaultFontSetting.fontName);
		return;
	}


	$(fontSettingHtml).appendTo(body);


	function setFontFamily(newFontStackName) {

		var body = $('body');

		PlaceKeeper.storePlace();

		// remove all others
		for(var i=0, il=fontFamilyStackNames.length; i<il; i++) {
			var fontStackName = fontFamilyStackNames[i],
				className = 'config-font-family-' + fontStackName;

			body.removeClass(className);
		}

		$(body).addClass('config-font-family-' + newFontStackName);

		AppSettings.setValue(fontFamilyKey, {fontName: newFontStackName});

		if (sofia.analytics) {
			sofia.analytics.record('setting', 'fontfamily', newFontStackName);
		}

		PlaceKeeper.restorePlace();

	}

	// handle clicks
	body.on('change', 'input[name=config-font-family]', function() {
		var radio = $(this),
			newFontFamilyValue = radio.val();

		setFontFamily(newFontFamilyValue);
	});

	// set default
	body.find('#config-font-family-' + fontFamilySetting.fontName + '-value').trigger('click');
};

sofia.menuComponents.push('FontFamilySettings');

sofia.config = $.extend(sofia.config, {

	enableThemeSelector: true

});

var ThemeSetting = function(node) {

	if (!sofia.config.enableThemeSelector) {
		return;
	}

	var
		body = $('#config-type .config-body'),
		themesBlock = $('<div id="config-themes"></div>')
			.appendTo(body),
		themeNames = ['default','sepia','dark'],
		defaultThemeSetting = {"themeName": themeNames[0]},
		themeKey = 'config-theme',
		themeSetting = AppSettings.getValue(themeKey, defaultThemeSetting);


	for(var i=0, il=themeNames.length; i<il; i++) {
		var themeName = themeNames[i];

		$('<span id="config-theme-' + themeName + '" class="config-theme-toggle i18n" data-i18n="[html]menu.themes.' + themeName + '" data-themename="' + themeName + '">' + themeName + '</span>')
			.appendTo(themesBlock);
	}

	// handle clicks
	themesBlock.on('click', '.config-theme-toggle', function() {
		var span = $(this),
			selectedTheme = span.attr('data-themename'),
			selectedThemeClass = 'theme-' + selectedTheme,
			$body = $(document.body);

		// remove all themes
		for(var i=0, il=themeNames.length; i<il; i++) {
			var themeClassName = 'theme-' + themeNames[i];
			$body.removeClass(themeClassName);
		}

		$body.addClass(selectedThemeClass);

		span
			.addClass('config-theme-toggle-selected')
			.siblings()
			.removeClass('config-theme-toggle-selected');


		AppSettings.setValue(themeKey, {themeName: selectedTheme} );
	});

	body.find('#config-theme-' + themeSetting.themeName + '').trigger('click');
};

sofia.menuComponents.push('ThemeSetting');

sofia.config = $.extend(sofia.config, {

	enableLanguageSelector: true,

	languageSelectorFallbackLang: 'en'

});


var LanguageSetting = function(node) {

	if (!sofia.config.enableLanguageSelector) {
		return;
	}

	var
		body = $('#config-tools .config-body'),
		list = $('<select id="config-language" class="app-list"></select>')
					.appendTo(body),
		langKeys = Object.keys(sofia.resources);

	body.append($('<div class="clear"></div>'));

	// make sure English isn't first!
	langKeys.sort();

	for(var i=0, il=langKeys.length; i<il; i++) {
		var langKey = langKeys[i],
			langName = sofia.resources[langKey].translation.name;

		$('<option value="' + langKey + '">' + langName + '</option>')
			.appendTo(list);
	}

	// handle clicks
	list.on('change', function() {
		var newLang = list.val();

		i18n.setLng(newLang);
		$('.i18n').i18n();

		localizeLanguages();
	});

	function localizeLanguages() {
		var usersLanguage = i18n.lng();

		// go through options and add new info
		list.children('option').each(function() {
			var option = $(this),
				langValue = option.attr('value');
				resourceData = sofia.resources[langValue].translation,
				name = resourceData.name,
				fallbackName = resourceData.names[sofia.config.languageSelectorFallbackLang],
				localizedName = resourceData.names[usersLanguage],
				fullname = name;

			// use the localized name if possible
			if (localizedName != null && typeof localizedName != 'undefined' && localizedName != fullname) {
				fullname += ' (' + localizedName + ')';

			// fallback to english
			} else if (fallbackName != null && typeof fallbackName != 'undefined' && fullname != fallbackName) {
				fullname += ' (' + fallbackName + ')';
			}

			option.html(fullname);

		});
	}

	list[0].localizeLanguages = localizeLanguages;
};

sofia.menuComponents.push('LanguageSetting');

sofia.config = $.extend(sofia.config, {

	enableSettingToggles: true,
	settingToggleNames: ['Chapters', 'Verses', 'Titles', 'Notes', 'Words of Christ', 'Media', 'Justify'],
	settingToggleDefaults: [true, true, true, true, true, true, false]

});


var ConfigToggles = function(node) {

	var body = $('#config-type .config-body'),
		toggleNames = sofia.config.settingToggleNames,
		toggleDefaults = sofia.config.settingToggleDefaults,
		prefix = 'config-toggle-';

	if (!sofia.config.enableSettingToggles) {
		for(var i=0, il=toggleNames.length; i<il; i++) {
			var toggleName = toggleNames[i]
			setToggle(toggleName, toggleDefaults[i]);
		}

		return;
	}

	sofia.globals.createToggle = function(toggleName, defaultValue) {

		var
			toggleId = toggleName.replace(/\s/gi, '').toLowerCase(),
			toggleDefaultSetting = {checked: defaultValue},
			toggleSetting = AppSettings.getValue(toggleId, toggleDefaultSetting),
			toggle = $('<div id="config-toggle-' + toggleId + '" class="config-toggle">' +
						'<input id="config-toggle-' + toggleId + '-input" type="checkbox" value="' + toggleId + '" />' +
						'<label for="config-toggle-' + toggleId + '-input" title="' + toggleName + '">' + toggleName + '</label>' +
					'</div>')
						.appendTo(body);

		toggle
			.find('input')
				.on('click', function() {
					var cb = $(this),
						checked = cb.is(':checked'),
						value = cb.val();

					setToggle(value, checked);

				});

		setToggle(toggleId, toggleSetting.checked);

	}

	function setToggle(toggleId, checked) {

		PlaceKeeper.storePlace();

		var toggle = $('#config-toggle-' + toggleId),
			body = $('body'),
			onClass = 'toggle-' + toggleId + '-on',
			offClass = 'toggle-' + toggleId + '-off';

		if (checked == true || checked == 'true') {
			toggle.addClass('toggle-on');
			toggle.find('input').prop('checked', true);
			body
				.addClass(onClass)
				.removeClass(offClass);

		} else {
			toggle.removeClass('toggle-on');
			toggle.find('input').prop('checked', false);
			body
				.removeClass(onClass)
				.addClass(offClass);
		}

		PlaceKeeper.restorePlace();


		if (sofia.analytics) {
			sofia.analytics.record('setting', toggleId, checked);
		}

		//console.log('setValue', toggleId, checked);
		AppSettings.setValue(toggleId, {checked: checked});

	}


	for(var i=0, il=toggleNames.length; i<il; i++) {
		var toggleName = toggleNames[i]
		sofia.globals.createToggle(toggleName, toggleDefaults[i]);
	}

};

sofia.menuComponents.push('ConfigToggles');

sofia.config = $.extend(sofia.config, {

	enableUrlCopier: true

});


var ConfigUrl = function(node) {

	if (!sofia.config.enableUrlCopier || location.protocol == 'file:') {
		return;
	}

	var // body = $('#config-tools .config-body'),
		body = $('#main-menu-features'),
		urlBox =
				$('<div id="config-global-url">' +
						//'<span class="config-header">URL</span>' +
						'<span data-clipboard-action="copy" data-clipboard-target="#config-global-url-input"></span>' +
						'<input type="text" id="config-global-url-input" />' +
						//'<div ></div>' +
					'</div>'),
		linkButton = urlBox.find('span'),
		urlInput = urlBox.find('input'),
		urlDiv = urlBox.find('div'),
		clickables = [linkButton, urlInput, urlDiv];

	body.after(urlBox);

	var urlTimer = new Timer(updateUrl, 500);

	setTimeout(function() {
		sofia.app.windowManager.on('settingschange', function(e) {

			// title to show active window's position
			urlTimer.start();

		});

		updateUrl();
	}, 1000);


	var clipboard1 = new Clipboard(linkButton[0]);
	var clipboard2 = new Clipboard('#config-global-url-input');	

	/*
	if (Detection.hasFlash) {
		ZeroClipboard.config( { moviePath: sofia.config.baseContentUrl + 'build/ZeroClipboard.swf' } );
		for (var c in clickables) {
			var el = clickables[c];

			var client = new ZeroClipboard(el);
			client.on( 'dataRequested', function (client, args) {

				updateUrl();

				client.setText( urlInput.val() );

				urlInput.focus();
				urlInput.select();

				console.log('flash clipboard clicked');
			});
		}
	}
	*/

	urlInput.on('click', function() {
		updateUrl();

		urlInput.focus();
		urlInput.select();

	});

	linkButton.on('click', function() {
		updateUrl();

		urlInput.focus();
		urlInput.select();
	});


	function updateUrl() {
			// get settings from all windows
		var windowSettings = sofia.app.windowManager.getSettings(),
			existingParams = stringUtility.parseQuerystring();
			newParams = {},
			mergedParams = {},
			mergedArray = [];

		for (var i=0, il=windowSettings.length; i<il; i++) {
			// get window settings
			var winSettings = windowSettings[i];

			if (winSettings.data == null || typeof winSettings.data.params == 'undefined') {
				continue;
			}

			// get window type info
			var winTypeName = winSettings.data.params.win,
				winTypeInfo = sofia.windowTypes.filter(function(winType) { return winType.param == winTypeName; })[0];

			if (typeof winTypeInfo == 'undefined') {
				console.log('Cannot find', winTypeName, winTypeInfo, winSettings.data.params, winSettings.data.params.win);
				continue;
			}

			// go through the params object
			// params: {'win': 'bible', 'fragmentid': 'JN1_1'}
			// shorten with paramKeys
			for (var paramName in winSettings.data.params) {
				var paramData = winSettings.data.params[paramName],
					paramShort = paramName == 'win' ? 'w' : winTypeInfo.paramKeys[paramName];

				newParams[ paramShort + (i+1) ] = paramData;
				//console.log(paramName, paramData);
			}

		}

		// keep all parameters that aren't windowed ones
		for (var param in existingParams) {
			// check if it's blank or if it's a previously existing parameter (say the third window, and now there is only 2)
			if (param != '' && param.indexOf('win') != 0  && param.indexOf('textid') != 0  && param.indexOf('searchtext') != 0  && param.indexOf('fragmentid') != 0 ) {
				mergedParams[ param ] = existingParams[param];
			}
		}


		mergedParams = $.extend({}, mergedParams, newParams);

		for (var param in mergedParams) {
			if (param != '' ) {
				mergedArray.push( param + '=' + encodeURIComponent( mergedParams[param] ) );
			}
		}
		//mergedArray.reverse();

		url = location.protocol + '//' + location.host + location.pathname + '?' + mergedArray.join('&');

		urlInput.val(url);
		urlDiv.html(url);

		//console.log('URL', url);
	}



	//base.height('300px');
};

sofia.menuComponents.push('ConfigUrl');
